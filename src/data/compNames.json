[{"id": 0, 
"name": "1C:Enterprise programming language",
"summary": "1C Company (Russian: Фирма «1С», [ˈfʲirmə ɐˈdʲin ˈɛs]) is an independent software developer, distributor and publisher with headquarters in Moscow, Russia. It develops, manufactures, licenses, supports and sells computer software, related services and video games.\nIn Russia, 1C is considered a leader in business software for its comprehensive business software suite 1С:Enterprise (Russian: 1С:Предприятие, 1C:Predpriyatie). \n1C is known as a video game developer and publisher. Most popular titles produced by the company are Il-2 Sturmovik, King’s Bounty, Men of War and Space Rangers series. 1C acts as a publisher for dozens of independent developers and has produced over 100 videogame titles.\n1C is also the official distributor of 100+ software vendors.\nBy the decision of Russian Federal Service for Intellectual Property (Rospatent) the trademark ‘1C’ is considered ‘well known’ on the territory of the Russian Federation since 1 January of 2006. \nThe company has over 1200 employees. 1С Company operates through wide network of 10 000+ business partners in 25 countries, including 7000+ 1C franchise authorized software integrators & VARs and 400+ authorized training centers.  \n1C Company is also developing its 1C:Accounting outsourcing service (Russian: 1С:БухОбслуживание, 1С:BuhObslugivanie) – a 500+ partner network offering services like accounting, taxation, payroll, etc.\n\n"
},
{"id": 1, 
"name": "A Sharp (.NET)",
"summary": "A# is a port of the Ada programming language to the Microsoft .NET platform. A# is freely distributed by the Department of Computer Science at the United States Air Force Academy as a service to the Ada community under the terms of the GNU General Public License.\nAdaCore has taken over this development, and announced \"GNAT for .NET\", which is a fully supported .NET product with all of the features of A# and more."
},
{"id": 2, 
"name": "A+ (programming language)",
"summary": "A programming language is a formal language, which comprises a set of instructions that produce various kinds of output. Programming languages are used in computer programming to implement algorithms.\nMost programming languages consist of instructions for computers. There are programmable machines that use a set of specific instructions, rather than general programming languages. Early ones preceded the invention of the digital computer, the first probably being the automatic flute player described in the 9th century by the brothers Musa in Baghdad, during the Islamic Golden Age. Since the early 1800s, programs have been used to direct the behavior of machines such as Jacquard looms, music boxes and player pianos. The programs for these machines (such as a player piano's scrolls) did not produce different behavior in response to different inputs or conditions.\nThousands of different programming languages have been created, and more are being created every year. Many programming languages are written in an imperative form (i.e., as a sequence of operations to perform) while other languages use the declarative form (i.e. the desired result is specified, not how to achieve it).\nThe description of a programming language is usually split into the two components of syntax (form) and semantics (meaning). Some languages are defined by a specification document (for example, the C programming language is specified by an ISO Standard) while other languages (such as Perl) have a dominant implementation that is treated as a reference. Some languages have both, with the basic language defined by a standard and extensions taken from the dominant implementation being common."
},
{"id": 3, 
"name": "A++",
"summary": "A Christmas Story is a 1983 American Christmas comedy film directed by Bob Clark and based on Jean Shepherd's semi-fictional anecdotes in his 1966 book In God We Trust: All Others Pay Cash, with some elements from his 1971 book Wanda Hickey's Night of Golden Memories and Other Disasters. It stars Melinda Dillon, Darren McGavin, and Peter Billingsley. A seasonal classic in North America, it is shown numerous times on television, usually on the networks owned by the Turner Broadcasting System. Since 1997, a marathon of the film titled \"24 Hours of A Christmas Story\" has aired annually on TNT or TBS, comprising 12 consecutive airings of the film on both Christmas Eve and Christmas Day each year. It is often ranked as one of the best Christmas films.\nThe film was released on November 18, 1983, earning two Canadian Genie Awards in 1984. In 2012, it was selected for preservation in the National Film Registry by the Library of Congress for being \"culturally, historically, or aesthetically significant\"."
},
{"id": 4, 
"name": "A-0 System",
"summary": "The A-0 system (Arithmetic Language version 0), written by Grace Murray Hopper  in 1951 and 1952 for the UNIVAC I, was an early compiler related tool developed for electronic computers. The A-0 functioned more as a loader or linker than the modern notion of a compiler. A program was specified as a sequence of subroutines and arguments. The subroutines were identified by a numeric code and the arguments to the subroutines were written directly after each subroutine code. The A-0 system converted the specification into machine code that could be fed into the computer a second time to execute the said program.\nThe A-0 system was followed by the  A-1, A-2, A-3 (released as ARITH-MATIC), AT-3 (released as MATH-MATIC) and B-0 (released as FLOW-MATIC).\nThe A-2 system was developed at the UNIVAC division of Remington Rand in 1953 and released to customers by the end of that year.  Customers were provided the source code for A-2 and invited to send their improvements back to UNIVAC.   Thus A-2 was an early example of free and open-source software."
},
{"id": 5, 
"name": "ABAP",
"summary": "ABAP (Advanced Business Application Programming, originally Allgemeiner Berichts-Aufbereitungs-Prozessor, German for \"general report creation processor\") is a high-level programming language created by the German software company SAP SE. It is currently positioned, alongside Java, as the language for programming the SAP NetWeaver Application Server, which is part of the SAP NetWeaver platform for building business applications."
},
{"id": 6, 
"name": "ABC (programming language)",
"summary": "ABC is an imperative general-purpose programming language and programming environment developed at CWI, Netherlands by Leo Geurts, Lambert Meertens, and Steven Pemberton. It is interactive, structured, high-level, and intended to be used instead of BASIC, Pascal, or AWK. It is not meant to be a systems-programming language but is intended for teaching or prototyping.\nThe language had a major influence on the design of the Python programming language; Guido van Rossum, who developed Python, previously worked for several years on the ABC system in the mid 1980s."
},
{"id": 7, 
"name": "ABC ALGOL",
"summary": "ABC ALGOL is an extension of the programming language ALGOL 60 with arbitrary data structures and user-defined operators, intended for computer algebra (symbolic mathematics). Despite its advances, it was never used as widely as Algol proper."
},
{"id": 8, 
"name": "ACC (programming language)",
"summary": "ACC is a near-C compiler for the MS-DOS operating system on the IBM PC line of computers for programs. The compiler and compiled programs will run on any Intel 80386 or above PC running MS-DOS. Included with the compiler are a 386 assembler and a linker for combining multiple object files. There are also two libraries, which are a protected mode DOS extender (based on Thomas Pytel's, AKA Tran's PMODE30B + PMODE307 DOS extenders), and a library of functions callable by C programs.\nPointers are 4 bytes, and can access all available memory. All memory can be allocated too. The compiler, assembler and linker are all very small and reportedly very fast."
},
{"id": 9, 
"name": "AIMMS",
"summary": "AIMMS (acronym for Advanced Interactive Multidimensional Modeling System) is a prescriptive analytics software company with offices in the Netherlands, United States, China and Singapore.\nIt has two main product offerings that provide modeling and optimization capabilities across a variety of industries. The AIMMS Prescriptive Analytics Platform allows advanced users to develop optimization-based applications and deploy them to business users. AIMMS SC Navigator, launched in 2017, is built on the AIMMS Prescriptive Analytics Platform and provides configurable Apps for supply chain teams. SC Navigator provides supply chain analytics to non-advanced users."
},
{"id": 10, 
"name": "ALGOL 58",
"summary": "ALGOL 58, originally named IAL, is one of the family of ALGOL computer programming languages. It was an early compromise design soon superseded by ALGOL 60. According to John Backus\n\n\"The Zurich ACM-GAMM Conference had two principal motives in proposing the IAL: (a) To provide a means of communicating numerical methods and other procedures between people, and (b) To provide a means of realizing a stated process on a variety of machines...\"\n\nALGOL 58 introduced the fundamental notion of the compound statement, but it was restricted to control flow only, and it was not tied to identifier scope in the way that Algol 60's blocks were."
},
{"id": 11, 
"name": "ALGOL 60",
"summary": "ALGOL 60 (short for Algorithmic Language 1960) is a member of the ALGOL family of computer programming languages.  It followed on from ALGOL 58 which had introduced code blocks and the begin and end pairs for delimiting them.  ALGOL 60 was the first language implementing nested function definitions with lexical scope.  It gave rise to many other programming languages, including CPL, Simula, BCPL, B, Pascal, and C.\nNiklaus Wirth based his own ALGOL W on ALGOL 60 before moving to develop Pascal. Algol-W was intended to be the next generation ALGOL but the ALGOL 68 committee decided on a design that was more complex and advanced rather than a cleaned simplified ALGOL 60. The official ALGOL versions are named after the year they were first published. Algol 68 is substantially different from Algol 60 and was criticised partially for being so, so that in general \"Algol\" refers to dialects of Algol 60."
},
{"id": 12, 
"name": "ALGOL 68",
"summary": "ALGOL 68 (short for Algorithmic Language 1968) is an imperative computer programming language that was conceived as a successor to the ALGOL 60 programming language, designed with the goal of a much wider scope of application and more rigorously defined syntax and semantics.\nThe complexity of the language's definition, which runs to several hundred pages filled with non-standard terminology, made compiler implementation difficult and it was said it had \"no implementations and no users\". This was only partially true; ALGOL 68 did find use in a number of niche markets, notably in the United Kingdom where it was popular on International Computers Limited (ICL) machines, and in teaching roles. Outside these circles, use was relatively limited.\nNevertheless, the contributions of ALGOL 68 to the field of computer science have been deep, wide-ranging and enduring, although many of these contributions were only publicly identified when they had reappeared in subsequently developed programming languages. Many languages were developed specifically as a response to the perceived complexity of the language, the most notable being Pascal, or were reimplementations for specific roles, like Ada.\nMany languages of the 1970s trace their design specifically to ALGOL 68, selecting some features while abandoning others that were considered too complex or out-of-scope for given roles. Among these is the language C, which was directly influenced by ALGOL 68, especially by its strong typing and structures. Most modern languages trace at least some of their syntax to either C or Pascal, and thus directly or indirectly to ALGOL 68."
},
{"id": 13, 
"name": "ALGOL W",
"summary": "ALGOL W is a programming language. It is based on a proposal for ALGOL X by Niklaus Wirth and Tony Hoare as a successor to ALGOL 60 in International Federation for Information Processing (IFIP) IFIP Working Group 2.1. When the committee decided that the proposal was not a sufficient advance over ALGOL 60, the proposal was published as A contribution to the development of ALGOL. After making small modifications to the language Wirth supervised a high quality implementation for the IBM/360 at Stanford University that was widely distributed.It represented a relatively conservative modification of ALGOL 60, adding string, bitstring, complex number and reference to record datatypes and call-by-result passing of parameters, introducing the while statement, replacing switch with the case statement, and generally tightening up the language.\nThe implementation was written in PL/360, an ALGOL-like assembly language designed by Wirth. The implementation includes influential debugging and profiling abilities."
},
{"id": 14, 
"name": "AMOS (programming language)",
"summary": "AMOS BASIC is a dialect of the BASIC programming language implemented on the Amiga computer. AMOS BASIC was published by Europress Software and originally written by François Lionet with Constantin Sotiropoulos."
},
{"id": 15, 
"name": "AMPL",
"summary": "A Mathematical Programming Language (AMPL) is an algebraic modeling language to describe and solve high-complexity problems for large-scale mathematical computing (i.e., large-scale optimization and scheduling-type problems).\nIt was developed by Robert Fourer, David Gay, and Brian Kernighan at Bell Laboratories.\nAMPL supports dozens of solvers, both open source and commercial software, including CBC, CPLEX, FortMP, Gurobi, MINOS, IPOPT, SNOPT, KNITRO, and LGO. Problems are passed to solvers as nl files.\nAMPL is used by more than 100 corporate clients, and by government agencies and academic institutions.One advantage of AMPL is the similarity of its syntax to the mathematical notation of optimization problems. This allows for a very concise and readable definition of problems in the domain of optimization. Many modern solvers available on the NEOS Server (formerly hosted at the Argonne National Laboratory, currently hosted at the University of Wisconsin, Madison) accept AMPL input. According to the NEOS statistics AMPL is the most popular format for representing mathematical programming problems."
},
{"id": 16, 
"name": "APL (programming language)",
"summary": "APL (named after the book A Programming Language) is a programming language developed in the 1960s by Kenneth E. Iverson. Its central datatype is the multidimensional array. It uses a large range of special graphic symbols to represent most functions and operators, leading to very concise code. It has been an important influence on the development of concept modeling, spreadsheets, functional programming, and computer math packages. It has also inspired several other programming languages."
},
{"id": 17, 
"name": "APT (programming language)",
"summary": "APT or Automatically Programmed Tool is a high-level computer programming language most commonly used to generate instructions for numerically controlled machine tools. Douglas T. Ross is considered by many to be the father of APT: as head of the newly created Computer Applications Group of the Servomechanisms Laboratory at MIT in 1956, he led its technical effort. APT is a language and system that makes numerically controlled manufacturing possible. This early language was used widely through the 1970s and is still a standard internationally. Derivatives of APT were later developed.\n\n"
},
{"id": 18, 
"name": "ARexx",
"summary": "ARexx is an implementation of the Rexx language for the Amiga, written in 1987 by William S. Hawes, with a number of Amiga-specific features beyond standard REXX facilities.  Like most REXX implementations, ARexx is an interpreted language. Programs written for ARexx are called \"scripts\", or \"macros\"; several programs offer the ability to run ARexx scripts in their main interface as macros.\nARexx can easily communicate with third-party software that implements an \"ARexx port\". Any Amiga application or script can define a set of commands and functions for ARexx to address, thus making the capabilities of the software available to the scripts written in ARexx.\nARexx can direct commands and functions to several applications from the same script, thus offering the opportunity to mix and match functions from the different programs. For example, an ARexx script could extract data from a database, insert the data into a spreadsheet to perform calculations on it, then insert tables and charts based on the results into a word processor document."
},
{"id": 19, 
"name": "AS/400 Control Language",
"summary": "The IBM i Control Language (CL) is a scripting language for the IBM's IBM i platform (previously called OS/400 when running on AS/400 systems) bearing a resemblance to the IBM Job Control Language and consisting of an ever-expanding set of command objects (*CMD) used to invoke traditional AS/400 programs and/or get help on what those programs do. CL can also be used to create CL programs (congruent to shell scripts) where there are additional commands that provide program-like functionality (IF/ELSE, variable declaration, file input, etc.)\nAlthough CL is a scripting language for system administration, it is used mainly to create compiled programs. The use of interpreted CL scripts through the SBMDBJOB command  is in fact extremely limited.\nWhile thousands of commands were written by IBM developers to perform system level tasks like compiling programs, backing up data, changing system configurations, displaying system object details, or deleting them, commands are not limited to systems level concerns and can be drafted for user applications as well."
},
{"id": 20, 
"name": "AWK",
"summary": "AWK is a domain-specific language designed for text processing and typically used as a data extraction and reporting tool. It is a standard feature of most Unix-like operating systems.\nThe AWK language is a data-driven scripting language consisting of a set of actions to be taken against streams of textual data – either run directly on files or used as part of a pipeline – for purposes of extracting or transforming text, such as producing formatted reports. The language extensively uses the string datatype, associative arrays (that is, arrays indexed by key strings), and regular expressions. While AWK has a limited intended application domain and was especially designed to support one-liner programs, the language is Turing-complete, and even the early Bell Labs users of AWK often wrote well-structured large AWK programs.AWK was created at Bell Labs in the 1970s, and its name is derived from the surnames of its authors—Alfred Aho, Peter Weinberger, and Brian Kernighan. The acronym is pronounced the same as the name of the bird auk (which acts as an emblem of the language such as on The AWK Programming Language book cover – the book is often referred to by the abbreviation TAPL). When written in all lowercase letters, as awk, it refers to the Unix or Plan 9 program that runs scripts written in the AWK programming language."
},
{"id": 21, 
"name": "Accent (programming language)",
"summary": "No summary available"
},
{"id": 22, 
"name": "Action! (programming language)",
"summary": "Action! is a procedural programming language similar to ALGOL that is intended to produce high-performance programs for the Atari 8-bit family. The language was written by Clinton Parker and distributed on ROM cartridge by Optimized Systems Software (OSS) starting in 1983. It was one of the first of OSS's bank switching \"Super Cartridges\", with a total of 16 kB of code.\nWorking with Henry Baker, Parker had previously developed Micro-SPL, a systems programming language for the Xerox Alto. Action! was largely a port of Micro-SPL concepts to the Atari with the necessary changes to more directly handle the underlying MOS 6502 processor and add an editor and debugger.\nAction! was used to develop at least two commercial products—the Homepak productivity suite and Games Computers Play client program—and numerous programs in ANALOG Computing and Antic magazines. The editor portion was also used as the basis for the PaperClip word processor. The language was not ported to any other platforms.\nThe 6502 assembly language source code for Action! was made available under the GNU General Public License by the author in 2015."
},
{"id": 23, 
"name": "ActionScript",
"summary": "ActionScript is an object-oriented programming language originally developed by Macromedia Inc. (later acquired by Adobe Systems). It is influenced by HyperTalk, the scripting language for HyperCard. It is now an implementation of ECMAScript (meaning it is a superset of the syntax and semantics of the language more widely known as JavaScript), though it originally arose as a sibling, both being influenced by HyperTalk.\nActionScript is used primarily for the development of websites and software targeting the Adobe Flash Player platform, used on Web pages in the form of embedded SWF files.\nActionScript 3 is also used with Adobe AIR system for the development of desktop and mobile applications. The language itself is open-source in that its specification is offered free of charge and both an open source compiler (as part of Apache Flex) and open source virtual machine (Mozilla Tamarin) are available.\nActionScript is also used with Scaleform GFx for the development of 3D video game user interfaces and HUDs."
},
{"id": 24, 
"name": "Active Server Pages",
"summary": "Active Server Pages (ASP) is Microsoft's first server-side script engine for dynamically generated web pages.\nIt was first released in December 1996, before being superseded in January 2002 by ASP.NET."
},
{"id": 25, 
"name": "Actor (programming language)",
"summary": "The actor model in computer science is a mathematical model of concurrent computation that treats \"actor\" as the universal primitive of concurrent computation. In response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received. Actors may modify their own private state, but can only affect each other indirectly through messaging (obviating lock-based synchronization).\nThe actor model originated in 1973. It has been used both as a framework for a theoretical understanding of computation and as the theoretical basis for several practical implementations of concurrent systems. The relationship of the model to other work is discussed in Actor model and process calculi."
},
{"id": 26, 
"name": "Ada (programming language)",
"summary": "Ada is a structured, statically typed, imperative, and object-oriented high-level computer programming language, extended from Pascal and other languages. It has built-in language support for design-by-contract, extremely strong typing, explicit concurrency, tasks, synchronous message passing, protected objects, and non-determinism. Ada improves code safety and maintainability by using the compiler to find errors in favor of runtime errors. Ada is an international standard; the current version (known as Ada 2012) is defined by ISO/IEC 8652:2012.Ada was originally designed by a team led by French computer scientist Jean Ichbiah of CII Honeywell Bull under contract to the United States Department of Defense (DoD) from 1977 to 1983 to supersede over 450 programming languages used by the DoD at that time.  Ada was named after Ada Lovelace (1815–1852), who has been credited as the first computer programmer."
},
{"id": 27, 
"name": "Adenine (programming language)",
"summary": "Haystack was a project at the Massachusetts Institute of Technology to research and develop several applications around personal information management and the Semantic Web. The most notable of those applications is the Haystack client, a research personal information manager (PIM) and one of the first to be based on semantic desktop technologies. The Haystack client is published as open source software under the BSD license. \nSimilar to the Chandler PIM, the Haystack system unifies handling different types of unstructured information. This information has a common representation in RDF that is presented to users in a configurable human-readable way."
},
{"id": 28, 
"name": "Agda (theorem prover)",
"summary": "Agda is a dependently typed functional programming language originally developed by Ulf Norell at Chalmers University of Technology with implementation described in his PhD thesis. The original Agda system was developed at Chalmers by Catarina Coquand in 1999. The current version, originally known as Agda 2, is a full rewrite, which should be considered a new language that shares a name and tradition.\nAgda is also a proof assistant based on the propositions-as-types paradigm, but unlike Coq, has no separate tactics language, and proofs are written in a functional programming style. The language has ordinary programming constructs such as data types, pattern matching, records, let expressions and modules, and a Haskell-like syntax. The system has Emacs and Atom interfaces but can also be run in batch mode from the command line.\nAgda is based on Zhaohui Luo's unified theory of dependent types (UTT), a type theory similar to Martin-Löf type theory.\nAgda is named after the Swedish song \"Hönan Agda\", written by Cornelis Vreeswijk, that is about a hen name Agda. This alludes to the naming of Coq."
},
{"id": 29, 
"name": "Agilent VEE",
"summary": "Keysight VEE is a graphical dataflow programming software development environment from Keysight Technologies for automated test, measurement, data analysis and reporting. VEE originally stood for Visual Engineering Environment and developed by HP designated as HP VEE; it has since been officially renamed to Keysight VEE. Keysight VEE has been widely used in various industries, serving the entire stage of a product lifecycle, from design, validation to manufacturing. It is optimized in instrument control and automation with test and measurement devices such as data acquisition instruments like digital voltmeters and oscilloscopes, and source devices like signal generators and programmable power supplies."
},
{"id": 30, 
"name": "Agora (programming language)",
"summary": "Agora is a reflective, prototype-based, object-oriented programming language that is based exclusively on message passing and not delegation. Agora was intended to show that even subject to that limit, it is possible to build a full object-oriented language that features inheritance, cloning and reflective operators."
},
{"id": 31, 
"name": "Aldor",
"summary": "Aldor is a programming language. It is the successor of A# as the extension language of the Axiom computer algebra system.\nAldor combines imperative, functional, and object-oriented features. It has an elaborate type system,\"Aldor Programming Language\". Aldor.org. Retrieved 12 February 2017. allowing types to be used as first-class values. Aldor's syntax is heavily influenced by Pascal, but it is optionally indentation-sensitive, using whitespace characters and the off-side rule, like Python. In its current implementation, it is compiled, but an interactive listener is provided.\nAldor is distributed as free and open-source software, under the Apache License 2.0."
},
{"id": 32, 
"name": "Alef (programming language)",
"summary": "Alef is a discontinued concurrent programming language, designed as part of the Plan 9 operating system by Phil Winterbottom of Bell Labs. It implemented the channel-based concurrency model of Newsqueak in a compiled, C-like language."
},
{"id": 33, 
"name": "Algebraic Logic Functional programming language",
"summary": "Algebraic Logic Functional programming language, also known as ALF, is a programming language which combines functional and logic programming techniques. Its foundation is Horn clause logic with equality which consists of predicates and Horn clauses for logic programming, and functions and equations for functional programming.\nALF was designed to be genuine integration of both programming paradigms, and thus any functional expression can be used in a goal literal and arbitrary predicates can occur in conditions of equations. ALF's operational semantics is based on the resolution rule to solve literals and narrowing to evaluate functional expressions. In order to reduce the number of possible narrowing steps, a leftmost-innermost basic narrowing strategy is used which, it is claimed, can be efficiently implemented. Terms are simplified by rewriting before a narrowing step is applied and equations are rejected if the two sides have different constructors at the top. Rewriting and rejection are supposed to result in a large reduction of the search tree and produce an operational semantics that is more efficient than Prolog's resolution strategy. Similarly to Prolog, ALF uses a backtracking strategy corresponding to a depth-first search in the derivation tree.\nThe ALF system was designed to be an efficient implementation of the combination of resolution, narrowing, rewriting, and rejection. ALF programs are compiled into instructions of an abstract machine. The abstract machine is based on the Warren Abstract Machine (WAM) with several extensions to implement narrowing and rewriting. In the current ALF implementation programs of this abstract machine are executed by an emulator written in C.\nIn the Carnegie Mellon University Artificial Intelligence Repository, ALF is included as an AI programming language, in particular as a functional/logic programming language Prolog implementation. A user manual describing the language and the use of the system is available. The ALF System runs under Unix and is free."
},
{"id": 34, 
"name": "Alice (programming language)",
"summary": "Alice ML is a programming language designed by the Programming Systems Laboratory at Saarland University, Saarbrücken, Germany. It is a dialect of Standard ML, augmented with support for lazy evaluation, concurrency (multithreading and distributed computing via remote procedure calls) and constraint programming."
},
{"id": 35, 
"name": "Alma-0",
"summary": "Alma-0 is a multi-paradigm computer programming language. This language is an augmented version of the imperative Modula-2 language with logic-programming features and convenient backtracking capability. It is small, strongly typed, and combines constraint programming, a limited number of features inspired by logic programming and supports imperative paradigms. The language advocates declarative programming. The designers claim that search-oriented solutions built with it are substantially simpler than their counterparts written in purely imperative or logic programming style. [1] Alma-0 provides natural, high-level constructs for the construction of search trees."
},
{"id": 36, 
"name": "AmbientTalk",
"summary": "AmbientTalk is an experimental object-oriented distributed programming language developed at the Programming Technology Laboratory at the Vrije Universiteit Brussel, Belgium. The language is primarily targeted at writing programs deployed in mobile ad hoc networks.\nAmbientTalk is meant to serve as an experimentation platform to experiment with new language features or programming abstractions to facilitate the construction of software that has to run in highly volatile networks exhibiting intermittent connectivity and little infrastructure. It is implemented in Java which enables interpretation on various platforms, including Android. The interpreter standard library also provides a seamless interface between Java and AmbientTalk objects, called the symbiosis.\nThe language's concurrency features, which include support for futures and event-loop concurrency, are founded on the actor model and have been largely influenced by the E programming language. The language's object-oriented features find their influence in languages like Smalltalk (i.e. block closures, keyworded messages) and Self (prototype-based programming, traits, delegation)."
},
{"id": 37, 
"name": "Amiga E",
"summary": "Amiga E, or very often simply E, is a programming language created by Wouter van Oortmerssen on the Amiga. He has since moved on to develop the SHEEP programming language for the new AmigaDE platform and the CryScript language (also known as DOG) used during the development of the video game Far Cry."
},
{"id": 38, 
"name": "AngelScript",
"summary": "AngelScript is a game-oriented interpreted compiled scripting language.\nAngelScript features static typing, object handles (similar to C++ pointers but garbage collected via reference counting), object-orientation, single inheritance, multiple inheritance with interfaces. Allows operators to be registered and overloaded. AngelScript can be used with any C++ IDE, such as Netbeans, Geany, Eclipse, and also supported by AngelJuice IDE developed specifically for the language.\nC and C++ functions can be called within an AngelScript environment. AngelScript's class syntax closely follows C++ classes by design: no proxy functions are required to embed AngelScript in C++ applications easing the two languages integration. There are several differences of AngelScript and C++:\n\nAngelScript does not support multiple inheritance. Multiple-inheritance functionality may be achieved with Interfaces.\nIt is impossible to declare methods or properties outside of the class body.\nAll methods (including constructors and destructors) are virtual.AngelScript is used in video game development, including Amnesia: The Dark Descent, Amy, Dustforce, Gekkeiju Online, King Arthur's Gold, Legend of the Guardians: The Owls of Ga'Hoole, Overgrowth, Penumbra: Overture, Penumbra: Requiem, Puddle, Rigs of Rods, Sine Mora, Star Ruler, SuperTuxKart, Warhammer: Mark of Chaos, Warsow, Sven Co-op, Jazz Jackrabbit 2 Plus, Urho3D. AngelScript is used at the University of Ulm in interactive 3D-Animation program. AngelScript is also used in robotics, for example, to program behavioral rules of robotic agents."
},
{"id": 39, 
"name": "Apache Groovy",
"summary": "Apache Groovy is a Java-syntax-compatible object-oriented programming language for the Java platform. It is both a static and dynamic language with features similar to those of Python, Ruby, and Smalltalk. It can be used as both a programming language and a scripting language for the Java Platform, is compiled to Java virtual machine (JVM) bytecode, and interoperates seamlessly with other Java code and libraries. Groovy uses a curly-bracket syntax similar to Java's. Groovy supports closures, multiline strings, and expressions embedded in strings. Much of Groovy's power lies in its AST transformations, triggered through annotations.\nGroovy 1.0 was released on January 2, 2007, and Groovy 2.0 in July, 2012. Since version 2, Groovy can be compiled statically, offering type inference and performance near that of Java. Groovy 2.4 was the last major release under Pivotal Software's sponsorship which ended in March 2015. Groovy 2.5.8 is the latest stable version of Groovy.\nGroovy has since changed its governance structure to a Project Management Committee in the Apache Software Foundation."
},
{"id": 40, 
"name": "Apex (programming language)",
"summary": "Salesforce.com, Inc. (usually abbreviated as SF or SFDC for Salesforce dot com) is an American cloud-based software company headquartered in San Francisco, California. Though the bulk of its revenue comes from its customer-relationship management (CRM) service, Salesforce also sells a complementary suite of enterprise applications focused on customer service, marketing automation, analytics and application development.\nSalesforce was ranked first in Fortune's 100 Best Companies to Work For in 2018 and second in 2019."
},
{"id": 41, 
"name": "App Inventor for Android (programming language)",
"summary": "MIT App Inventor is a web application integrated development environment originally provided by Google, and now maintained by the Massachusetts Institute of Technology (MIT). It allows newcomers to computer programming to create application software(apps) for two operating systems (OS): Android (operating system)|Android, and iOS, which, as of 8 July 2019, is in final beta testing. It is free and open-source software released under Multi-licensing|dual licensing: a Creative Commons license#Attribution|Creative Commons Attribution ShareAlike 3.0 Unported license, and an Apache License 2.0 for the source code.\nIt uses a graphical user interface (GUI) very similar to the programming languages Scratch (programming language) and the StarLogo, which allows users to drag and drop visual objects to create an application that can run on mobile devices. In creating App Inventor, Google drew upon significant prior research in educational computing, and work done within Google on online development environments.App Inventor and the projects on which it is based are informed by constructionist learning theories, which emphasize that programming can be a vehicle for engaging powerful ideas through active learning. As such, it is part of an ongoing movement in computers and education that began with the work of Seymour Papert and the MIT Logo Group in the 1960s, and has also manifested itself with Mitchel Resnick's work on Lego Mindstorms and StarLogo.App Inventor also supports the use of cloud data via an experimental Firebase#Firebase Realtime component."
},
{"id": 42, 
"name": "AppleScript",
"summary": "AppleScript is a scripting language created by Apple Inc. that facilitates automated control over scriptable Mac applications. First introduced in System 7, it is currently included in all versions of macOS as part of a package of system automation tools. The term \"AppleScript\" may refer to the language itself, to an individual script written in the language, or, informally, to the macOS Open Scripting Architecture that underlies the language."
},
{"id": 43, 
"name": "Arc (programming language)",
"summary": "Arc is a programming language, a dialect of the language Lisp, developed by Paul Graham and Robert Morris. It is free and open-source software released under the Artistic License 2.0."
},
{"id": 44, 
"name": "Argus (programming language)",
"summary": "Argus is a programming language created at MIT by Barbara Liskov between 1982 and 1988, in collaboration with Maurice Herlihy, Paul Johnson, Robert Scheifler, and William Weihl.  It is an extension of the CLU language, and utilizes most of the same syntax and semantics.  Argus was designed to support the creation of distributed programs, by encapsulating related procedures within objects called guardians, and by supporting atomic operations called actions.\n\n"
},
{"id": 45, 
"name": "Assembly language",
"summary": "In computer programming,  assembly language (or assembler language), often abbreviated asm, is any low-level programming language in which there is a very strong correspondence between the instructions in the language and the architecture's machine code instructions. Because assembly depends on the machine code instructions, every assembler has its own assembly language which is designed for exactly one specific computer architecture. Assembly language may also be called symbolic machine code.Assembly code is converted into executable machine code by a utility program referred to as an assembler. The conversion process is referred to as assembly, as in assembling the source code. Assembly language usually has one statement per machine instruction (1:1), but comments and statements that are assembler directives, macros, and symbolic labels of program and memory locations are often also supported.\nEach assembly language is specific to a particular computer architecture and sometimes to an operating system. However, some assembly languages do not provide specific syntax for operating system calls, and most assembly languages can be used universally with any operating system, as the language provides access to all the real capabilities of the processor, upon which all system call mechanisms ultimately rest. In contrast to assembly languages, most high-level programming languages are generally portable across multiple architectures but require interpreting or compiling, a much more complicated task than assembling."
},
{"id": 46, 
"name": "AutoHotkey",
"summary": "AutoHotkey is a free, open-source custom scripting language for Microsoft Windows, initially aimed at providing easy keyboard shortcuts or hotkeys, fast macro-creation and software automation that allows users of most levels of computer skill to automate repetitive tasks in any Windows application. User interfaces can easily be extended or modified by AutoHotkey (for example, overriding the default Windows control key commands with their Emacs equivalents). The AutoHotkey installation includes its own extensive help file, and web-based documentation is also available."
},
{"id": 47, 
"name": "AutoLISP",
"summary": "AutoLISP is a dialect of the programming language Lisp built specifically for use with the full version of AutoCAD and its derivatives, which include AutoCAD Map 3D, AutoCAD Architecture and AutoCAD Mechanical. Neither the application programming interface (API) nor the interpreter to execute AutoLISP code are included in the AutoCAD LT product line."
},
{"id": 48, 
"name": "Autodesk 3ds Max",
"summary": "Autodesk 3ds Max, formerly 3D Studio and 3D Studio Max, is a professional 3D computer graphics program for making 3D animations, models, games and images. It is developed and produced by Autodesk Media and Entertainment. It has modeling capabilities and a flexible plugin architecture and must be used on the Microsoft Windows platform. It is frequently used by video game developers, many TV commercial studios, and architectural visualization studios. It is also used for movie effects and movie pre-visualization. For its modeling and animation tools, the latest version of 3ds Max also features shaders (such as ambient occlusion and subsurface scattering), dynamic simulation, particle systems, radiosity, normal map creation and rendering, global illumination, a customizable user interface, new icons, and its own scripting language."
},
{"id": 49, 
"name": "Averest",
"summary": "Averest is a synchronous programming language and set of tools to specify, verify, and implement reactive systems. It includes a compiler for synchronous programs, a symbolic model checker, and a tool for hardware/software synthesis.\nIt can be used to model and verify finite and infinite state systems, at varied abstraction levels. It is useful for hardware design, modeling communication protocols, concurrent programs, software in embedded systems, and more.\nComponents: compiler to translate synchronous programs to transition systems, symbolic model checker, tool for hardware/software synthesis. These cover large parts of the design flow of reactive systems, from specifying to implementing. Though the tools are part of a common framework, they are mostly independent of each other, and can be used with 3rd-party tools."
},
{"id": 50, 
"name": "Axum (programming language)",
"summary": "Axum (previously codenamed Maestro) is a domain-specific concurrent programming language, based on the Actor model, that was under active development by Microsoft between 2009 and 2011. It is an object-oriented language based on the .NET Common Language Runtime using a C-like syntax which, being a domain-specific language, is intended for development of portions of a software application that is well-suited to concurrency. But it contains enough general-purpose constructs that one need not switch to a general-purpose programming language (like C#) for the sequential parts of the concurrent components.The main idiom of programming in Axum is an Agent (or an Actor), which is an isolated entity that executes in parallel with other Agents. In Axum parlance, this is referred to as the agents executing in separate isolation domains; objects instantiated within a domain cannot be directly accessed from another. Agents are loosely coupled (i.e., the number of dependencies between agents is minimal) and do not share resources like memory (unlike the shared memory model of C# and similar languages); instead a message passing model is used. To co-ordinate agents or having an agent request the resources of another, an explicit message must be sent to the agent. Axum provides Channels to facilitate this.\nChannels can be regarded as a directional pathway to communicate between agent instances. The member functions of a Channel object, after it has been bound to an agent instance, can be used to communicate with it. A Channel contains input and output ports, which are queues which are used to send data to an agent or receive data from one. To co-ordinate the communication between agents, Axum allows each channel to have a user-defined protocol for communication. The protocol is defined as a state machine. The data sent over a channel can be optionally restricted to conform to a certain pre-defined schema. The compiler and runtime will enforce the conformance with the schema. Under the hood, a schema is translated into a serializable .NET class that contains only properties and side effect-free methods.The Axum project reached the state of a prototype with working Microsoft Visual Studio integration. Microsoft had made a CTP of Axum available to the public, but this has since been removed.\nAlthough Microsoft decided not to turn Axum into a project, some of the ideas behind Axum are used in TPL Dataflow in .Net 4.5."
},
{"id": 51, 
"name": "B (programming language)",
"summary": "B is a programming language developed at Bell Labs circa 1969.  It is the work of Ken Thompson with Dennis Ritchie.\nB was derived from BCPL, and its name may be a contraction of BCPL.  Thompson's coworker Dennis Ritchie speculated that the name might be based on Bon, an earlier, but unrelated, programming language that Thompson designed for use on Multics.B was designed for recursive, non-numeric, machine-independent applications, such as system and language software. It was a typeless language, with the only data type being the underlying machine's natural memory word format, whatever that might be. Depending on the context, the word was treated either as an integer or a memory address.\nAs machines with ASCII processing became common, notably the DEC PDP-11 that arrived at Bell, support for character data stuffed in memory words became important. The typeless nature of the language was seen as a disadvantage, which led Thompson and Ritchie to develop an expanded version of the language supporting new internal and user-defined types, which became the C programming language."
},
{"id": 52, 
"name": "BASIC",
"summary": "BASIC (Beginners' All-purpose Symbolic Instruction Code) is a family of general-purpose, high-level programming languages whose design philosophy emphasizes ease of use. In 1964, John G. Kemeny and Thomas E. Kurtz designed the original BASIC language at Dartmouth College. They wanted to enable students in fields other than science and mathematics to use computers. At the time, nearly all use of computers required writing custom software, which was something only scientists and mathematicians tended to learn.\nIn addition to the language itself, Kemeny and Kurtz developed the Dartmouth Time Sharing System (DTSS), which allowed multiple users to edit and run BASIC programs at the same time. This general model became very popular on minicomputer systems like the PDP-11 and Data General Nova in the late 1960s and early 1970s. Hewlett-Packard produced an entire computer line for this method of operation, introducing the HP2000 series in the late 1960s and continuing sales into the 1980s. Many early video games trace their history to one of these versions of BASIC.\nThe emergence of early microcomputers in the mid-1970s led to the development of the original Microsoft BASIC in 1975. Due to the tiny main memory available on these machines, often 4 kB, a variety of Tiny BASIC dialects was also created. BASIC was available for almost any system of the era, and naturally became the de facto programming language for the home computer systems that emerged in the late 1970s. These machines almost always had a BASIC installed by default, often in the machine's firmware or sometimes on a ROM cartridge.\nBASIC fell from use during the later 1980s as newer machines with far greater capabilities came to market and other programming languages (such as Pascal and C) became tenable. In 1991, Microsoft released Visual Basic, combining a greatly updated version of BASIC with a visual forms builder. This reignited use of the language and \"VB\" remains a major programming language in the form of VB.NET."
},
{"id": 53, 
"name": "BCPL",
"summary": "BCPL (\"Basic Combined Programming Language\") is a procedural, imperative, and structured computer programming language.  Originally intended for writing compilers for other languages, BCPL is no longer in common use. However, its influence is still felt because a stripped down and syntactically changed version of BCPL, called B, was the language on which the C programming language was based.  BCPL introduced several features of many modern programming languages, including using curly braces to delimit code blocks. BCPL was first implemented by Martin Richards of the University of Cambridge in 1967."
},
{"id": 54, 
"name": "BETA (programming language)",
"summary": "BETA is a pure object-oriented language originating within the \"Scandinavian School\" in object-orientation where the first object-oriented language Simula was developed. Among its notable features, it introduced nested classes, and unified classes with procedures into so called patterns."
},
{"id": 55, 
"name": "BLISS (programming language)",
"summary": "BLISS is a system programming language developed at Carnegie Mellon University by W. A. Wulf, D. B. Russell, and A. N. Habermann around 1970. It was perhaps the best known systems programming language right up until C made its debut a few years later. Since then, C took off and BLISS faded into obscurity. When C was in its infancy, a few projects within Bell Labs were debating the merits of BLISS vs. C.\nBLISS is a typeless block-structured language based on expressions rather than statements, and includes constructs for exception handling, coroutines, and macros. It does not include a goto statement.\nThe name is variously said to be short for \"Basic Language for Implementation of System Software\" or \"System Software Implementation Language, Backwards\". It was sometimes called \"Bill's Language for Implementing System Software\", after Bill Wulf.\nThe original Carnegie Mellon compiler was notable for its extensive use of optimizations, and formed the basis of the classic book The Design of an Optimizing Compiler.\nDEC developed and maintained BLISS compilers for the PDP-10, PDP-11, VAX, DEC Prism, MIPS, DEC Alpha, and Intel IA-32, The language did not become popular among customers and few had the compiler, but DEC used it heavily in-house into the 1980s; most of the utility programs for the VMS operating system were written in BLISS-32. After its acquisition of DEC, Compaq developed and maintained a BLISS compiler for Intel IA-64."
},
{"id": 56, 
"name": "Babbage (programming language)",
"summary": "No summary available"
},
{"id": 57, 
"name": "Ballerina (programming language)",
"summary": "No summary available"
},
{"id": 58, 
"name": "Bash (Unix shell)",
"summary": "GNU Bash or simply Bash is a Unix shell and command language written by Brian Fox for the GNU Project as a free software replacement for the Bourne shell. First released in 1989, it has been used widely as the default login shell for most Linux distributions and Apple's macOS Mojave and earlier versions. A version is also available for Windows 10. It is also the default user shell in Solaris 11.Bash is a command processor that typically runs in a text window where the user types commands that cause actions. Bash can also read and execute commands from a file, called a shell script. Like all Unix shells, it supports filename globbing (wildcard matching), piping, here documents, command substitution, variables, and control structures for condition-testing and iteration. The keywords, syntax, dynamically scoped variables and other basic features of the language are all copied from sh. Other features, e.g., history, are copied from csh and ksh. Bash is a POSIX-compliant shell, but with a number of extensions.\nThe shell's name is an acronym for Bourne-again shell, a pun on the name of the Bourne shell that it replaces and on the common term \"born again\".A security hole in Bash dating from version 1.03 (August 1989), dubbed Shellshock, was discovered in early September 2014 and quickly led to a range of attacks across the Internet. Patches to fix the bugs were made available soon after the bugs were identified."
},
{"id": 59, 
"name": "Batch file",
"summary": "A batch file is a script file in DOS, OS/2 and Microsoft Windows. It consists of a series of commands to be executed by the command-line interpreter, stored in a plain text file. A batch file may contain any command the interpreter accepts interactively and use constructs that enable conditional branching and looping within the batch file, such as IF, FOR, and GOTO labels. The term \"batch\" is from batch processing, meaning \"non-interactive execution\", though a batch file may not process a batch of multiple data.\nSimilar to Job Control Language (JCL), DCL and other systems on mainframe and minicomputer systems, batch files were added to ease the work required for certain regular tasks by allowing the user to set up a script to automate them. When a batch file is run, the shell program (usually COMMAND.COM or cmd.exe) reads the file and executes its commands, normally line-by-line. Unix-like operating systems, such as Linux, have a similar, but more flexible, type of file called a shell script.The filename extension .bat is used in DOS and Windows. Windows NT and OS/2 also added .cmd. Batch files for other environments may have different extensions, e.g., .btm in 4DOS, 4OS2 and 4NT related shells.\nThe detailed handling of batch files has changed significantly between versions. Some of the detail in this article applies to all batch files, while other details apply only to certain versions."
},
{"id": 60, 
"name": "Bc (programming language)",
"summary": "bc, for basic calculator (often referred to as bench calculator), is \"an arbitrary-precision calculator language\" with syntax similar to the C programming language. bc is typically used as either a mathematical scripting language or as an interactive mathematical shell.\n\n"
},
{"id": 61, 
"name": "BeanShell",
"summary": "BeanShell is a Java-like scripting language, invented by Patrick Niemeyer. It runs in the Java Runtime Environment (JRE) and uses a variation of the Java syntax, in addition to scripting commands and syntax."
},
{"id": 62, 
"name": "Bertrand (programming language)",
"summary": "Bertrand (named after Bertrand Russell) is a computer programming language for creating constraint programming systems. The language was created by Wm Leler in the mid-1980s as part of his doctoral research. Bertrand has a declarative programming syntax and differentiates itself from other programming languages by use of a technique called augmented term rewriting."
},
{"id": 63, 
"name": "Blockly",
"summary": "Blockly is a client-side library for the programming language JavaScript for creating block-based visual programming languages (VPLs) and editors. It is a project of Google and is free and open-source software released under the Apache License 2.0. It typically runs in a web browser, and visually resembles the language Scratch. Blockly is also being implemented for the mobile operating systems Android and iOS, though not all web browser based features are available for these.\nBlockly uses visual blocks that link together to make writing code easier, and can generate code in JavaScript, Lua, Dart, Python, or PHP. It can also be customised to generate code in any textual programming language."
},
{"id": 64, 
"name": "BlooP and FlooP",
"summary": "BlooP and FlooP are simple programming languages designed by Douglas Hofstadter to illustrate a point in his book Gödel, Escher, Bach. BlooP is a non-Turing-complete programming language whose main control flow structure is a bounded loop (i.e. recursion is not permitted). All programs in the language must terminate, and this language can only express primitive recursive functions.FlooP is identical to BlooP except that it supports unbounded loops; it is a Turing-complete language and can express all computable functions. For example, it can express the Ackermann function, which (not being primitive recursive) cannot be written in BlooP. Borrowing from standard terminology in mathematical logic, Hofstadter calls FlooP's unbounded loops MU-loops. Like all Turing-complete programming languages, FlooP suffers from the halting problem: programs might not terminate, and it is not possible, in general, to decide which programs do.\nBlooP and FlooP can be regarded as models of computation, and have sometimes been used in teaching computability."
},
{"id": 65, 
"name": "Boo (programming language)",
"summary": "Boo is an object-oriented, statically typed, general-purpose programming language that seeks to make use of the Common Language Infrastructure's support for Unicode, internationalization, and web applications, while using a Python-inspired syntax and a special focus on language and compiler extensibility. Some features of note include type inference, generators, multimethods, optional duck typing, macros, true closures, currying, and first-class functions.\nBoo was one of the three scripting languages for the Unity game engine (Unity Technologies employed De Oliveira), until it was dropped in 2014 due to the small userbase. Despite official support for Boo ending, the language could still be used in Unity, until the Boo compiler was removed from the engine in 2017. Boo is free software released under the BSD 3-Clause license. It is compatible with the Microsoft .NET and Mono frameworks."
},
{"id": 66, 
"name": "Boomerang (programming language)",
"summary": "Boomerang is a programming language for writing lenses—well-behaved bidirectional transformations —that operate on ad-hoc, textual data formats.\nBoomerang grew out of the Harmony generic data synchronizer, which grew out of the Unison file synchronization project."
},
{"id": 67, 
"name": "Bourne shell",
"summary": "The Bourne shell (sh) is a shell, or command-line interpreter, for computer operating systems.\nThe Bourne shell was the default shell for Version 7 Unix. Many Unix-like systems continue to have /bin/sh—which will be the Bourne shell, or a symbolic link or hard link to a compatible shell—even when other shells are used by most users.\nDeveloped by Stephen Bourne at Bell Labs, it was a replacement for the Thompson shell, whose executable file had the same name—sh. It was released in 1979 in the Version 7 Unix release distributed to colleges and universities. Although it is used as an interactive command interpreter, it was also intended as a scripting language and contains most of the features that are commonly considered to produce structured programs.\nIt gained popularity with the publication of The Unix Programming Environment by Brian Kernighan and Rob Pike—the first commercially published book that presented the shell as a programming language in a tutorial form."
},
{"id": 68, 
"name": "C (programming language)",
"summary": "C (, as in the letter c) is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, while a static type system prevents unintended operations. By design, C provides constructs that map efficiently to typical machine instructions and has found lasting use in applications previously coded in assembly language. Such applications include operating systems and various application software for computers, from supercomputers to embedded systems.\nC was originally developed at Bell Labs by Dennis Ritchie between 1972 and 1973 to make utilities running on Unix. Later, it was applied to re-implementing the kernel of the Unix operating system. During the 1980s, C gradually gained popularity.  It has become one of the most widely used programming languages, with C compilers from various vendors available for the majority of existing computer architectures and operating systems. C has been standardized by the ANSI since 1989 (see ANSI C) and by the International Organization for Standardization.\nC is an imperative procedural language. It was designed to be compiled using a relatively straightforward compiler to provide low-level access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant C program written with portability in mind can be compiled for a wide variety of computer platforms and operating systems with few changes to its source code. The language is available on various platforms, from embedded microcontrollers to supercomputers."
},
{"id": 69, 
"name": "C Sharp (programming language)",
"summary": "C# (pronounced see sharp, like the musical note C♯, but written with the number sign) is a general-purpose, multi-paradigm programming language encompassing strong typing, lexically scoped, imperative, declarative, functional, generic, object-oriented (class-based), and component-oriented programming disciplines. It was developed around 2000 by Microsoft as part of its .NET initiative, and later approved as an international standard by Ecma (ECMA-334) and ISO (ISO/IEC 23270:2018). Mono is the name of the free and open-source project to develop a compiler and runtime for the language. C# is one of the programming languages designed for the Common Language Infrastructure (CLI).\nC# was designed by Anders Hejlsberg, and its development team is currently led by Mads Torgersen. The most recent version is 8.0, which was released in 2019 alongside Visual Studio 2019 version 16.3."
},
{"id": 70, 
"name": "C Shell",
"summary": "The C shell (csh or the improved version, tcsh) is a Unix shell created by Bill Joy while he was a graduate student at University of California, Berkeley in the late 1970s.  It has been widely distributed, beginning with the 2BSD release of the Berkeley Software Distribution (BSD) that Joy began distributing in 1978.  Other early contributors to the ideas or the code were Michael Ubell, Eric Allman, Mike O'Brien and Jim Kulp.The C shell is a command processor typically run in a text window, allowing the user to type commands.  The C shell can also read commands from a file, called a script.  Like all Unix shells, it supports filename wildcarding, piping, here documents, command substitution, variables and control structures for condition-testing and iteration.  What differentiated the C shell from others, especially in the 1980s, were its interactive features and overall style.  Its new features made it easier and faster to use.  The overall style of the language looked more like C and was seen as more readable.\nOn many systems, such as macOS and Red Hat Linux, csh is actually tcsh, an improved version of csh.  Often one of the two files is either a hard link or a symbolic link to the other, so that either name refers to the same improved version of the C shell.\nOn Debian and some derivatives (including Ubuntu), there are two different packages: csh and tcsh. The former is based on the original BSD version of csh and the latter is the improved tcsh.tcsh added filename and command completion and command line editing concepts borrowed from the Tenex system, which is the source of the \"t\".  Because it only added functionality and did not change what was there, tcsh remained backward compatible with the original C shell.  Though it started as a side branch from the original source tree Joy had created, tcsh is now the main branch for ongoing development.  tcsh is very stable but new releases continue to appear roughly once a year, consisting mostly of minor bug fixes."
},
{"id": 71, 
"name": "C*",
"summary": "Caculo Cabaça is a town and commune of Angola, located in the province of Cuanza Norte."
},
{"id": 72, 
"name": "C++",
"summary": "C++ () is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.C++ was designed with a bias toward system programming and embedded, resource-constrained software and large systems, with performance, efficiency¸ and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, Web search, or SQL servers), and performance-critical applications (e.g. telephone switches or space probes).C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2017 as ISO/IEC 14882:2017 (informally known as C++17). The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11 and C++14 standards. The current C++17 standard supersedes these with new features and an enlarged standard library.  Before the initial standardization in 1998, C++ was developed by Danish computer scientist Bjarne Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization. C++20 is the next planned standard, keeping with the current trend of a new version every three years."
},
{"id": 73, 
"name": "C--",
"summary": "C++ () is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.C++ was designed with a bias toward system programming and embedded, resource-constrained software and large systems, with performance, efficiency¸ and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, Web search, or SQL servers), and performance-critical applications (e.g. telephone switches or space probes).C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2017 as ISO/IEC 14882:2017 (informally known as C++17). The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11 and C++14 standards. The current C++17 standard supersedes these with new features and an enlarged standard library.  Before the initial standardization in 1998, C++ was developed by Danish computer scientist Bjarne Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization. C++20 is the next planned standard, keeping with the current trend of a new version every three years."
},
{"id": 74, 
"name": "C/AL",
"summary": "C/AL (Client/server Application Language) is the programming language used within C/SIDE the Client/Server Integrated Development Environment in Microsoft Dynamics NAV (Formerly known as Navision Attain). C/AL is a Database specific programming language, and is primarily used for retrieving, inserting and modifying records in a Navision database. C/AL resembles the Pascal language on which it is based. The original C/AL compiler was written by Michael Nielsen.\n\n"
},
{"id": 75, 
"name": "CDuce",
"summary": "CDuce is an XML-oriented functional language, which extends XDuce in a few directions.\nIt features XML regular expression types, XML regular expression patterns,\nXML iterators. CDuce is not strictly speaking an XML transformation language since\nit can be used for general-purpose programming.\nCDuce conforms to basic standards: Unicode, XML, DTD, Namespaces are fully supported, XML Schema is partially supported."
},
{"id": 76, 
"name": "CFEngine",
"summary": "CFEngine is an open-source configuration management system, written by Mark Burgess. Its primary function is to provide automated configuration and maintenance of large-scale computer systems, including the unified management of servers, desktops, consumer and industrial devices, embedded networked devices, mobile smartphones, and tablet computers."
},
{"id": 77, 
"name": "CHILL",
"summary": "No summary available"
},
{"id": 78, 
"name": "CHIP-8",
"summary": "CHIP-8 is an interpreted programming language, developed by Joseph Weisbecker. It was initially used on the COSMAC VIP and Telmac 1800 8-bit microcomputers in the mid-1970s. CHIP-8 programs are run on a CHIP-8 virtual machine. It was made to allow video games to be more easily programmed for these computers.\nRoughly twenty years after CHIP-8 was introduced, derived interpreters appeared for some models of graphing calculators (from the late 1980s onward, these handheld devices in many ways have more computing power than most mid-1970s microcomputers for hobbyists).\nAn active community of users and developers existed in the late 1970s, beginning with ARESCO's \"VIPer\" newsletter whose first three issues revealed the machine code behind the CHIP-8 interpreter."
},
{"id": 79, 
"name": "CLIPS (programming language)",
"summary": "CLIPS is a public domain software tool for building expert systems.  The name is an acronym for \"C Language Integrated Production System.\" The syntax and name was inspired by Charles Forgy's OPS5. The first versions of CLIPS were developed starting in 1985 at NASA-Johnson Space Center (as an alternative for existing system ART*Inference) until the mid-1990s when the development group's responsibilities ceased to focus on expert system technology. The original name of the project was NASA's AI Language (NAIL).\nCLIPS is probably the most widely used expert system tool. CLIPS itself is written in C, extensions can be written in C, and CLIPS can be called from C. Its syntax resembles that of the programming language Lisp.CLIPS incorporates a complete object-oriented language for writing expert systems. COOL combines the programming paradigms of procedural, object oriented and logical (theorem proving) languages."
},
{"id": 80, 
"name": "CLIST",
"summary": "CLIST (Command List) (pronounced \"C-List\") is a procedural programming language for TSO in MVS systems. It originated in OS/360 Release 20 and has assumed a secondary role since the availability of Rexx in TSO/E Version 2. The term CLIST is also used for command lists written by users of NetView.In its basic form, a CLIST program (or \"CLIST\" for short) can take the form of a simple list of commands to be executed in strict sequence (like a DOS batch file (*.bat) file).  However, CLIST also features If-Then-Else logic as well as loop constructs.\nCLIST is an interpreted language.  That is, the computer must translate a CLIST every time the program is executed.  CLISTs therefore tend to be slower than programs written in compiled languages such as COBOL, FORTRAN, or PL/1.  (A program written in a compiled language is translated once to create a \"load module\" or executable.)\nCLIST can read/write MVS files and read/write from/to a TSO terminal. It can read parameters from the caller and also features a function to hold global variables and pass them between CLISTs. A CLIST can also call an MVS application program (written in COBOL or  PL/I, for example). CLISTs can be run in background (by running JCL which executes the TSO control program (IKJEFT01)). TSO I/O screens and menus using ISPF dialog services can be displayed by CLISTs.\nCompare the function of CLIST with that provided by REXX."
},
{"id": 81, 
"name": "CLU (programming language)",
"summary": "CLU is a  programming language created at the Massachusetts Institute of Technology (MIT) by Barbara Liskov and her students between 1974 and 1975. While it did not find extensive use, it introduced many features that are used widely now, and is seen as a step in the development of object-oriented programming (OOP).\nKey contributions include abstract data types, call-by-sharing, iterators, multiple return values (a form of parallel assignment), type-safe parameterized types, and type-safe variant types. It is also notable for its use of classes with constructors and methods, but without inheritance."
},
{"id": 82, 
"name": "CMS EXEC",
"summary": "CMS EXEC, or EXEC, is an interpreted, command procedure control, computer scripting language used by the CMS EXEC Processor supplied with the IBM Virtual Machine/Conversational Monitor System (VM/CMS) operating system.\nEXEC was written in 1966 by Stuart Madnick at MIT on the model of CTSS RUNCOM.  He originally called this processor COMMAND, and it was later renamed EXEC.CMS EXEC has been superseded by EXEC 2 and REXX. All three — CMS EXEC, EXEC 2 and REXX — continue to be supported by the IBM CMS product."
},
{"id": 83, 
"name": "CMS-2 (programming language)",
"summary": "CMS-2 is an embedded systems programming language used by the United States Navy. It was an early attempt to develop a standardized high-level computer programming language intended to improve code portability and reusability. CMS-2 was developed primarily for the US Navy’s tactical data systems (NTDS).CMS-2 was developed by RAND Corporation in the early 1970s and stands for \"Compiler Monitor System\". The name \"CMS-2\" is followed in literature by a letter designating the type of target system. For example, CMS-2M targets Navy 16-bit processors, such as the AN/AYK-14."
},
{"id": 84, 
"name": "COBOL",
"summary": "COBOL (; an acronym for \"common business-oriented language\") is a compiled English-like computer programming language designed for business use. It is imperative, procedural and, since 2002, object-oriented. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in legacy applications deployed on mainframe computers, such as large-scale batch and transaction processing jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages. Most programming in COBOL is now purely to maintain existing applications.COBOL was designed in 1959 by CODASYL and was partly based on previous programming language design work by Grace Hopper, commonly referred to as \"the (grand)mother of COBOL\". It was created as part of a US Department of Defense effort to create a portable programming language for data processing. It was originally seen as a stopgap, but the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption. It was standardized in 1968 and has since been revised four times. Expansions include support for structured and object-oriented programming. The current standard is ISO/IEC 1989:2014.COBOL statements have an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300 reserved words. In contrast with modern, succinct syntax like y = x;, COBOL has a more English-like syntax (in this case, MOVE x TO y).\nCOBOL code is split into four divisions (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large standard library, the standard specifies 43 statements, 87 functions and just one class.\nAcademic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design; it was (effectively) designed from the ground up as a computer language for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text.\nCOBOL has been criticized throughout its life, for its verbosity, design process, and poor support for structured programming. These weaknesses result in monolithic and, though intended to be English-like, not easily comprehensible and verbose programs."
},
{"id": 85, 
"name": "COMAL",
"summary": "COMAL (Common Algorithmic Language) is a computer programming language developed in Denmark by Benedict Løfstedt and Børge R. Christensen in 1973. COMAL was one of the few structured programming languages that was available for and comfortably usable on 8-bit home computers.\nThe \"COMAL Kernel Syntax & Semantics\" contains the formal definition of the language. Further extensions common to many implementations are described in."
},
{"id": 86, 
"name": "COMIT",
"summary": "COMIT was the first string processing language (compare SNOBOL, TRAC, and Perl), developed on the IBM 700/7000 series computers by Dr. Victor Yngve and collaborators at MIT from 1957 to 1965.  Yngve created the language for supporting computerized research in the field of linguistics, and more specifically, the area of machine translation for natural language processing. The creation of COMIT led to the creation of SNOBOL."
},
{"id": 87, 
"name": "COMPASS",
"summary": "A compass is an instrument used for navigation and orientation that shows direction relative to the geographic cardinal directions (or points). Usually, a diagram called a compass rose shows the directions north, south, east, and west on the compass face as abbreviated initials. When the compass is used, the rose can be aligned with the corresponding geographic directions; for example, the \"N\" mark on the rose points northward. Compasses often display markings for angles in degrees in addition to (or sometimes instead of) the rose. North corresponds to 0°, and the angles increase clockwise, so east is 90° degrees, south is 180°, and west is 270°. These numbers allow the compass to show magnetic North azimuths or true North azimuths or bearings, which are commonly stated in this notation.  If magnetic declination between the magnetic North and true North at latitude angle and longitude angle is known, then direction of magnetic North also gives direction of true North.\nAmong the Four Great Inventions, the magnetic compass was first invented as a device for divination as early as the Chinese Han Dynasty (since c. 206 BC), and later adopted for navigation by the Song Dynasty Chinese during the 11th century. The first usage of a compass recorded in Western Europe and the Islamic world occurred around 1190."
},
{"id": 88, 
"name": "COMTRAN",
"summary": "COMTRAN (COMmercial TRANslator) is an early programming language developed at IBM.  It was intended as the business programming equivalent of the scientific programming language FORTRAN (FORmula TRANslator).  It served as one of the forerunners to the COBOL language. Developed by Bob Bemer, in 1957, the language was the first to feature the programming language element known as a picture clause."
},
{"id": 89, 
"name": "COWSEL",
"summary": "COWSEL (COntrolled Working SpacE Language) is a programming language designed between 1964 and 1966 by Robin Popplestone. It was based on an RPN form of Lisp combined with some ideas from CPL.\nCOWSEL was initially implemented on a Ferranti Pegasus computer at the University of Leeds and on a Stantec Zebra at the Bradford Institute of Technology; later, Rod Burstall implemented it on an Elliot 4120 at the University of Edinburgh.\nCOWSEL was renamed POP-1 during the summer of 1966 and development continued under that name from then on."
},
{"id": 90, 
"name": "CPL (programming language)",
"summary": "CPL (Combined Programming Language) is a multi-paradigm programming language, that was developed in the early 1960s.  It is an early ancestor of the C language via the BCPL and B languages."
},
{"id": 91, 
"name": "Caché ObjectScript",
"summary": "Caché ObjectScript is a part of the Caché database system sold by InterSystems. The language is a functional superset of the ANSI-standard MUMPS programming language. Since Caché is at its core a MUMPS implementation, it can run ANSI MUMPS routines with no change. To appeal as a commercial product, Caché implements support for object-oriented programming, a macro preprocessing language, embedded SQL for ANSI-standard SQL access to M's built-in database, procedure and control blocks using C-like brace syntax, procedure-scoped variables, and relaxed whitespace syntax limitations.\nThe language has private and public variables and globals. Global has a different meaning in this language than in most; such variables are global across routines, processes, and sessions. Thus, editing a global variable is making permanent and immediate changes to a system-universal database (which survives reboots, etc.).  The scope of a private variable is the local function, the scope of a public variable is the entire process. Variables, private and public, may be single elements or complete multi-dimensional arrays.\nThe great majority of Caché's feature-set is inherited from the ANSI MUMPS standard.  See that article for details on how data is represented and the different ways a programmer can think about the data during development."
},
{"id": 92, 
"name": "Caml",
"summary": "Caml (originally an acronym for Categorical Abstract Machine Language) is a multi-paradigm, general-purpose programming language which is a dialect of the ML programming language family.  Caml was developed in France at INRIA and ENS.\nLike many descendants of ML, Caml is statically typed, strictly evaluated, and uses automatic memory management.\nOCaml, as of 2017 the main implementation of Caml, adds many features to the language, including an object layer.\n\n"
},
{"id": 93, 
"name": "Cayenne (programming language)",
"summary": "Cayenne is a dependently typed functional programming language created by Lennart Augustsson in 1998, making it one of the earliest dependently typed programming languages (as opposed to proof assistants or logical frameworks). A notable design decision is that the language allows unbounded recursive functions to be used on the type level, making type checking undecidable. Most dependently typed proof assistants and later dependently typed languages such as Agda included a termination checker to prevent the type checker from looping, while the contemporary Dependent ML restricted the expressivity of the type-level language to maintain decidability.\nThere are very few building blocks in the language, but much syntactic sugar to make it more readable. The basic types are functions, products, and sums. Functions and products use dependent types to gain additional power. The syntax is largely borrowed from Haskell. There is no special module system, because with dependent types records (products) are powerful enough to define modules.\nThe Cayenne implementation was written in Haskell, and it also translated to Haskell, but is currently no longer being maintained.\n\n"
},
{"id": 94, 
"name": "Cecil (programming language)",
"summary": "Cecil is a pure object-oriented programming language that was developed by Craig Chambers at the University of Washington in 1992 to be part of the Vortex project there. Cecil has many similarities to other object-oriented languages, most notably Objective-C, Modula-3, and Self. The main goals of the project were extensibility, orthogonality, efficiency, and ease-of-use.\nThe language supports multiple dispatch and multimethods, dynamic inheritance, and optional static type checking. Unlike most other OOP systems, Cecil allows subtyping and code inheritance to be used separately, allowing run-time or external extension of object classes or instances. Like Objective-C, all object services in Cecil are invoked by message passing, and the language supports run-time class identification. These features allow Cecil to support dynamic, exploratory programming styles. Parameterized types and methods (generics, polymorphism), garbage collection, and delegation are also supported. Cecil also supports a module mechanism for isolating independent libraries or packages. Cecil does not presently support threads or any other form of concurrency. A standard library for Cecil is also available and includes various collection, utility, system, I/O, and GUI classes.\nThe Diesel language was the successor of Cecil.There was also an assembler type language known as Cesil (Computer Education in Schools Instructional Language) used in the late-1970s developed by ICL. It was quite similar to the later language MASM.\n\n"
},
{"id": 95, 
"name": "Cesil",
"summary": "Cesil, or Computer Education in Schools Instruction Language, was a programming language designed to introduce pupils in British schools to Assembly language.  It is a low level language containing a total of fourteen instructions:\n\nLoad value - place the immediate value or the contents of the variable named in the accumulator.\nStore variable - place the contents of the accumulator in the variable.\nJump label - transfer control to location labelled.\nJineg label - transfer control to location labelled if the accumulator contains a negative value.\nJizero label - transfer control to location labelled if the accumulator contains zero.\nPrint literal - output the following string, delimited by single quotes.\nLine - output a carriage return\nIn - allow user to input a numerical value from the console.\nOut - Output the contents of the accumulator as a decimal integer, signed if negative.\nAdd value - add the variable or immediate integer value to the accumulator.\nSubtract value - subtract the variable or immediate integer from the accumulator.\nMultiply value - place the product of the accumulator and the variable or immediate integer in the accumulator.\nDivide value - place the contents of the accumulator divided by the value in the accumulator.\nHalt - return control to console."
},
{"id": 96, 
"name": "Ceylon (programming language)",
"summary": "Ceylon is an object-oriented, strongly statically typed programming language with an emphasis on immutability, created by Red Hat. Ceylon programs run on the Java virtual machine (JVM), and can be compiled to JavaScript.\nThe language design focuses on source code readability, predictability, toolability, modularity, and metaprogrammability.Important features of Ceylon include:\nA type system enforcing null safety and list element existence at compile time\nRegular syntax and semantics, avoiding special cases and primitively-defined constructs in favor of syntactic sugar\nSupport for generic programming and metaprogramming, with reified generics\nModularity built into the language, based on JBoss modules, interoperable with OSGi and Maven\npowerful tools, including an Eclipse-based IDEThe name \"Ceylon\" is an oblique reference to Java, in that Java and Sri Lanka, formerly known as Ceylon, are islands known for growth and export of coffee and tea.\nIn August 2017, Ceylon was donated to the Eclipse Foundation."
},
{"id": 97, 
"name": "Cg (programming language)",
"summary": "Cg (short for C for Graphics) is a high-level shading language developed by Nvidia in close collaboration with Microsoft for programming vertex and pixel shaders. Cg is based on the C programming language and although they share the same syntax, some features of C were modified and new data types were added to make Cg more suitable for programming graphics processing units. This language is only suitable for GPU programming and is not a general programming language. The Cg compiler outputs DirectX or OpenGL shader programs. Since 2012, Cg was deprecated, with no additional development or support available."
},
{"id": 98, 
"name": "Ch (computer programming)",
"summary": "Ch  is a proprietary cross-platform C and C++ interpreter and scripting language environment, originally designed by Harry H. Cheng as a scripting language for beginners to learn mathematics, computing, numerical analysis (numeric methods), and programming in C/C++. Ch is now developed and marketed by SoftIntegration, Inc. A student edition is freely available. Ch Professional Edition for Raspberry Pi is free for non-commercial use.\nCh can be embedded in C/C++ application programs. It has numerical computing and graphical plotting features. Ch is a combined shell and IDE. Ch shell combines the features of common shell and C language. ChIDE provides quick code navigation and symbolic debugging.  It is based on embedded Ch, Scite and Scintilla.Ch is written in C and runs on Windows, Linux, macOS, FreeBSD, AIX, Solaris, QNX, and HP-UX. It supports C90 and major C99 features, but it does not support the full set of C++ features. C99 complex number, IEEE-754 floating-point arithmetic, and variable-length array features were supported in Ch before they became part of the C99 standard. An article published by Computer Reseller News (CRN) named Ch as notable among C-based virtual machines for its functionality and the availability of third-party libraries.Ch has many toolkits that extend its functions. For example, Ch Mechanism Toolkit is used for design and analysis of commonly used mechanisms such as fourbar linkage, five-bar linkage, six-bar linkage, crank-slider mechanism, and cam-follower system. Ch Control System Toolkit is used for modeling, design, and analysis of continuous-time or discrete-time linear time invariant (LTI) control systems. Both toolkits includes the source code.\nCh is now used and integrated into curriculum by many high schools and universities to teach computing and programming in C/C++. Ch has been integrated into free C-STEM Studio, a platform for learning  computing, science, technology, engineering, and mathematics (C-STEM) with robotics. C-STEM Studio is developed by UC Davis Center for Integrated Computing and STEM Education (C-STEM). It offers the curriculum for K-12 students.\nCh supports LEGO Mindstorms NXT and EV3, Arduino, Linkbot, Finch Robot, RoboTalk and Raspberry Pi, Pi Zero, and ARM for robot programming and learning. It can also be embedded into the LabVIEW system-design platform and development environment."
},
{"id": 99, 
"name": "Chapel (programming language)",
"summary": "Chapel, the Cascade High Productivity Language, is a parallel programming language developed by Cray. It is being developed as part of the Cray Cascade project, a participant in DARPA's High Productivity Computing Systems (HPCS) program, which had the goal of increasing supercomputer productivity by the year 2010. It is being developed as an open source project, under version 2 of the Apache license.\n\n"
},
{"id": 100, 
"name": "Charity (programming language)",
"summary": "Charity is an experimental purely functional programming language, developed at the University of Calgary under the supervision of Robin Cockett. Based on ideas by Hagino Tatsuya, it is completely grounded in category theory.Disregarding interactions with the outside world, all Charity programs are guaranteed to terminate or stay productive.\n“Charity was an interesting exercise in non-Turing-complete programming languages that is capable of expressing the Ackermann function. Alas, it seems to have not been active over the last 10 years. Though it would be of interest to anyone interested in seeing how far one can take a non-TC language” (links added). The shown examples include also solving the Tower of Hanoi problem (source). Charity is also related to the total functional programming languages.\nThe language allows ordinary recursive data types, such as might be found in ML, which are required to be finite, and corecursive data types, which are allowed to be potentially infinite. The control structure for operating on recursive data types is primitive recursion or paramorphism, and the control structure for corecursive data types is primitive co-recursion or apomorphism. Neither control structure can operate over the other kind of data, so all paramorphisms terminate and all apomorphisms are productive."
},
{"id": 101, 
"name": "Charm (language)",
"summary": "Charm is a computer programming language devised in the early 1990s with similarities to the RTL/2, Pascal and C languages in addition to containing some unique features of its own. The Charm language is defined by a context-free grammar amenable to being processed by recursive descent parser as described in seminal books on compiler design.A set of Charm tools including a compiler, assembler and linker released for the Acorn market has been reviewed in Acorn User magazine under the category of programming software. Charm reworked for RISC OS platforms has subsequently been reviewed in Archive magazine.Charm is further described in the e-book Programming in Charm on the Raspberry Pi."
},
{"id": 102, 
"name": "Chomski",
"summary": "Avram Noam Chomsky (born December 7, 1928) is an American linguist, philosopher, cognitive scientist, historian, social critic, and political activist. Sometimes called \"the father of modern linguistics\", Chomsky is also a major figure in analytic philosophy and one of the founders of the field of cognitive science. He holds a joint appointment as Institute Professor Emeritus at the Massachusetts Institute of Technology (MIT) and Laureate Professor at the University of Arizona, and is the author of more than 100 books on topics such as linguistics, war, politics, and mass media. Ideologically, he aligns with anarcho-syndicalism and libertarian socialism.\nBorn to Jewish immigrants in Philadelphia, Chomsky developed an early interest in anarchism from alternative bookstores in New York City. He studied at the University of Pennsylvania. During his postgraduate work in the Harvard Society of Fellows, Chomsky developed the theory of transformational grammar for which he earned his doctorate in 1955. That year he began teaching at MIT, and in 1957 emerged as a significant figure in linguistics with his landmark work Syntactic Structures, which played a major role in remodeling the study of language. From 1958 to 1959 Chomsky was a National Science Foundation fellow at the Institute for Advanced Study. He created or co-created the universal grammar theory, the generative grammar theory, the Chomsky hierarchy, and the minimalist program. Chomsky also played a pivotal role in the decline of behaviorism, and was particularly critical of the work of B. F. Skinner.\nAn outspoken opponent of U.S. involvement in the Vietnam War, which he saw as an act of American imperialism, in 1967 Chomsky rose to national attention for his antiwar essay \"The Responsibility of Intellectuals\". Associated with the New Left, he was arrested multiple times for his activism and placed on President Richard Nixon's Enemies List. While expanding his work in linguistics over subsequent decades, he also became involved in the linguistics wars. In collaboration with Edward S. Herman, Chomsky later articulated the propaganda model of media criticism in Manufacturing Consent and worked to expose the Indonesian occupation of East Timor. His defense of freedom of speech, including Holocaust denial, generated significant controversy in the Faurisson affair of the 1980s. Since retiring from MIT, he has continued his vocal political activism, including opposing the 2003 invasion of Iraq and supporting the Occupy movement. Chomsky began teaching at the University of Arizona in 2017.\nOne of the most cited scholars alive, Chomsky has influenced a broad array of academic fields. He is widely recognized as having helped to spark the cognitive revolution in the human sciences, contributing to the development of a new cognitivistic framework for the study of language and the mind. In addition to his continued scholarship, he remains a leading critic of U.S. foreign policy, neoliberalism and contemporary state capitalism, the Israeli–Palestinian conflict, and mainstream news media. His ideas have proven highly influential in the anti-capitalist and anti-imperialist movements, but have also drawn criticism, with some accusing Chomsky of anti-Americanism."
},
{"id": 103, 
"name": "ChucK",
"summary": "ChucK is a concurrent, strongly timed audio programming language for real-time synthesis, composition, and performance,\nwhich runs on Linux, Mac OS X, Microsoft Windows, and iOS. It is designed to favor readability and flexibility for the programmer over other considerations such as raw performance. It natively supports deterministic concurrency and multiple, simultaneous, dynamic control rates. Another key feature is the ability to live code; adding, removing, and modifying code on the fly, while the program is running, without stopping or restarting. It has a highly precise timing/concurrency model, allowing for arbitrarily fine granularity. It offers composers and researchers a powerful and flexible programming tool for building and experimenting with complex audio synthesis programs, and real-time interactive control.ChucK was created and chiefly designed by Ge Wang as a graduate student working with Perry R. Cook.  ChucK is distributed freely under the terms of the GNU General Public License on Mac OS X, Linux and Microsoft Windows. On iPhone and iPad, ChiP (ChucK for iPhone) is distributed under a limited, closed source license, and is not currently licensed to the public. However, the core team has stated that it would like to explore \"ways to open ChiP by creating a beneficial environment for everyone\"."
},
{"id": 104, 
"name": "Cilk",
"summary": "Cilk, Cilk++ and Cilk Plus are general-purpose programming languages designed for multithreaded parallel computing. They are based on the C and C++ programming languages, which they extend with constructs to express parallel loops and the fork–join idiom.\nOriginally developed in the 1990s at the Massachusetts Institute of Technology (MIT) in the group of Charles E. Leiserson, Cilk was later commercialized as Cilk++ by a spinoff company, Cilk Arts. That company was subsequently acquired by Intel, which increased compatibility with existing C and C++ code, calling the result Cilk Plus."
},
{"id": 105, 
"name": "Citrine (programming language)",
"summary": "Citrine is a general purpose programming language for Unix-like operating systems. It focuses on readability and maintainability. Readability is achieved by syntactic and conceptual minimalism. The language is heavily inspired by Smalltalk and Self but has some very distinctive features. Like Smalltalk, Citrine treats everything as an object and focuses on sending messages to these objects. However unlike Smalltalk, Citrine lacks the concept of a class. In this regard, Citrine is more like Self and JavaScript because it uses prototypes. The combination of Smalltalk like messages and prototypes is what makes Citrine unique.\nAs of the 0.7 version Citrine has focused on supporting native human languages instead of just English to help people reduce the number of bugs because of confusion and misunderstanding due to language barriers. As such Citrine 0.7 and higher feature a translator to translate between human languages."
},
{"id": 106, 
"name": "Claire (programming language)",
"summary": "Claire is a high-level functional and object-oriented programming language with rule processing abilities. It was designed by Yves Caseau at Bouygues' e-Lab research laboratory, and received its final definition in 2004.\nClaire provides:\n\na simple object system with parametric classes and methods\npolymorphic and parametric functional programming\nproduction rules triggered by events\nversioned snapshots of the state of the whole system, or any part, supporting rollback and easy exploration of search spaces\nexplicit relations between entities; for example, two entities might be declared inverses of one another\nfirst-class sets with convenient syntax for set-based programming\nan expressive set-based type system allowing both second-order static and dynamic typingClaire's reference implementation, consisting of an interpreter and compiler, was fully open-sourced with the release of version 3.3.46 in February 2009. Another implementation, WebClaire, is commercially supported."
},
{"id": 107, 
"name": "Clarion (programming language)",
"summary": "Clarion is a commercial, proprietary, 4GL, multi-paradigm, programming language and Integrated Development Environment from SoftVelocity used to program database applications. It is compatible with ISAM, SQL and ADO data access methods, reads and writes several flat file desktop database formats including ASCII, CSV, DOS (Binary), FoxPro, Clipper, dBase, and some relational databases via ODBC, MS SQL Server, Sybase SQL Anywhere and Oracle through the use of accelerated native database drivers, and XML, Clarion can be used to output to HTML, XML, plaintext, and PDF, among others.\n\nThe Clarion Development Environment (IDE) sits on top of the Clarion Programming Language. The IDE provides code generation facilities via a system of templates which allow programmers to describe the program from an abstract level higher than actual code statements. The generator then turns this higher level into code, which in turn is then compiled and linked using a normal compiler and linker. This generation layer is sometimes referred to as 4GL programming.The generation layer is not required. It is possible to create programs completely at the code level (the so-called 3GL layer), bypassing all the code generation facilities.\nIf the templates are used to generate code then programmers are able to inject their own code into the generated code to alter, or extend, the functionality offered by the template layer. This process of embedding code can be done while viewing the surrounding generated code. This mixing of template code and generated code allows the template settings to be updated, and the code regenerated, without the loss of the embedded code.\nThe templates (from which the code is generated) are provided in source form and developers are free to create their own templates. A large collection of templates have been written by various developers some of which are offered as commercial add-ons and some of which are free.\nThere are several Clarion products available; Clarion Professional Edition, Clarion Enterprise Edition and Clarion.Net."
},
{"id": 108, 
"name": "Clean (programming language)",
"summary": "Clean is a general-purpose purely functional computer programming language. For much of the language's active development history it was called Concurrent Clean, but this was dropped at some point. Clean is being developed by a group of researchers from the Radboud University in Nijmegen since 1987."
},
{"id": 109, 
"name": "Clipper (programming language)",
"summary": "Clipper is an xBase compiler, which is a computer programming language, that is used to create software programs that originally operated primarily under MS-DOS. Although it is a powerful general-purpose programming language, it was primarily used to create database/business programs."
},
{"id": 110, 
"name": "Clojure",
"summary": "Clojure (, like closure) is a modern, dynamic, and functional dialect of the Lisp programming language on the Java platform. Like other Lisps, Clojure treats code as data and has a Lisp macro system. The current development process is community-driven, overseen by Rich Hickey as its benevolent dictator for life (BDFL).Clojure advocates immutability and immutable data structures and encourages programmers to be explicit about managing identity and its states. This focus on programming with immutable values and explicit progression-of-time constructs is intended to facilitate developing more robust, especially concurrent, programs that are simple and fast. While its type system is entirely dynamic, recent efforts have also sought the implementation of gradual typing.Commercial support for Clojure is provided by Cognitect. Annual Clojure conferences are organized every year across the globe, the most famous of them being Clojure/conj."
},
{"id": 111, 
"name": "CobolScript",
"summary": "COBOL (; an acronym for \"common business-oriented language\") is a compiled English-like computer programming language designed for business use. It is imperative, procedural and, since 2002, object-oriented. COBOL is primarily used in business, finance, and administrative systems for companies and governments. COBOL is still widely used in legacy applications deployed on mainframe computers, such as large-scale batch and transaction processing jobs. But due to its declining popularity and the retirement of experienced COBOL programmers, programs are being migrated to new platforms, rewritten in modern languages or replaced with software packages. Most programming in COBOL is now purely to maintain existing applications.COBOL was designed in 1959 by CODASYL and was partly based on previous programming language design work by Grace Hopper, commonly referred to as \"the (grand)mother of COBOL\". It was created as part of a US Department of Defense effort to create a portable programming language for data processing. It was originally seen as a stopgap, but the Department of Defense promptly forced computer manufacturers to provide it, resulting in its widespread adoption. It was standardized in 1968 and has since been revised four times. Expansions include support for structured and object-oriented programming. The current standard is ISO/IEC 1989:2014.COBOL statements have an English-like syntax, which was designed to be self-documenting and highly readable. However, it is verbose and uses over 300 reserved words. In contrast with modern, succinct syntax like y = x;, COBOL has a more English-like syntax (in this case, MOVE x TO y).\nCOBOL code is split into four divisions (identification, environment, data and procedure) containing a rigid hierarchy of sections, paragraphs and sentences. Lacking a large standard library, the standard specifies 43 statements, 87 functions and just one class.\nAcademic computer scientists were generally uninterested in business applications when COBOL was created and were not involved in its design; it was (effectively) designed from the ground up as a computer language for business, with an emphasis on inputs and outputs, whose only data types were numbers and strings of text.\nCOBOL has been criticized throughout its life, for its verbosity, design process, and poor support for structured programming. These weaknesses result in monolithic and, though intended to be English-like, not easily comprehensible and verbose programs."
},
{"id": 112, 
"name": "Cobra (programming language)",
"summary": "Cobra is a general-purpose, object-oriented programming language. Cobra is designed by Charles Esterbrook, and runs on the Microsoft .NET and Mono platforms. It is strongly influenced by Python, C#, Eiffel, Objective-C, and other programming languages. It supports both static and dynamic typing. It has support for unit tests and contracts. It has lambda expressions, closures, list comprehensions, and generators.Cobra is an open-source project; it was released under the MIT License on February 29, 2008."
},
{"id": 113, 
"name": "CoffeeScript",
"summary": "CoffeeScript is a programming language that compiles to JavaScript. It adds syntactic sugar inspired by Ruby, Python and Haskell in an effort to enhance JavaScript's brevity and readability. Specific additional features include list comprehension and destructuring assignment.\nCoffeeScript support is included in Ruby on Rails version 3.1 and Play Framework. In 2011, Brendan Eich referenced CoffeeScript as an influence on his thoughts about the future of JavaScript."
},
{"id": 114, 
"name": "ColdFusion",
"summary": "Cold fusion is a hypothesized type of nuclear reaction that would occur at, or near, room temperature. It would contrast starkly with the \"hot\" fusion that is known to take place naturally within stars and artificially in hydrogen bombs and prototype fusion reactors under immense pressure and at temperatures of millions of degrees, and be distinguished from muon-catalyzed fusion. There is currently no accepted theoretical model that would allow cold fusion to occur.\nIn 1989, two electrochemists, Martin Fleischmann and Stanley Pons reported that their apparatus had produced anomalous heat (\"excess heat\") of a magnitude they asserted would defy explanation except in terms of nuclear processes. They further reported measuring small amounts of nuclear reaction byproducts, including neutrons and tritium. The small tabletop experiment involved electrolysis of heavy water on the surface of a palladium (Pd) electrode. The reported results received wide media attention and raised hopes of a cheap and abundant source of energy.Many scientists tried to replicate the experiment with the few details available. Hopes faded due to the large number of negative replications, the withdrawal of many reported positive replications, the discovery of flaws and sources of experimental error in the original experiment, and finally the discovery that Fleischmann and Pons had not actually detected nuclear reaction byproducts. By late 1989, most scientists considered cold fusion claims dead, and cold fusion subsequently gained a reputation as pathological science. In 1989 the United States Department of Energy (DOE) concluded that the reported results of excess heat did not present convincing evidence of a useful source of energy and decided against allocating funding specifically for cold fusion. A second DOE review in 2004, which looked at new research, reached similar conclusions and did not result in DOE funding of cold fusion.A small community of researchers continues to investigate cold fusion, now often preferring the designation low-energy nuclear reactions (LENR) or condensed matter nuclear science (CMNS). Since articles about cold fusion are rarely published in peer-reviewed mainstream scientific journals any longer, they do not attract the level of scrutiny expected for mainstream scientific publications.\n\n"
},
{"id": 115, 
"name": "Combined Programming Language",
"summary": "CPL (Combined Programming Language) is a multi-paradigm programming language, that was developed in the early 1960s.  It is an early ancestor of the C language via the BCPL and B languages."
},
{"id": 116, 
"name": "Common Intermediate Language",
"summary": "Common Intermediate Language (CIL), formerly called Microsoft Intermediate Language (MSIL) or Intermediate Language (IL) ., is the intermediate language binary instruction set defined within the Common Language Infrastructure (CLI) specification . CIL instructions are executed by a CLI-compatible runtime environment such as the Common Language Runtime. Languages which target the CLI compile to CIL. CIL is object-oriented, stack-based bytecode. Runtimes typically just-in-time compile CIL instructions into native code.\nCIL was originally known as Microsoft Intermediate Language (MSIL) during the beta releases of the .NET languages. Due to standardization of C# and the Common Language Infrastructure, the bytecode is now officially known as CIL. Windows Defender virus definitions continue to refer to binaries compiled with it as MSIL."
},
{"id": 117, 
"name": "Common Lisp",
"summary": "Common Lisp (CL) is a dialect of the Lisp programming language, published in ANSI standard document ANSI INCITS 226-1994 (R2004) (formerly X3.226-1994 (R1999)). The Common Lisp HyperSpec, a hyperlinked HTML version, has been derived from the ANSI Common Lisp standard.The Common Lisp language was developed as a standardized and improved successor of Maclisp. By the early 1980s several groups were already at work on diverse successors to MacLisp: Lisp Machine Lisp (aka ZetaLisp), Spice Lisp, NIL and S-1 Lisp. Common Lisp sought to unify, standardise, and extend the features of these MacLisp dialects. Common Lisp is not an implementation, but rather a language specification. Several implementations of the Common Lisp standard are available, including free and open-source software and proprietary products.\nCommon Lisp is a general-purpose, multi-paradigm programming language. It supports a combination of procedural, functional, and object-oriented programming paradigms. As a dynamic programming language, it facilitates evolutionary and incremental software development, with iterative compilation into efficient run-time programs. This incremental development is often done interactively without interrupting the running application.\nIt also supports optional type annotation and casting, which can be added as necessary at the later profiling and optimization stages, to permit the compiler to generate more efficient code. For instance, fixnum can hold an unboxed integer in a range supported by the hardware and implementation, permitting more efficient arithmetic than on big integers or arbitrary precision types.  Similarly, the compiler can be told on a per-module or per-function basis which type safety level is wanted, using optimize declarations.\nCommon Lisp includes CLOS, an object system that supports multimethods and method combinations. It is often implemented with a Metaobject Protocol.\nCommon Lisp is extensible through standard features such as Lisp macros (code transformations) and reader macros (input parsers for characters).\nCommon Lisp provides some backwards compatibility to Maclisp and to John McCarthy's original Lisp. This allows older Lisp software to be ported to Common Lisp."
},
{"id": 118, 
"name": "Comparison of programming languages",
"summary": "Programming languages are used for controlling the behavior of a machine (often a computer). Like natural languages, programming languages conform to rules for syntax and semantics.\nThere are thousands of programming languages and new ones are created every year. Few languages ever become sufficiently popular that they are used by more than a few people, but professional programmers may use dozens of languages in a career.\nMost programming languages are not standardized by an international (or national) standard, even widely used ones, such as Perl or Standard ML (despite the name). Notable standardized programming languages include ALGOL, C, C++, JavaScript (under the name ECMAScript), Smalltalk, Prolog, Common Lisp, Scheme (IEEE standard), Ada, Fortran, COBOL, SQL and XQuery."
},
{"id": 119, 
"name": "Component Pascal",
"summary": "Component Pascal is a programming language in the tradition of Niklaus Wirth's Pascal, Modula-2, Oberon and Oberon-2. It bears the name of the Pascal programming language and it preserves its heritage, but it is not compatible with Pascal. Instead, it is a minor variant and refinement of Oberon-2 with a more expressive type system and built-in string support. Component Pascal was originally designed and supported by a small ETH Zürich spin-off company called Oberon microsystems under the name Oberon/L. They developed an IDE (Integrated development environment) called BlackBox Component Builder. Since 2014 development and support has been taken over by a small group of volunteers. At the time the first version of the IDE was released (1994 as Oberon/F) it presented a novel approach to graphical user interface (GUI) construction based on editable forms, where fields and command buttons are linked to exported variables and executable procedures. This approach bears some similarity to the code-behind way used in Microsoft's .NET 3.0 to access code in XAML, which was released in 2008.\nAn open-source implementation of Component Pascal exists for the .NET and Java Virtual Machine platforms, from the Gardens Point team around John Gough at Queensland University of Technology in Australia.\nOn 23 June 2004 Oberon microsystems announced that the BlackBox Component Builder was made available as a free download and that an open-source version was planned. The beta open-source version was initially released in December 2004 and updated to a final v1.5 release in December 2005.  It includes the complete source code of the IDE, compiler, debugger, source analyser, profiler and interfacing libraries and can also be downloaded from their website. Several release candidates for v1.6 appeared in the years 2009 – 2011, the latest one (1.6rc6) appeared on Oberon microsystems web pages in 2011. At the end of 2013 Oberon Microsystems released the final release 1.6. It is most probably last release bundled by Oberon Microsystems and a small community took over the ongoing development.\nBlackBox Component Pascal uses the extensions .odc (= Oberon document) for document files, such as source files for example, and .osf (= Oberon symbol file) for symbol files while Gardens Point Component Pascal uses .cp for source and .cps for symbol files. BlackBox Component Pascal has its own executable and loadable object format .ocf (= Oberon code file); it includes a runtime linking loader for this format. The document format (.odc) is a rich text binary format, which allows nice formatting, supports conditional folding, and allows active content to be embedded in the source text. It also handles user interface elements in editable  forms. This is in tradition of the Oberon Text format."
},
{"id": 120, 
"name": "Computer Sciences Corporation",
"summary": "Computer Sciences Corporation (CSC) was an American multinational corporation that provided information technology (IT) services and professional services. On April 3, 2017, it merged with the Enterprise Services line of business of HP Enterprise (formerly Electronic Data Systems) to create DXC Technology.\n\n"
},
{"id": 121, 
"name": "Constraint Handling Rules",
"summary": "Constraint Handling Rules (CHR) is a declarative, rule-based language, introduced in 1991 by Thom Frühwirth at the time with ECRC (European Computer-Industry Research Centre) in Munich, Germany. Originally intended for constraint programming, CHR finds applications in grammar induction, abductive reasoning, multi-agent systems, natural language processing, compilation, scheduling, spatial-temporal reasoning, testing and verification, and type systems.\nA CHR program, sometimes called a constraint handler, is a set of rules that maintain a constraint store, a multi-set of logical formulas. Execution of rules may add or remove formulas from the store, thus changing the state of the program. The order in which rules \"fire\" on a given constraint store is non-deterministic, according to its abstract semantics and deterministic (top-down rule application), according to its refined semantics.Although CHR is Turing complete, it is not commonly used as a programming language in its own right.  Rather, it is used to extend a host language with constraints. Prolog is by far the most popular host language and CHR is included in several Prolog implementations, including SICStus and SWI-Prolog, although CHR implementations also exist for Haskell, Java, C, SQL, and JavaScript. In contrast to Prolog, CHR rules are multi-headed and are executed in a committed-choice manner using a forward chaining algorithm."
},
{"id": 122, 
"name": "Cool (programming language)",
"summary": "Cool, an acronym for Classroom Object Oriented Language, is a computer programming language designed by Alexander Aiken for use in an undergraduate compiler course project. While small enough for a one term project, Cool still has many of the features of modern programming languages, including objects, automatic memory management, strong static typing and simple reflection.\nThe reference Cool compiler is written in C++, built fully on the public domain tools. It generates code for a MIPS simulator, SPIM. Thus, the language should port easily to other platforms. It has been used for teaching compilers at many institutions (such as the University of California at Berkeley, where it was first used or Shahid Beheshti University of Iran) and the software is stable.\nThis language is unrelated to the COOL language included in CLIPS."
},
{"id": 123, 
"name": "Coq",
"summary": "Coq is an interactive theorem prover. It allows the expression of mathematical assertions, mechanically checks proofs of these assertions, helps to find formal proofs, and extracts a certified program from the constructive proof of its formal specification. Coq works within the theory of the calculus of inductive constructions, a derivative of the calculus of constructions. Coq is not an automated theorem prover but includes automatic theorem proving tactics and various decision procedures.\nThe Association for Computing Machinery rewarded Thierry Coquand, Gérard Huet, Christine Paulin-Mohring, Bruno Barras, Jean-Christophe Filliâtre, Hugo Herbelin, Chetan Murthy, Yves Bertot, and Pierre Castéran with the 2013 ACM Software System Award for Coq."
},
{"id": 124, 
"name": "CorVision",
"summary": "CorVision is a fourth generation programming tool (4GL) currently owned by Attunity, Inc. CorVision was developed by Cortex Corporation for the VAX/VMS ISAM environment. Although Cortex beta tested CorVision-10 which was generated for PCs but CorVision itself stayed anchored on VMS. CorVision-10 proved more difficult than hoped, and was never released."
},
{"id": 125, 
"name": "Coral 66",
"summary": "CORAL (Computer On-line Real-time Applications Language) is a programming language originally developed in 1964 at the Royal Radar Establishment (RRE), Malvern, UK. It was influenced by ALGOL and JOVIAL but is not a subset of either. Coral 66 was subsequently developed by I. F. Currie and M. Griffiths under the auspices of IECCA (Inter-Establishment Committee for\nComputer Applications). Its official definition,\nedited by Woodward, Wetherall and Gorman, was first published in 1970."
},
{"id": 126, 
"name": "Core War",
"summary": "Core War is a 1984 programming game created by D. G. Jones and A. K. Dewdney in which two or more battle programs (called \"warriors\") compete for control of a virtual computer. These battle programs are written in an abstract assembly language called Redcode."
},
{"id": 127, 
"name": "Cryptol",
"summary": "Cryptol is a domain specific programming language for cryptography developed by the Portland, Oregon based software development firm, Galois, Inc..\nThe language was originally developed for use by the United States National Security Agency. The language is also used by private firms that provide information technology systems, such as the American company Rockwell Collins provides to aerospace and defense contractors in the United States.The programming language is used for all aspects of developing and using cryptography, such as the design and implementation of new ciphers and the verification of existing cryptographic algorithms.  Cryptol is designed to allow the cryptographer to watch how stream processing functions in the program manipulate the ciphers or encryption algorithms."
},
{"id": 128, 
"name": "Crystal (programming language)",
"summary": "Crystal is a general-purpose, object-oriented programming language, designed and developed by Ary Borenszweig, Juan Wajnerman, Brian Cardiff and more than 300 contributors. With syntax inspired by the language Ruby, it is a compiled language with static type-checking, but specifying the types of variables or method arguments is generally unneeded. Types are resolved by an advanced global type inference algorithm. Crystal is in active development. It is released as free and open-source software under the Apache License version 2.0."
},
{"id": 129, 
"name": "Csound",
"summary": "Csound is a Domain-specific computer programming language for audio programming. It is called Csound because it is written in C, as opposed to some of its predecessors.\nIt is free software, available under the LGPL.\nCsound was originally written at MIT by Barry Vercoe in 1985, based on his earlier system called Music 11, which in its turn followed the MUSIC-N model initiated by Max Mathews at the Bell Labs. \nIts development continued throughout\nthe 1990s and 2000s, led by John Fitch at the University of Bath. \nThe first documented version 5 release is version 5.01 on March 18, 2006. \nMany developers have contributed to it, most notably Istvan Varga, Gabriel Maldonado, Robin Whittle, Richard Karpen, Michael Gogins, Matt Ingalls,  Steven Yi, Richard Boulanger, and Victor Lazzarini.\nDeveloped over many years, it currently has nearly 1700 unit generators. \nOne of its greatest strengths is that it is completely modular and extensible by the user. \nCsound is closely related to the underlying language for the Structured Audio extensions to MPEG-4, SAOL."
},
{"id": 130, 
"name": "Cuneiform (programming language)",
"summary": "No summary available"
},
{"id": 131, 
"name": "Curl (programming language)",
"summary": "Curl is a reflective object-oriented programming language for interactive web applications whose goal is to provide a smoother transition between formatting and programming. It makes it possible to embed complex objects in simple documents without needing to switch between programming languages or development platforms. The Curl implementation initially consisted of just an interpreter, but a compiler was added later.\nCurl combines text markup (as in HTML), scripting (as in JavaScript), and heavy-duty computing (as in Java, C#, or C++) within one unified framework.  It is used in a range of internal enterprise, B2B, and B2C applications.\nCurl programs may be compiled into Curl applets, that are viewed using the Curl RTE, a runtime environment with a plugin for web browsers. Currently, it is supported on Microsoft Windows, Linux, and macOS. Curl supports \"detached applets\", which is a web deployed applet which runs on the user's desktop independent of a browser window much as in Silverlight 3 and Adobe AIR.\nSCSK announced on 2019-03-25 that Curl will stop new releases on Linux and MacOS, which means Curl will no longer run over Linux and MacOS from version 8.0.8 ."
},
{"id": 132, 
"name": "Curry (programming language)",
"summary": "Curry is an experimental functional logic programming language, based on the Haskell language. It merges elements of functional and logic programming, including constraint programming integration.\nIt is nearly a superset of Haskell, lacking support mostly for overloading using type classes, which some implementations provide anyway as a language extension, such as the Münster Curry Compiler."
},
{"id": 133, 
"name": "Cybil (programming language)",
"summary": "Cybil (short for the Cyber Implementation Language of the Control Data Network Operating System) was a Pascal-like language developed at Control Data Corporation.  Cybil was used as the implementation language for the NOS/VE operating system on the CDC Cyber series and was also used to write the eOS operating system for the ETA10 supercomputer in the 1980s."
},
{"id": 134, 
"name": "Cyclone (programming language)",
"summary": "The Cyclone programming language is intended to be a safe dialect of the C language. Cyclone is designed to avoid buffer overflows and other vulnerabilities that are possible in C programs, without losing the power and convenience of C as a tool for system programming.\nCyclone development was started as a joint project of AT&T Labs Research and Greg Morrisett's group at Cornell in 2001. Version 1.0 was released on May 8, 2006."
},
{"id": 135, 
"name": "Cython",
"summary": "Cython is a programming language that aims to be a superset of the Python programming language, designed to give C-like performance with code that is written mostly in Python with optional additional C-inspired syntax.Cython is a compiled language that is typically used to generate CPython extension modules. Annotated python-like code is compiled to C or C++ then automatically wrapped in interface code, producing extension modules that can be loaded and used by regular Python code using the import statement, but with significantly less computational overhead at run time. Cython also facilitates wrapping independent C or C++ code into python-importable modules.\nCython is written in Python and C and works on Windows, macOS, and Linux, producing source files compatible with CPython 2.6, 2.7, and 3.3 through 3.8.\nCython 3.0.0 is in development."
},
{"id": 136, 
"name": "Céu (programming language)",
"summary": "Céu is \"Structured Synchronous Reactive Programming\" \nAccording to its web page, Céu supports synchronous concurrency with shared memory and deterministic execution and has a small memory footprint."
},
{"id": 137, 
"name": "D (programming language)",
"summary": "D, also known as Dlang, is a multi-paradigm system programming language created by Walter Bright at Digital Mars and released in 2001. Andrei Alexandrescu joined the design and development effort in 2007. Though it originated as a re-engineering of C++, D is a distinct language. It has redesigned some core C++ features, while also sharing characteristics of other languages, notably Java, Python, Ruby, C#, and Eiffel.\nThe design goals of the language attempt to combine the performance and safety of compiled languages with the expressive power of modern dynamic languages. Idiomatic D code is commonly as fast as equivalent C++ code, while also being shorter.  The language as a whole is not memory-safe but does include optional attributes designed to check memory safety.Type inference, automatic memory management and syntactic sugar for common types allow faster development, while bounds checking, design by contract features and a concurrency-aware type system help reduce the occurrence of bugs."
},
{"id": 138, 
"name": "DATATRIEVE",
"summary": "DATATRIEVE is a database query and report writer tool from Hewlett-Packard. It runs on the OpenVMS operating system, as well as several PDP-11 operating systems.  DATATRIEVE's command structure is nearly plain English, and it is an early example of a Fourth Generation Language (4GL). It works against flat files, indexed files, and databases. Such data files are delimited using record definitions stored in the Common Data Dictionary (CDD), or in RMS files. DATATRIEVE is used at many OpenVMS installations.\nDATATRIEVE was developed in the late 1970s and early 1980s by a team of software engineers at DEC's Central Commercial Engineering facilities in Merrimack and Nashua, New Hampshire, under database architect Jim Starkey. Many of the project's engineers went on to highly visible careers in database management and other software disciplines.\nDATATRIEVE adopted the wombat as its notional mascot; the program's help file responded to “HELP WOMBAT” with factual information about real world wombats."
},
{"id": 139, 
"name": "DBase",
"summary": "dBase (also stylized dBASE) was one of the first database management systems for microcomputers, and the most successful in its day. The dBase system includes the core database engine, a query system, a forms engine, and a programming language that ties all of these components together. dBase's underlying file format, the .dbf file, is widely used in applications needing a simple format to store structured data.\nOriginally released as Vulcan for PTDOS in 1978, the CP/M port caught the attention of Ashton-Tate in 1980. They licensed it and re-released it as dBASE II, and later ported to Apple II and IBM PC computers running DOS. On the PC platform, in particular, dBase became one of the best-selling software titles for a number of years. A major upgrade was released as dBase III, and ported to a wider variety of platforms, adding UNIX, and VMS. By the mid-1980s, Ashton-Tate was one of the \"big three\" software publishers in the early business software market, the others being Lotus Development and WordPerfect.\nStarting in the mid-1980s, several companies produced their own variations on the dBase product and especially the dBase programming language. These included FoxBASE+ (later renamed FoxPro), Clipper, and other so-called xBase products. Many of these were technically stronger than dBase, but could not push it aside in the market. This changed with the disastrous introduction of dBase IV, whose design and stability were so poor that many users switched to other products. At the same time, there was growing use of IBM-invented SQL (Structured Query Language) in database products. Another factor was user adoption of Microsoft Windows on desktop computers. The shift toward SQL and Windows put pressure on the makers of xBase products to invest in major redesign to provide new capabilities.\nIn the early 1990s xBase products constituted the leading database platform for implementing business applications. The size and impact of the xBase market did not go unnoticed, and within one year, the three top xBase firms were acquired by larger software companies:\n\nBorland purchased Ashton-Tate\nMicrosoft bought Fox Software, and\nComputer Associates acquired Nantucket.By the following decade most of the original xBase products had faded from prominence and several disappeared. Products known as dBase still exist, owned by dBase LLC."
},
{"id": 140, 
"name": "DIBOL",
"summary": "DIBOL or Digital's Business Oriented Language is a general-purpose, procedural, imperative programming language, designed for use in Management Information Systems (MIS) software development. It has a syntax similar to FORTRAN and BASIC, along with BCD arithmetic. It shares the COBOL program structure of data and procedure divisions."
},
{"id": 141, 
"name": "DIGITAL Command Language",
"summary": "DIGITAL Command Language (DCL) is the standard command language\nadopted by most of the operating systems (OSs) that were sold by the former Digital Equipment Corporation (which was acquired by Compaq, which was in turn acquired by Hewlett-Packard). DCL had its roots in the IAS, TOPS-20, and RT-11 OSs and was implemented as a standard across most of Digital's OSs, notably RSX-11, but took its most powerful form in the OpenVMS OS.\nWritten when the programming language Fortran was in heavy use, DCL is a scripting language supporting several datatypes, including strings, integers, bit arrays, arrays and booleans, but not floating point numbers. Access to OpenVMS system services (kernel API) is through lexical functions, which perform the same as their compiled language counterparts and allow scripts to get information on system state. DCL includes IF-THEN-ELSE, access to all the Record Management Services (RMS) file types including stream, indexed, and sequential, but unfortunately lacks a DO-WHILE or other looping construct, requiring users to make do with IF and GOTO-label statements instead.\nDCL is available for other operating systems as well, including \n\nVCL and VX/DCL for Unix,\nVCL for MS-DOS, OS/2 and Windows,\nPC-DCL and Open DCL for Windows/Linux\nand Accelr8 DCL Lite for Windows.DCL is the basis of the XLNT language, implemented on Windows by an interpreter-IDE-WSH engine combination with CGI capabilities distributed by Advanced System Concepts Inc. from 1997."
},
{"id": 142, 
"name": "DRAKON",
"summary": "DRAKON is an algorithmic visual programming and modeling language developed within the Buran space project following ergonomic design principles. The language provides a uniform way to represent flowcharts of any complexity that are easy to read and understand.\nThe DRAKON Editor, which was released in September 2011, is an implementation of the language available in the public domain. It can be used for creating documentation, or for creating visual programs that can be converted to source code in other languages.\nUnlike UML's philosophy, DRAKON's language philosophy is based on being augmented if needed, by using a hybrid language, which can be illustrated as \"incrustating code snippets from text language used into shape DRAKON requires\". This way, DRAKON always remains a simple visual language that can be used as an augmentation for a programmer who is interested in making their own project code easier to support or other long-term needs for example improving the ergonomics of the coding process or to making code easier to review and understand.\nThe name DRAKON is the Russian acronym for \"Дружелюбный Русский Алгоритмический [язык], Который Обеспечивает Наглядность\", which translates to \"Friendly Russian algorithmic [language] that illustrates (or provides clarity)\". \nThe word \"наглядность\" (pronounced approximately as \"naa-glya-dno-st-th\") refers to a concept or idea being easy to imagine and understand, and may be translated as \"clarity\".\nThe DRAKON language can be used both as a modelling/\"markup\" language (which is considered a standalone \"pure DRAKON\" program) and as a programming language (as part of a hybrid language).\nIntegration of a stricter, \"academic\", variant of a markup language into programming, such as provided by DRAKON, adds syntactic sugar allowing users of different programming languages to comprehend each other's contributions to the overall project and even provide commentary if needed."
},
{"id": 143, 
"name": "DYNAMO (programming language)",
"summary": "Dynamic programming language in computer science is a class of high-level programming languages, which at runtime, execute many common programming behaviours that static programming languages perform during compilation. These behaviors could include an extension of the program, by adding new code, by extending objects and definitions, or by modifying the type system. Although similar behaviors can be emulated in nearly any language, with varying degrees of difficulty, complexity and performance costs, dynamic languages provide direct tools to make use of them. Many of these features were first implemented as native features in the Lisp programming language.\nMost dynamic languages are also dynamically typed, but not all are. Dynamic languages are frequently (but not always) referred to as \"scripting languages\", although the term \"scripting language\" in its narrowest sense refers to languages specific to a given run-time environment."
},
{"id": 144, 
"name": "Dart (programming language)",
"summary": "Dart is a client-optimized programming language for apps on multiple platforms. It is developed by Google and is used to build mobile, desktop, backend and web applications.Dart is an object-oriented, class defined, garbage-collected language using a C-style syntax that transcompiles optionally into JavaScript. It supports interfaces, mixins, abstract classes, reified generics, static typing, and a sound type system."
},
{"id": 145, 
"name": "Darwin (programming language)",
"summary": "Darwin is a closed source programming language developed by Gaston Gonnet and colleagues at ETH Zurich.   It is used to develop the OMA orthology inference software, which was also initially developed by Gonnet. The language backend consists of the kernel, responsible for performing simple mathematical calculations, for transporting and storing data and for interpreting the user's commands, and the library, a set of programs which can perform more complicated calculations. The target audience for the language is the biosciences, so the library consisted of routines such as those to compute pairwise alignments, phylogenetic trees, multiple sequence alignments, and to make secondary structure predictions."
},
{"id": 146, 
"name": "Data analysis expressions",
"summary": "Data Analysis Expressions (DAX) is the native formula and query language for Microsoft PowerPivot, Power BI Desktop and SQL Server Analysis Services (SSAS) Tabular models. DAX includes some of the functions that are used in Excel formulas with additional functions that are designed to work with relational data and perform dynamic aggregation. It is, in part, an evolution of the Multidimensional Expression (MDX) language developed by Microsoft for Analysis Services multidimensional models (often called cubes) combined with Excel formula functions. It is designed to be simple and easy to learn, while exposing the power and flexibility of PowerPivot and SSAS tabular models."
},
{"id": 147, 
"name": "DataFlex",
"summary": "DataFlex (formerly known as Visual DataFlex) is a visual tool for developing Windows, web and mobile software applications on one framework-based platform."
},
{"id": 148, 
"name": "Datalog",
"summary": "Datalog is a declarative logic programming language that syntactically is a subset of Prolog.  It is often used as a query language for deductive databases.  In recent years, Datalog has found new application in data integration, information extraction, networking, program analysis, security, and cloud computing.Its origins date back to the beginning of logic programming, but it became prominent as a separate area around 1977 when Hervé Gallaire and Jack Minker organized a workshop on logic and databases. David Maier is credited with coining the term Datalog."
},
{"id": 149, 
"name": "Datapoint's Advanced Systems Language",
"summary": "DASL (Datapoint's Advanced Systems Language) was a programming language and compiler proprietary to Datapoint.  Primarily influenced by Pascal with some C touches, it was created in the early 1980s by Gene Hughes.\nThe compiler output was assembly language, which was typically processed through a peep-hole optimizer before the assembler and linker.\nReflecting its name, DASL was used for systems programming, mainly by the vendor itself."
},
{"id": 150, 
"name": "Dc (computer program)",
"summary": "dc (desk calculator) is a cross-platform reverse-polish calculator which supports arbitrary-precision arithmetic. Written by Robert Morris while at Bell Labs, it is one of the oldest Unix utilities, predating even the invention of the C programming language. Like other utilities of that vintage, it has a powerful set of features but terse syntax.\nTraditionally, the bc calculator program (with infix notation) was implemented on top of dc.\nThis article provides some examples in an attempt to give a general flavour of the language; for a complete list of commands and syntax, one should consult the man page for one's specific implementation."
},
{"id": 151, 
"name": "Dink Smallwood",
"summary": "Dink Smallwood is an action role-playing video game, developed by Robinson Technologies, at the time consisting of Seth Robinson, Justin Martin, and Greg Smith. It was first released in 1998 before being released as freeware on October 17, 1999. Mitch Brink composed several of the game's music tracks, while others are MIDI forms of classical music, such as Debussy's \"Reverie\". The game has a small but constant fan following that continues to develop add-ons for the game more than a decade after its release. The game is also notable for its humorous dialogue and surrealistic themes in various scenes between the gameplay."
},
{"id": 152, 
"name": "Distributed Application Specification Language",
"summary": "The DASL Programming Language (Distributed Application Specification Language) is a high-level, strongly typed programming language originally developed at Sun Microsystems Laboratories between 1999 and 2003 as part of the Ace Project.  The goals of the project were to enable rapid development of web-based applications based on Sun's J2EE architecture, and to eliminate the steep learning curve of platform-specific details.\nDASL defines an application as a domain model with one or more logical presentation models, where a logical presentation model consists of a choreography of the domain model objects described in a set of forms with attached actions.  DASL generates the graphical user interface directly from the logical presentation. \nDASL is unique among modern application programming languages in its ability to generate a modern graphic user interface for an application without requiring the programmer to define the user interface explicitly, while allowing the programmer to control the look and feel of the generated graphic user interface.\nThe DASL language is partially declarative and partially procedural. Description of object/data structures and persistence, and the description of the logical presentation, are declarative. Basic object constraints and behavior are declarative, while additional object behaviors are specified procedurally as methods. Queries can be defined either declaratively or by writing methods.\nThe language and development environment are a practical realization of the model-driven architecture (MDA) approach. The programmer uses DASL to produce the platform-independent model or PIM, and the language code generators automatically produce and deploy the platform-specific model or PSM. New PSMs may be introduced by writing new code generators."
},
{"id": 153, 
"name": "Dog (programming language)",
"summary": "Sepandar David Kamvar (born 1977), also known as Sep Kamvar, is a computer scientist, artist, and entrepreneur. He is currently the LG Career Development Professor of Media Arts and Sciences at MIT, and he was director of the Social Computing group at the MIT Media Lab."
},
{"id": 154, 
"name": "Draco (programming language)",
"summary": "Draco was a shareware programming language created by Chris Gray. First developed for CP/M systems, Amiga version followed in 1987.Although Draco, a blend of Pascal and C, was well suited for general purpose programming, its uniqueness as a language was its main weak point. Gray used Draco for the Amiga to create a port of Peter Langston's game Empire."
},
{"id": 155, 
"name": "Dylan (programming language)",
"summary": "Dylan is a multi-paradigm programming language that includes support for functional and object-oriented programming (OOP), and is dynamic and reflective while providing a programming model designed to support generating efficient machine code, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by Apple Computer.\nA concise and thorough overview of the language may be found in the Dylan Reference Manual.Dylan derives from Scheme and Common Lisp and adds an integrated object system derived from the Common Lisp Object System (CLOS). In Dylan, all values (including numbers, characters, functions, and classes) are first-class objects. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).\nDylan's main design goal is to be a dynamic language well-suited for developing commercial software. Dylan attempts to address potential performance issues by introducing \"natural\" limits to the full flexibility of Lisp systems, allowing the compiler to clearly understand compilable units, such as libraries.\nDylan derives much of its semantics from Scheme and other Lisps; some Dylan implementations were initially built within extant Lisp systems. However, Dylan has an ALGOL-like syntax instead of a Lisp-like prefix syntax."
},
{"id": 156, 
"name": "E (programming language)",
"summary": "E is an object-oriented programming language for secure distributed computing, created by Mark S. Miller, Dan Bornstein, and others at Electric Communities in 1997.  E is mainly descended from the concurrent language Joule and from Original-E, a set of extensions to Java for secure distributed programming.  E combines message-based computation with Java-like syntax.  A concurrency model based on event loops and promises ensures that deadlock can never occur."
},
{"id": 157, 
"name": "EC (programming language)",
"summary": "eC (Ecere C) is an object-oriented programming language, defined as a super-set of the C language.\neC was initially developed as part of the Ecere cross-platform software development kit (SDK) project.\nThe goals of the language are to provide object-oriented constructs, reflection, properties and dynamic modules on top of the C language while maintaining C compatibility and optimal native performance.eC currently relies on GCC or Clang to perform the final steps of compilation, using C as an intermediate language. There are, however, plans to integrate directly with LLVM to skip the intermediate C files.eC is available as part of the ecere-sdk package in Debian/Ubuntu and other derived Linux distributions. A Windows installer also bundling MinGW-w64 is available from the main website. The free and open-source SDK including the eC compiler can also be built for a number of other platforms, including OS X, FreeBSD and Android.It is also possible to deploy eC applications to the web by compiling them to JavaScript through Emscripten, or to WebAssembly through Binaryen."
},
{"id": 158, 
"name": "ECMAScript",
"summary": "ECMAScript (or ES)\nis a scripting-language specification standardized by Ecma International in ECMA-262 and ISO/IEC 16262. It was created to standardize JavaScript to help foster multiple independent implementations.  JavaScript has remained the best-known implementation of ECMAScript since the standard was first published, with other well-known implementations including JScript and ActionScript. ECMAScript is commonly used for client-side scripting on the World Wide Web, and it is increasingly being used for writing server applications and services using Node.js.\n\n"
},
{"id": 159, 
"name": "EGL (programming language)",
"summary": "EGL (Enterprise Generation Language), originally developed by IBM and now available as the EDT (EGL Development Tools) Open Source project under the Eclipse Public License (EPL), is a programming technology designed to meet the challenges of modern, multi-platform application development by providing a common language and programming model across languages, frameworks, and runtime platforms. The language borrows concepts familiar to anyone using statically typed languages like Java, COBOL, C, etc. However, it borrows the concept of stereotype from Unified Modeling Language (UML) that is not typically found in statically typed programming languages.\nIn a nutshell, EGL is a higher-level, universal application development language.\nEGL is similar in syntax to other common languages so it can be learned by application developers with similar previous programming background. EGL application development abstractions shield programmers from the technical interfaces of systems and middleware allowing them to focus on building business functionality.\nEGL applications and services are written, tested and debugged at the EGL source level, and once they are satisfactorily functionally tested they can be compiled into COBOL, Java, or JavaScript code to support deployment of business applications that can run in any of the following environments:\n\nPlatforms with a Java virtual machine, such as Microsoft Windows, Linux, and UNIX, for example in the context of a Java EE servlet container (IBM WebSphere Application Server, Apache Tomcat, GlassFish)\nIBM System z: CICS Transaction Server, IMS, z/OS Batch, UNIX System Services, WebSphere Application Server, z/VSE, Linux\nIBM System i: IBM i5/OS, IBM WebSphere Application Server, Apache Tomcat, Integrated Web Application Server for i\nWeb browsers supporting JavaScript, such as Internet Explorer, Firefox, and Safari, for Ajax rich web applications"
},
{"id": 160, 
"name": "ELAN (programming language)",
"summary": "ELAN is an educational programming language for learning and teaching systematic programming.\nIt was developed in 1974 by C.H.A. Koster and a group at the Technical University of Berlin as an alternative to BASIC in teaching, and approved for use in secondary schools in Germany by the \"Arbeitskreis Schulsprache\". It is in use in a number of schools in Germany, Belgium, the Netherlands, and Hungary for informatics teaching in secondary education, and used at the Radboud University Nijmegen in the Netherlands for teaching systematic programming to students from various disciplines and in teacher courses.\nThe language design focuses strongly on structured programming, and has a special construction for stepwise refinement, allowing students to focus on top-down design, and bottom-up coding."
},
{"id": 161, 
"name": "EXEC 2",
"summary": "EXEC 2 is an interpreted, command procedure control, computer scripting language used by the EXEC 2 Processor supplied with the IBM Virtual Machine/System Product (VM/SP) operating system.EXEC 2 is similar to CMS EXEC with the following enhancements:\nThere is no 8-byte restriction on token length.\nStatements can be up to 255 characters long.\nEXEC 2 can issue commands to subcommand environments as well as CMS and CP.\nEXEC 2 has additional built-in functions.\nEXEC 2 commands may include subroutines and functions.\nEXEC 2 has extra debugging facilities.\nCMS programs can manipulate EXEC 2 variables."
},
{"id": 162, 
"name": "Ease (programming language)",
"summary": "**Ease** is a general purpose parallel programming language. It is designed by\nSteven Ericsson-Zenith, a researcher at Yale University, the Institute for\nAdvanced Science  & Engineering in Silicon Valley, California, the Ecole\nNationale Supérieure des Mines de Paris, and the Pierre and Marie Curie\nUniversity, the science department of the Sorbonne.\n\nThe book _Process Interaction Models_ is the Ease language specification. Ease\ncombines the process constructs of communicating sequential processes (CSP)\nwith logically shared data structures called _contexts_. Contexts are parallel\ndata types that are constructed by processes and provide a way for processes\nto interact.\n\nThe language includes two process constructors.\nIf one process finishes before the other, then it will wait until the other\nprocesses are finished.\n\nA _subordination_ creates a process that shares the _contexts_ that are in\nscope when created and finishes when complete (it does not wait for other\nprocesses). Subordinate processes stop if they attempt to interact with a _context_ that\nhas completed because the parent process has stopped. This enables speculative\nprocesses to be created that will finish if their result is not needed.\n\nPowerful _replication_ syntax allows multiple processes to be created.Processes cannot share _local_ variables and cooperate in the construction of\nshared _contexts._ Certain context types, called _resources_ , ensure call-\nreply semantics.\n\nThere are four functions upon contexts:\n\n  * _read_ (context, variable) – copies a value from the shared _context_ to the _variable_.\n  * _write_ (context, expression) – copies the value of _expression_ to the shared _context_.\n  * _put_ (context, name) – moves the value bound to _name_ to the shared _context_. The value of _name_ is subsequently _undefined_.\n  * _get_ (context, name) – moves a value from _context_ and binds it to _name_. The value is removed from the context.\n\nContext types are _Singletons_ , _Bags_ or _Streams_ and can be subscripted\narrays.\n\nEase has a _semiotic definition_. This means that it accounts for the effect\nthe language has on the programmer and how they develop algorithms. The\nlanguage was designed to _ease_ the developing of parallel programs."
},
{"id": 163, 
"name": "Easy Programming Language",
"summary": "Easy Programming Language (EPL, Chinese: 易语言) is a visual compiled multilingual proprietary programming language. EPL is somewhat popular in China because it features a full Chinese environment. (The language has traditional Chinese, simplified Chinese, English and Japanese variants.)\nIn addition, it is cross-platform, as it currently supports both Microsoft Windows and Linux. It is object-oriented and structured."
},
{"id": 164, 
"name": "Easytrieve",
"summary": "Easytrieve is a Report generator product of CA Technologies. Easytrieve Classic and Easytrieve Plus are two available versions of this programming languages primarily designed to generate reports and are used by large corporations operating in mainframe (z/OS, z/VM, z/VSE), UNIX, Linux, and Microsoft Windows environments"
},
{"id": 165, 
"name": "Edinburgh IMP",
"summary": "Edinburgh IMP is a development of ATLAS Autocode, initially developed around 1966-1969 at Edinburgh University, Scotland.  IMP was a general-purpose programming language which was used heavily for systems programming.\nExpressively, IMP is extremely similar to Algol and includes all the Algol-style block structure, reserved keywords, and datatypes such as arrays and records.  It adds to Algol-style languages a string type (akin to a flex array of char) and built-in operators for string manipulation and character handling.\nIMP provides significant control over the storage mapping of data, plus commands for addressing within parts of words.  Most IMP compilers offer compiler-generated run-time checks and a backtrace facility by default, even in production code. IMP allows the programmer to inline machine language instructions in the IMP source code.\nEarly IMP compilers were developed for the English Electric KDF9, ICL System 4, UNIVAC 1108, IBM 360, DEC PDP-9, DEC PDP-15 and CTL Modular One computers. IMP was used to implement the EMAS operating system.  In later years a version of IMP called IMP77 was developed by Peter Robertson within the Computer Science department at Edinburgh which was a portable compiler that brought IMP to even more platforms.  In 2002 the IMP77 language was resurrected by the Edinburgh Computer History Project for Intel x86 hardware running DOS, Windows and Linux and is once again in use by Edinburgh graduates and ex-pats.\nThe diverged IMP and IMP77 were later consolidated into a single language with the introduction of the IMP80 standard supported by implementations from the Edinburgh Regional Computer Centre.  IMP80 has also been ported to several platforms including Intel and was actively in use into the 1990s.\nEdinburgh IMP is unrelated to the later IMP extensible syntax programming language developed by Irons for the CDC 6600, which was the main language used by the NSA for many years."
},
{"id": 166, 
"name": "Eiffel (programming language)",
"summary": "Eiffel is an object-oriented programming language designed by Bertrand Meyer (an object-orientation proponent and author of Object-Oriented Software Construction) and Eiffel Software. Meyer conceived the language in 1985 with the goal of increasing the reliability of commercial software development; the first version becoming available in 1986. In 2005, Eiffel became an ISO-standardized language.\nThe design of the language is closely connected with the Eiffel programming method. Both are based on a set of principles, including design by contract, command–query separation, the uniform-access principle, the single-choice principle, the open–closed principle, and option–operand separation.\nMany concepts initially introduced by Eiffel later found their way into Java, C#, and other languages. New language design ideas, particularly through the Ecma/ISO standardization process, continue to be incorporated into the Eiffel language."
},
{"id": 167, 
"name": "Elixir (programming language)",
"summary": "Elixir is a functional, concurrent, general-purpose programming language that runs on the Erlang virtual machine (BEAM). Elixir builds on top of Erlang and shares the same abstractions for building distributed, fault-tolerant applications. Elixir also provides productive tooling and an extensible design. The latter is supported by compile-time metaprogramming with macros and polymorphism via protocols.Elixir is used by companies such as PagerDuty, Discord, E-MetroTel, Pinterest, Moz, Bleacher Report, The Outline, Inverse Divvy, FarmBot and for building embedded systems. The community organizes yearly events in the United States, Europe and Japan as well as minor local events and conferences."
},
{"id": 168, 
"name": "Elm (programming language)",
"summary": "Elm is a domain-specific programming language for declaratively creating web browser-based graphical user interfaces. Elm is purely functional, and is developed with emphasis on usability, performance, and robustness. It advertises \"no runtime exceptions in practice\", made possible by the Elm compiler's static type checking."
},
{"id": 169, 
"name": "Eltron Programming Language",
"summary": "Eltron Programming Language (EPL and EPL2) is a printer control language used to produce printed paper labels for various Eltron (now Zebra) model printers. \nNewer printers support also the Zebra Programming Language (ZPL).\nEPL2 is a markup, line-at-a-time language, suitable for printing on media of reduced space, and although it supports bitmaps (and therefore, arbitrary images), its use is usually for labels including barcode information. \nEach EPL2 line starts with one or more letters (indicating the command), and may be followed by one or more comma-separated arguments. Commands and arguments are case-sensitive.\nArguments that are numeric or belong to a fixed set of options (see i.e. the reverse argument for A) are inlined, and any string or set of variable values must be surrounded by double-quotes (\" - see i.e. the text argument for A).\nAlthough the EPL2 language has a quite lengthy and complete number of commands, the most basic are:\n\nAh_pos,v_pos,rotation,font,h_mult,v_mult,reverse,\"text\" - ASCII text\nh_pos: Starting horizontal position (in points)\nv_pos: Starting vertical position (in points)\nrotation: How the text should be printed\n0: horizontal, normal\n1: 90 degrees\n2: 180 degrees\n3: 270 degrees\nfont: Font style to use. Size can be increased by h_mult, v_mult (explained following)\n1: 8x12 dots (6 pts)\n2: 10x16 dots (7 pts)\n3: 12x20 dots (10pts)\n4: 14x24 dots (12pts)\n5: 32x48 dots (24 pts)\nA-Z: Reserved for soft fonts\nh_mult: Horizontal multiplier for the font (1-9)\nv_mult: Vertical multiplier for the font (1-9)\nreverse: Whether the text should be rendered black-on-white (N) or white-on-black (R)\ntext: The text to be printed. If the text is stored in a variable or a counter, double-quotes are omitted. Variables are prefixed by V (V01-V99), counters by C (C0-C9). Current time or date can be printed by TT and TD respectively.\nBh_pos,v_pos,rotation,barcode_type,narrow_bar,wide_bar,height,human,\"value\" - Barcode\nh_pos: Starting horizontal position (in points)\nv_pos: Starting vertical position (in points)\nrotation: How the text should be printed\n0: horizontal, normal\n1: 90 degrees\n2: 180 degrees\n3: 270 degrees\nbarcode_type: Which barcode type to print; 31 barcode types are available. See the official documentation for full information.\nnarrow_bar: How wide should the narrow bar of the generated barcode be. Legal values are determined by the barcode_type.\nwide_bar: How wide should the wide bar of the generated barcode be. Legal values are determined by the barcode_type.\nheight: Printed barcode desired height (in points)\nhuman: Whether to print a human-readable form of the value below the barcode\nN Starts a new, empty label. Takes no parameters.\nP Prints the contents of the buffer\nqwidth - Sets the label width\nwidth: The label width, in points\nQlength,gap - Sets the label length (height)\nlength: The label's printable surface length, in points\ngap: The distance (in points) between two consecutive labelsOriginal Author: The R&D team led by Eddy Lee, the main author is Steven Huang."
},
{"id": 170, 
"name": "Emacs Lisp",
"summary": "Emacs Lisp is a dialect of the Lisp programming language used as a scripting language by Emacs (a text editor family most commonly associated with GNU Emacs and XEmacs). It is used for implementing most of the editing functionality built into Emacs, the remainder being written in C, as is the Lisp interpreter. Emacs Lisp is also termed Elisp, although there is also an older, unrelated Lisp dialect with that name.Users of Emacs commonly write Emacs Lisp code to customize and extend Emacs.  Other options include the Customize feature that's been in GNU Emacs since version 20.  Itself written in Emacs Lisp, Customize provides a set of preferences pages allowing the user to set options and preview their effect in the running Emacs session. When the user saves their changes, Customize simply writes the necessary Emacs Lisp code to the user's config file, which can be set to a special file that only Customize uses, to avoid the possibility of altering the user's own file.\nEmacs Lisp can also function as a scripting language, much like the Unix Bourne shell or Perl, by calling Emacs in batch mode.  In this way it may be called from the command line or via an executable file, and its editing functions, such as buffers and movement commands are available to the program just as in the normal mode. No user interface is presented when Emacs is started in batch mode; it simply executes the passed-in script and exits, displaying any output from the script."
},
{"id": 171, 
"name": "Emerald (programming language)",
"summary": "No summary available"
},
{"id": 172, 
"name": "Epigram (programming language)",
"summary": "Epigram is a functional programming language with dependent types. Epigram also refers to the IDE usually packaged with the language. Epigram's type system is strong enough to express program specifications. The goal is to support a smooth transition from ordinary programming to integrated programs and proofs whose correctness can be checked and certified by the compiler. Epigram exploits the propositions as types principle, and is based on intuitionistic type theory.\nThe Epigram prototype was implemented by Conor McBride based on joint work with James McKinna. Its development is continued by the Epigram group in Nottingham, Durham, St Andrews and Royal Holloway in the UK. The current experimental implementation of the Epigram system is freely available together with a user manual, a tutorial and some background material. The system has been used under Linux, Windows and Mac OS X.\nIt is currently unmaintained, and version 2, which was intended to implement Observational Type Theory, was never officially released but exists in GitHub. The design of Epigram and Epigram 2 have inspired the development Agda, Idris, and Coq."
},
{"id": 173, 
"name": "Erlang (programming language)",
"summary": "Erlang ( UR-lang) is a general-purpose, concurrent, functional programming language, and a garbage-collected runtime system. The term Erlang is used interchangeably with Erlang/OTP, or Open Telecom Platform (OTP), which consists of the Erlang runtime system, several ready-to-use components (OTP) mainly written in Erlang, and a set of design principles for Erlang programs.The Erlang runtime system is designed for systems with these traits:\n\nDistributed\nFault-tolerant\nSoft real-time\nHighly available, non-stop applications\nHot swapping, where code can be changed without stopping a system.The Erlang programming language has immutable data, pattern matching, and functional programming. The sequential subset of the Erlang language supports eager evaluation, single assignment, and dynamic typing.\nIt was originally proprietary software within Ericsson, developed by Joe Armstrong, Robert Virding, and Mike Williams in 1986, but was released as free and open-source software in 1998. Erlang/OTP is supported and maintained by the Open Telecom Platform (OTP) product unit at Ericsson."
},
{"id": 174, 
"name": "Es (Unix shell)",
"summary": "A Unix shell is a command-line interpreter or shell that provides a command line user interface for Unix-like operating systems.  The shell is both an interactive command language and a scripting language, and is used by the operating system to control the execution of the system using shell scripts.Users typically interact with a Unix shell using a terminal emulator; however, direct operation via serial hardware connections or Secure Shell are common for server systems.  All Unix shells provide filename wildcarding, piping, here documents, command substitution, variables and control structures for condition-testing and iteration."
},
{"id": 175, 
"name": "Escher (programming language)",
"summary": "Escher (named for M. C. Escher, \"a master of endless loops\") is a declarative programming language that supports both functional programming and logic programming models, developed by J.W. Lloyd in the mid-1990s. It was designed mostly as a research and teaching vehicle. The basic view of programming exhibited by Escher and related languages is that a program is a representation of a theory in some logic framework, and the program's execution (computation) is a deduction from the theory. The logic framework for Escher is Alonzo Church's simple theory of types.\nEscher, notably, supports I/O through a monadic type representing the 'outside world', in the style of Haskell.\nOne of the goals of Escher's designers was to support meta-programming, and so the language has comprehensive support for generating and transforming programs."
},
{"id": 176, 
"name": "Esoteric programming language",
"summary": "An esoteric programming language (sometimes shortened to esolang) is a programming language designed to test the boundaries of computer programming language design, as a proof of concept, as software art, as a hacking interface to another language (particularly functional programming or procedural programming languages), or as a joke.  The use of esoteric distinguishes these languages from programming languages that working developers use to write software. Usually, an esolang's creators do not intend the language to be used for mainstream programming, although some esoteric features, such as visuospatial syntax,  have inspired practical applications in the arts.  Such languages are often popular among hackers and hobbyists.\nUsability is rarely a goal for esoteric programming language designers—often the design leads to quite the opposite.  Their usual aim is to remove or replace conventional language features while still maintaining a language that is Turing-complete, or even one for which the computational class is unknown."
},
{"id": 177, 
"name": "Esterel",
"summary": "Esterel is a synchronous programming language  for the development of complex reactive systems. The imperative programming style of Esterel allows the simple expression of parallelism and preemption. As a consequence, it is well suited for control-dominated model designs.\nThe development of the language started in the early 1980s, and was mainly carried out by a team of Ecole des Mines de Paris and INRIA led by Gérard Berry in France. Current compilers take Esterel programs and generate C code or hardware (RTL) implementations (VHDL or Verilog).\nThe language is still under development, with several compilers out. The commercial version of Esterel is the development environment Esterel Studio. The company that commercialize it (Synfora) initiated a normalization process with the IEEE in April 2007 however the working group (P1778) dissolved March 2011. The Esterel v7 Reference Manual Version v7 30 – initial IEEE standardization proposal is publicly available."
},
{"id": 178, 
"name": "Ethereum",
"summary": "Ethereum is an open source, public, blockchain-based distributed computing platform and operating system featuring smart contract (scripting) functionality. It supports a modified version of Nakamoto consensus via transaction-based state transitions. Ether is a cryptocurrency generated by the Ethereum platform and used to compensate mining nodes for computations performed. Each Ethereum account has an ether balance and ether may be transferred from one account to another.\nEthereum provides a decentralized virtual machine, the Ethereum Virtual Machine (EVM), which can execute scripts using an international network of public nodes. The virtual machine's instruction set, in contrast to others like Bitcoin Script, is Turing-complete. \"Gas\", an internal transaction pricing mechanism, is used to mitigate spam and allocate resources on the network.Ethereum was proposed in late 2013 by Vitalik Buterin, a cryptocurrency researcher and programmer. Development was funded by an online crowdsale that took place between July and August 2014. The system then went live on 30 July 2015, with 72 million coins \"premined\". This accounts for about 68 percent of the total circulating supply in 2019.In 2016, as a result of the exploitation of a flaw in The DAO project's smart contract software, and subsequent theft of $50 million worth of ether, Ethereum was split into two separate blockchains – the new separate version became Ethereum (ETH) with the theft reversed, and the original continued as Ethereum Classic (ETC).\n\n"
},
{"id": 179, 
"name": "Etoys (programming language)",
"summary": "Etoys is a child-friendly computer environment and object-oriented prototype-based programming language for use in education.\nEtoys is a media-rich authoring environment with a scripted object model for many different objects that runs on different platforms and is free and open source."
},
{"id": 180, 
"name": "Euclid (programming language)",
"summary": "Euclid is an imperative programming language for writing verifiable programs. It was designed by Butler Lampson and associates at the Xerox PARC lab in the mid-1970s. The implementation was led by Ric Holt at the University of Toronto and James Cordy was the principal programmer for the first implementation of the compiler. It was originally designed for the Motorola 6809 microprocessor. It was considered innovative for the time; the compiler development team had a $2 million budget over 2 years and was commissioned by the Defense Advanced Research Projects Agency of the U.S. Department of Defense and the Canadian Department of National Defence. It was used for a few years at I. P. Sharp Associates, MITRE Corporation, SRI International and various other international institutes for research in systems programming and secure software systems.\nEuclid is descended from the Pascal programming language. Functions in Euclid are closed scopes, may not have side effects, and must explicitly declare imports. Euclid also disallows gotos, floating point numbers, global assignments, nested functions and aliases, and none of the actual parameters to a function can refer to the same thing. Euclid implements modules as types. Descendants of Euclid include the Mesa programming language, the Concurrent Euclid programming language and the Turing programming language."
},
{"id": 181, 
"name": "Euler (programming language)",
"summary": "Euler is a programming language created by Niklaus Wirth and Helmut Weber, conceived as an extension and generalization of ALGOL 60. The designers' goal was to create a language:\n\nwhich was simpler, and yet more flexible, than ALGOL 60\nthat was a useful programming language processed with reasonable efficiency\nthat can be defined with rigorous formalityAvailable sources indicate that Euler was operational by 1965."
},
{"id": 182, 
"name": "Euphoria (programming language)",
"summary": "Euphoria is a programming language originally created by Robert Craig of Rapid Deployment Software in Toronto, Ontario, Canada. Initially developed (though not publicly released) on the Atari ST, the first commercial release was for the 16-bit DOS platform and was proprietary. In 2006, with the release of version 3, Euphoria became open-source software. The openEuphoria Group continues to administer and develop the project.  In December 2010, the openEuphoria Group released version 4 of openEuphoria along with a new identity and mascot for the project. OpenEuphoria is currently available for Windows, Linux, macOS and three flavors of *BSD.\nEuphoria is a general-purpose high-level imperative-procedural interpreted language. A translator generates C source code and the GNU compiler collection (GCC) and Open Watcom compilers are supported. Alternatively, Euphoria programs may be bound with the interpreter to create stand-alone executables. A number of graphical user interface (GUI) libraries are supported including Win32lib and wrappers for wxWidgets, GTK+ and IUP. Euphoria has a simple built-in database and wrappers for a variety of other databases."
},
{"id": 183, 
"name": "EusLisp Robot Programming Language",
"summary": "EusLisp is a Lisp-based programming system. Built on the basis of object orientation, it is designed specifically for developing robotics software. The first version of it ran in 1986 on Unix-System5/Ustation-E20."
},
{"id": 184, 
"name": "Executable UML",
"summary": "Executable UML (xtUML or xUML) is both a software development method and a highly abstract software language. It was described for the first time in 2002 in the book \"Executable UML: A Foundation for Model-Driven Architecture\". The language \"combines a subset of the UML (Unified Modeling Language) graphical notation with executable semantics and timing rules.\" The Executable UML method is the successor to the Shlaer–Mellor method.Executable UML models \"can be run, tested, debugged, and measured for performance.\", and can be compiled into a less abstract programming language to target a specific implementation.  Executable UML supports model-driven architecture (MDA) through specification of platform-independent models, and the compilation of the platform-independent models into platform-specific models."
},
{"id": 185, 
"name": "Executive Systems Problem Oriented Language",
"summary": "This article is about the programming language. For the university, see Escuela Superior Politecnica del Litoral.The Executive Systems Problem Oriented Language (ESPOL) is a programming language, a superset of ALGOL 60, that provides abilities of what would later be termed a system programming language or machine oriented high order language (mohol), such as interrupting a processor on a multiprocessing system (the Burroughs large systems were multiprocessor systems). ESPOL was used to write the Master Control Program (MCP) on Burroughs computer systems from the B5000 to the B6700. The single-pass compiler for ESPOL could compile over 250 lines per second.\nESPOL was superseded by NEWP."
},
{"id": 186, 
"name": "Ezhil (programming language)",
"summary": "No summary available"
},
{"id": 187, 
"name": "F (programming language)",
"summary": "F# (pronounced F sharp) is a general purpose, strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. F# is most often used as a cross-platform Common Language Infrastructure (CLI) language, but it can also generate JavaScript and graphics processing unit (GPU) code.F# is developed by the F# Software Foundation, Microsoft and open contributors. An open source, cross-platform compiler for F# is available from the F# Software Foundation. F# is also a fully supported language in Visual Studio and Xamarin Studio. Other tools supporting F# development include Mono, MonoDevelop, SharpDevelop, MBrace, and WebSharper. Plug-ins supporting F# exist for many widely used editors, most notably the Ionide extension for Atom and Visual Studio Code, and integrations for other editors such as Vim, Emacs, Sublime Text, and Rider.\nF# is a member of the ML language family and originated as a .NET Framework implementation of a core of the programming language OCaml. It has also been influenced by C#, \nPython, Haskell, Scala, and Erlang."
},
{"id": 188, 
"name": "F Sharp (programming language)",
"summary": "F# (pronounced F sharp) is a general purpose, strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. F# is most often used as a cross-platform Common Language Infrastructure (CLI) language, but it can also generate JavaScript and graphics processing unit (GPU) code.F# is developed by the F# Software Foundation, Microsoft and open contributors. An open source, cross-platform compiler for F# is available from the F# Software Foundation. F# is also a fully supported language in Visual Studio and Xamarin Studio. Other tools supporting F# development include Mono, MonoDevelop, SharpDevelop, MBrace, and WebSharper. Plug-ins supporting F# exist for many widely used editors, most notably the Ionide extension for Atom and Visual Studio Code, and integrations for other editors such as Vim, Emacs, Sublime Text, and Rider.\nF# is a member of the ML language family and originated as a .NET Framework implementation of a core of the programming language OCaml. It has also been influenced by C#, \nPython, Haskell, Scala, and Erlang."
},
{"id": 189, 
"name": "F* (programming language)",
"summary": "TVN Fabula is a Polish TV channel launched April 16, 2015.\nThe channel assigns series of TVN, movie trailers, foreign series and own productions. It also broadcasts programs on culture, showbiz and talk show with actors. The channel is broadcast in HDTV (1080i). The viewer has the option to watch movies with a Polish voice over or with original soundtrack and Polish subtitles.The station broadcasts daily binge-watching series, meaning several episodes of one series in a row."
},
{"id": 190, 
"name": "F-Script (programming language)",
"summary": "F-Script is an object-oriented scripting programming language for Apple's macOS operating system developed by Philippe Mougin.  F-Script is an interactive language based on Smalltalk, using macOS's native Cocoa API."
},
{"id": 191, 
"name": "FAUST (programming language)",
"summary": "FAUST (Functional AUdio STream) is a domain-specific purely functional programming language for implementing signal processing algorithms in the form of libraries, audio plug-ins, or standalone applications. A FAUST program denotes a signal processor: a mathematical function that is applied to some input signal and then fed out."
},
{"id": 192, 
"name": "FFP (programming language)",
"summary": "FP (short for functional programming) is a programming language created by John Backus to support the function-level programming paradigm. This allows eliminating named variables. The language was introduced in Backus's 1977 Turing Award paper, \"Can Programming Be Liberated from the von Neumann Style?\", subtitled \"a functional style and its algebra of programs.\" The paper sparked interest in functional programming research, eventually leading to modern functional languages, and not the function-level paradigm Backus had hoped.\nIn his Turing award paper, Backus described how the FP style is different from languages based on the lamba calculus:\n\nAn FP system is based on the use of a fixed set of combining forms called functional forms. These, plus simple simple definitions, are the only means of building new functions from existing ones; they use no variables or substitutions rules, and they become the operations of an associated algebra of programs. All the functions of an FP system are of one type: they map objects onto objects and always take a single argument.\nFP itself never found much use outside of academia. In the 1980s Backus created a successor language, FL, which remained a research project."
},
{"id": 193, 
"name": "FL (programming language)",
"summary": "FL (short for Function Level) is a functional programming language created at the IBM Almaden Research Center by John Backus, John Williams, and Edward Wimmers in the 1980s and documented in a report from 1989. FL was designed as a successor of Backus' earlier FP language, providing specific support for what Backus termed function-level programming.\nFL is a dynamically typed strict functional programming language with throw and catch exception semantics much like in ML. Each function has an implicit history argument which is used for doing things like strictly functional input/output (I/O), but is also used for linking to C code. For doing optimization, there exists a type-system which is an extension of Hindley–Milner type inference."
},
{"id": 194, 
"name": "FLOW-MATIC",
"summary": "FLOW-MATIC, originally known as B-0 (Business Language version 0), was the first English-like data processing language. It was developed for the UNIVAC I at Remington Rand under Grace Hopper from 1955 to 1959, and helped shape the development of COBOL."
},
{"id": 195, 
"name": "FOCAL (programming language)",
"summary": "FOCAL is an interactive interpreted programming language based on JOSS and primarily used on Digital Equipment Corporation (DEC) PDP-series machines. The name is an acronym for Formulating On-Line Calculations in Algebraic Language.FOCAL is very similar to JOSS in terms of the commands it supports and the general syntax of the language. It differs in that many of JOSS' advanced features like ranges and user-defined functions were removed to simplify the parser. Some of the keywords were renamed so that they all start with a unique first letter. This allows users to type in programs using single-character statements, further reducing memory needs. This was an important consideration on the PDP-8, which was often limited to a few kilobytes (KB), and FOCAL was popular on DEC machines for this reason.\nLike JOSS, and later BASICs, FOCAL on the PDP-8 was a complete environment that included a line editor, the interpreter, and input/output routines. The package as a whole was called FOCAL-8, which also ran on the PDP-5 and PDP-12. When ported to the PDP-11, the resulting FOCAL-11 relied on the underlying operating system, RT-11, to provide file support and editing. The language definition was updated twice, to FOCAL-69 and a very slightly modified FOCAL-71.\nFOCAL is historically notable as the language for the original versions of the early video games Hamurabi and Lunar Lander. Both were later ported to BASIC where they became much more famous. FOCAL was not popular outside the PDP platform and largely disappeared during the move to the VAX-11. It had a strong revival in the Soviet Union where PDP-11 clones were used as educational and home computers."
},
{"id": 196, 
"name": "FOCUS",
"summary": "No summary available"
},
{"id": 197, 
"name": "FOIL (programming language)",
"summary": "FOIL was the name for two different programming languages."
},
{"id": 198, 
"name": "FORMAC (programming language)",
"summary": "FORMAC, acronym of FORmula MAnipulation Compiler, was an early computer algebra system based on FORTRAN.  It was developed by Jean E. Sammet.\nFORMAC supported computation, manipulation, and use of symbolic expressions."
},
{"id": 199, 
"name": "FP (programming language)",
"summary": "FP (short for functional programming) is a programming language created by John Backus to support the function-level programming paradigm. This allows eliminating named variables. The language was introduced in Backus's 1977 Turing Award paper, \"Can Programming Be Liberated from the von Neumann Style?\", subtitled \"a functional style and its algebra of programs.\" The paper sparked interest in functional programming research, eventually leading to modern functional languages, and not the function-level paradigm Backus had hoped.\nIn his Turing award paper, Backus described how the FP style is different from languages based on the lamba calculus:\n\nAn FP system is based on the use of a fixed set of combining forms called functional forms. These, plus simple simple definitions, are the only means of building new functions from existing ones; they use no variables or substitutions rules, and they become the operations of an associated algebra of programs. All the functions of an FP system are of one type: they map objects onto objects and always take a single argument.\nFP itself never found much use outside of academia. In the 1980s Backus created a successor language, FL, which remained a research project."
},
{"id": 200, 
"name": "Factor (programming language)",
"summary": "Factor is a stack-oriented programming language created by Slava Pestov. Factor is dynamically typed and has automatic memory management, as well as powerful metaprogramming features. The language has a single implementation featuring a self-hosted optimizing compiler and an interactive development environment. The Factor distribution includes a large standard library."
},
{"id": 201, 
"name": "Fantom (programming language)",
"summary": "No summary available"
},
{"id": 202, 
"name": "Fjölnir (programming language)",
"summary": "Fjölnir (also Fjolnir or Fjoelnir) is a programming language developed by professor Snorri Agnarsson of computer science at Háskóli Íslands (University of Iceland) that was mostly used in the 1980s. The source files usually have the extension fjo or sma."
},
{"id": 203, 
"name": "Flavors (programming language)",
"summary": "No summary available"
},
{"id": 204, 
"name": "Flex (language)",
"summary": "Flex language is flexibility inserted into a syndicated loan contract that allows the arranging bank to alter the terms of the borrowing in order to attract enough lenders to finance the loan.  These alterations could include increases in the interest rate, changes in covenants, or increases in prepayment penalties."
},
{"id": 205, 
"name": "Formula language",
"summary": "The Formula language is a scripting language used by Lotus Notes.\nIt is often referred to as @Formula language (pronounced at-formula) because many language elements start with the @-character. Here is an example of a selection formula:\n\nSELECT @NoteId = \"NT0050D26\"\n\nIt was created by Ray Ozzie during the early development of Lotus Notes. He borrowed the compiler and decompiler from the Lotus 1-2-3 spreadsheet, but unlike the spreadsheet language Formula Language was designed primarily for string and list processing, not numerical processing.  It was originally a Functional programming language with unique text list-handling features inspired by Ray Ozzie's prior use of Icon and Lisp.\nThe Formula language engine was rewritten by Damien Katz for Notes and Domino 6. New features were added to the language, such as looping and dynamic execution, and performance was improved.The Formula language has two parts:\n\n@Functions for calculations and simple logic\n@Commands for performing actions in the user interface@Functions can be used in several places throughout Lotus Notes. The most important uses are:\n\nto select documents to show to the user in a view (a kind of index) or to select documents for further processing. In this case, the formula will evaluate to a 'true' (selected) or 'false' value (not selected) for each document.\nto provide default values for fields, to transform the data entered by the user (like stripping off redundant spaces) and to validate this data.\nto get a list of values from a Notes database or even from a relational database (using ODBC). This may be used to provide a user with a list of values to choose from.\nto process a set of documents. The formula is placed in an agent, a program or macro that can be started by a user or by the Notes server according to a schedule. When the agent is triggered, the formula executes for each selected document (this a very limited form of a loop). This is an efficient way of changing lots of documents, if the logic is not too complicated. In case of complicated changes, LotusScript is used.@Commands are like menu commands: they perform actions in the Lotus Notes client. Examples of actions are:\n\nopening a Notes database\ncreating an e-mail\nputting the cursor in a specific data-entry field\nclosing a window\nstarting an agent@Commands are primarily used in formulas that are triggered by user action, such as in button formulas. It is possible to combine them with @Functions, for example by making execution of an @command conditional on a field value."
},
{"id": 206, 
"name": "Forth (programming language)",
"summary": "Forth is an imperative stack-based computer programming language and environment originally designed by Charles \"Chuck\" Moore. Language features include structured programming, reflection (the ability to examine and modify program structure during execution), concatenative programming (functions are composed with juxtaposition) and extensibility (the programmer can create new commands). Although not an acronym, the language's name is sometimes spelled with all capital letters as FORTH, following the customary usage during its earlier years.\nA procedural programming language without type checking, Forth features both interactive execution of commands (making it suitable as a shell for systems that lack a more formal operating system) and the ability to compile sequences of commands for later execution. For much of Forth's existence, the standard technique was to compile to threaded code, but there are modern implementations that generate optimized machine code like other language compilers.\nForth is used in the Open Firmware boot loader, in space applications such as the Philae spacecraft, and other embedded systems which involve interaction with hardware. The bestselling 1986 computer game Starflight, from Electronic Arts, was written with a custom Forth.The free software Gforth implementation is actively maintained, as are several commercially supported systems."
},
{"id": 207, 
"name": "Fortran",
"summary": "Fortran (; formerly FORTRAN, derived from Formula Translation) is a general-purpose, compiled  imperative programming language that is especially suited to numeric computation and scientific computing.\nOriginally developed by IBM in the 1950s for scientific and engineering applications, FORTRAN came to dominate this area of programming early on and has been in continuous use for over six decades in computationally intensive areas such as numerical weather prediction, finite element analysis, computational fluid dynamics, computational physics, crystallography and computational chemistry. It is a popular language for high-performance computing and is used for programs that benchmark and rank the world's fastest supercomputers.Fortran encompasses a lineage of versions, each of which evolved to add extensions to the language while usually retaining compatibility with prior versions.  Successive versions have added support for structured programming\nand processing of character-based data (FORTRAN 77), array programming, modular programming and generic programming (Fortran 90), high performance Fortran (Fortran 95), object-oriented programming (Fortran 2003), concurrent programming (Fortran 2008), and native parallel computing capabilities (Coarray Fortran 2008/2018).\nFortran's design was the basis for many other programming languages. Among the better known is BASIC, which is based on FORTRAN II with a number of syntax cleanups, notably better logical structures, and other changes to work more easily in an interactive environment."
},
{"id": 208, 
"name": "Fortress (programming language)",
"summary": "Fortress is a discontinued experimental programming language for high-performance computing, created by Sun Microsystems with funding from DARPA's High Productivity Computing Systems project. One of the language designers was Guy L. Steele Jr., whose previous work includes Scheme, Common Lisp, and Java."
},
{"id": 209, 
"name": "Franz Lisp",
"summary": "In computer programming, Franz Lisp is a discontinued Lisp programming language system written at the University of California, Berkeley (UC Berkeley, UCB) by Professor Richard Fateman and several students, based largely on Maclisp and distributed with the Berkeley Software Distribution (BSD) for the Digital Equipment Corporation (DEC) VAX minicomputer. Piggybacking on the popularity of the BSD package, Franz Lisp was probably the most widely distributed and used Lisp system of the 1970s and 1980s.The name is a pun on composer Franz Liszt.\nIt was written specifically to be a host for running the Macsyma computer algebra system on VAX. The project began at the end of 1978, soon after UC Berkeley took delivery of their first VAX 11/780 (named Ernie CoVax, after Ernie Kovacs, the first of many systems with pun names at UCB). Franz Lisp was available free of charge to educational sites, and was also distributed on Eunice, a Berkeley Unix emulator that ran on VAX VMS."
},
{"id": 210, 
"name": "Friendly interactive shell",
"summary": "The friendly interactive shell (fish) is a Unix shell that attempts to be more interactive and user-friendly than those with a longer history (i.e. most other Unix shells) or those formulated as function-compatible replacements for the aforementioned (e.g. zsh, the Falstad shell). The design goal of fish is to give the user a rich set of powerful features in a way that is easy to discover, remember, and use. fish is considered an \"exotic shell\", in that its syntax derives from neither the Bourne shell (ksh, bash, zsh) nor the C shell (csh, tcsh). Also unlike previous shells, which disable certain features by default to save system resources, fish enables all features by default."
},
{"id": 211, 
"name": "Futhark (programming language)",
"summary": "Futhark is a functional data parallel array programming language originally developed at DIKU as part of the HIPERFIT project.  It focuses on enabling data parallel programs written in a functional style to be executed with high performance on massively parallel hardware, in particular on GPUs.  Futhark is strongly inspired by NESL, but imposes constraints on how parallelism can be expressed in order to enable more aggressive compiler optimisations.  In particular, irregular nested data parallelism is not supported."
},
{"id": 212, 
"name": "G-code",
"summary": "G-code (also RS-274), which has many variants, is the common name for the most widely used numerical control (NC) programming language. It is used mainly in computer-aided manufacturing to control automated machine tools.\nG-code is a language in which people tell computerized machine tools how to make something. The \"how\" is defined by g-code instructions provided to a machine controller (industrial computer) that tells the motors where to move, how fast to move, and what path to follow. The two most common situations are that, within a machine tool such as a lathe or mill, a cutting tool is moved according to these instructions through a toolpath cutting away material to leave only the finished workpiece and/or, an unfinished workpiece is precisely positioned in any of up to 9 axes around the 3 dimensions relative to a toolpath and, either or both can move relative to each other. The same concept also extends to noncutting tools such as forming or burnishing tools, photoplotting, additive methods such as 3D printing, and measuring instruments."
},
{"id": 213, 
"name": "GAP computer algebra system",
"summary": "GAP (Groups, Algorithms and Programming) is a computer algebra system for computational discrete algebra with particular emphasis on computational group theory."
},
{"id": 214, 
"name": "GDScript",
"summary": "Godot is a 2D and 3D, cross-platform, free and open-source game engine released under the MIT license. It was initially developed for several companies in Latin America prior to its public release. The development environment runs on Linux, macOS, and Windows. Godot can create games targeting the PC, mobile and web platforms."
},
{"id": 215, 
"name": "GEORGE (programming language)",
"summary": "GEORGE is a programming language invented by Charles Leonard Hamblin in 1957.It was designed around a push-down pop-up stack for arithmetic operations, and employed reverse Polish notation.\nThe language included loops, subroutines, conditionals, vectors, and matrices.\nAlgebraic expressions were written in reverse Polish notation; thus, {missing info}  was written a b +, and similarly for the other arithmetic operations of subtraction, multiplication, and division.\nThe algebraic expression{missing info}  was written a x dup × × b x × + c +, where 'dup' meant 'duplicate the value'.\nFollowing the reverse Polish form, an assignment statement to evaluate the formula {missing info} was written as a x dup × × b x × + c + (y).\nThe computer evaluated the expression as follows: the values of a, then x, were pushed onto the top of the accumulator stack; 'dup' caused a copy of the top-most value (x) to be pushed onto the top of the accumulator stack; Multiply (×) caused the top two values, namely, x and x, to be removed (popped) and multiplied, returning the product to the top of the accumulator stack.  The second multiply (×) then caused the top two values on the stack (namely, a and x**2) to be popped and multiplied, and the product (a×x**2) to be pushed onto the top of the accumulator stack.  And so on the remaining components of the expression.  The final operation, namely (y), returned the value of the expression to storage without changing the status of the accumulator stack.\nAssuming that the value on the top of the accumulator stack was not required immediately, it would be removed (cleared) by using the operator (;).\nThe following program reads in eight values and forms their sum:\n\n0,\n1, 8 rep (j)\n   R +\n]\n(P)\n\nThe first line initialises the sum by pushing the value zero onto the top of the accumulator stack.\nThe second line introduces a loop, is spoken as \"for 1 to 8 repeat for j\", and is terminated by the square bracket.\nIn the third line, R causes one number to be read in and pushed onto the top of the accumulator stack, and the plus sign (+) causes that value to be added to the (partial) sum, leaving only the partial sum on the top of the accumulator stack.\nAfter the loop terminates, the (P) causes the final sum to be punched on a card.Manipulation of vectors and matrices requires subscript notation.  In GEORGE, the subscript(s) preceded the vector or matrix name.  Thus A(j) was written j | A.\nThe following program reads in vector a of 10 values, then forms the squares of those values, and finally prints those values.\n\n1, 10 R1 (a)\n1, 10 rep (j)\n   j | a dup * j | (a) ;\n]\n1, 10 P1 (a)\n\nIn the program, the first line is a vector read that reads in the ten values into a(1) through a(10).\nThe second line introduces a loop to run through the ten values of j.\nThe third line fetches a(j), duplicates it, multiplies those two values giving the square, and then stores it in  a(j).  Note the semicolon (;), which clears (or cancels) the top entry in the accumulator stack.  Were this not done, the accumulator would gradually fill up with the squares of the values.\nThe final line is a vector punch (i.e., print) to write out the ten squares.The above GEORGE coding table assisted in transcribing a program onto punch cards.\nConditional operations were written as jumps, as follows:\nif a > 0 go to 5 (which transfers to label 5 if a is greater than zero)\nwould be written\n\n0 a > 5 ↑ \nLabel 5 was indicated by including *5 elsewhere in the program.\nUnconditional transfers were written 5↑\nSubroutine calls were made with the down arrow, .g., to call subroutine labelled 17, write 17↓, where the label 17 was encoded using column 3 of the above table."
},
{"id": 216, 
"name": "GLSL",
"summary": "Glass is a non-crystalline, often transparent amorphous solid, that has widespread practical, technological, and decorative use in, for example, window panes, tableware, optics, and optoelectronics. The most familiar, and historically the oldest, types of manufactured glass are \"silicate glasses\" based on the chemical compound silica (silicon dioxide, or quartz), the primary constituent of sand.  The term glass, in popular usage, is often used to refer only to this type of material, which is familiar from use as window glass and glass bottles. Of the many silica-based glasses that exist, ordinary glazing and container glass is formed from a specific type called soda-lime glass, composed of approximately 75% silicon dioxide (SiO2), sodium oxide (Na2O) from sodium carbonate (Na2CO3), calcium oxide (CaO), also called lime, and several minor additives."
},
{"id": 217, 
"name": "GNU E",
"summary": "GNU E is an extension of C++ designed for writing software systems to\nsupport  persistent applications. It was designed as part of the\nExodus project."
},
{"id": 218, 
"name": "GNU Octave",
"summary": "GNU Octave is software featuring a high-level programming language, primarily intended for numerical computations. Octave helps in solving linear and nonlinear problems numerically, and for performing other numerical experiments using a language that is mostly compatible with MATLAB. It may also be used as a batch-oriented language.\nSince it is part of the GNU Project, it is free software under the terms of the GNU General Public License.\nOctave is one of the major free alternatives to MATLAB, others being Scilab and FreeMat. Scilab, however, puts less emphasis on (bidirectional) syntactic compatibility with MATLAB than Octave does."
},
{"id": 219, 
"name": "GPSS",
"summary": "General Purpose Simulation System (GPSS) is a discrete time simulation general-purpose programming language, where a simulation clock advances in discrete steps. A system is modelled as transactions enter the system and are passed from one service (represented by blocks) to another. It is used primarily as a process flow oriented simulation language; this is particularly well-suited for problems such as a factory."
},
{"id": 220, 
"name": "GRASS (programming language)",
"summary": "GRASS (GRAphics Symbiosis System) is a programming language created to script 2D vector graphics animations. GRASS was similar to BASIC in syntax, but added numerous instructions for specifying 2D object animation, including scaling, translation, rotation and color changes over time. It quickly became a hit with the artistic community who were experimenting with the new medium of computer graphics, and is most famous for its use by Larry Cuba to create the original \"attacking the Death Star will not be easy\" animation in Star Wars (1977). A later version that was adapted to support raster graphics was known as ZGrass."
},
{"id": 221, 
"name": "Game Maker Language",
"summary": "GameMaker Studio (formerly Animo until 1999, Game Maker until 2011, GameMaker until 2012, and GameMaker: Studio until 2017) is a cross-platform game engine developed by YoYo Games.\nGameMaker accommodates the creation of cross-platform and multi-genre video games using a custom drag-and-drop visual programming language or a scripting language known as Game Maker Language, which can be used to develop more advanced games that could not be created just by using the drag and drop features. GameMaker was originally designed to allow novice computer programmers to be able to make computer games without much programming knowledge by use of these actions. Recent versions of software also focus on appealing to advanced developers."
},
{"id": 222, 
"name": "Game Oriented Assembly Lisp",
"summary": "Game Oriented Assembly Lisp (GOAL) is a programming language, a dialect of the language Lisp, made for video games developed by Andy Gavin and the Jak and Daxter team at the company Naughty Dog.\nIt was written using Allegro Common Lisp and used in the development of the entire Jak and Daxter series of games."
},
{"id": 223, 
"name": "GameMonkey Script",
"summary": "GameMonkey Script is a small, cross-platform scripting language designed for embedding into games. GameMonkey bears many similarities to Lua, except the syntax is more similar to that of C."
},
{"id": 224, 
"name": "General Algebraic Modeling System",
"summary": "The General Algebraic Modeling System (GAMS) is a high-level modeling system for mathematical optimization. GAMS is designed for modeling and solving linear, nonlinear, and mixed-integer optimization problems. The system is tailored for complex, large-scale modeling applications and allows the user to build large maintainable models that can be adapted to new situations. The system is available for use on various computer platforms. Models are portable from one platform to another.\nGAMS was the first algebraic modeling language (AML) and is formally similar to commonly used fourth-generation programming languages. GAMS contains an integrated development environment (IDE) and is connected to a group of third-party optimization solvers. Among these solvers are BARON, COIN-OR solvers, CONOPT, CPLEX, DICOPT, Gurobi, MOSEK, SNOPT, SULUM, and  XPRESS.\nGAMS allows the users to implement a sort of hybrid algorithm combining different solvers. Models are described in concise, human-readable algebraic statements. GAMS is among the most popular input formats for the NEOS Server. Although initially designed for applications related to economics and management science, it has a community of users from various backgrounds of engineering and science."
},
{"id": 225, 
"name": "Generational list of programming languages",
"summary": "This is a \"genealogy\" of programming languages. Languages are categorized under the ancestor language with the strongest influence. Those ancestor languages are listed in alphabetical order. Any such categorization has a large arbitrary element, since programming languages often incorporate major ideas from multiple sources."
},
{"id": 226, 
"name": "Genie (programming language)",
"summary": "Genie is a modern, general-purpose high-level programming language in development since 2008. It was designed as an alternative, simpler and cleaner dialect for the Vala compiler, while preserving the same functionality of the Vala language. Genie uses the same compiler and libraries as Vala; the two can indeed be used alongside each other. The differences are only syntactic.\nGenie's syntax is derived from numerous modern languages like Python, Boo, D and Delphi. In the vein of Pascal and Python, Genie uses indentation rather than curly brackets to delimit blocks.\nLike Vala, Genie uses the GObject type system to create classes and interfaces declared in Genie source code, without imposing additional runtime requirements (i.e., unlike Python, Java or C#, it does not require a virtual machine).\nGenie allows access to C libraries, especially those based in GObject (like GTK), without using a different application binary interface (ABI). During compilation, the code is first translated to C source and header files, which are then compiled to platform-specific machine code using any available C compiler like GCC, thus allowing cross-platform software development.\nPrograms developed in Vala and Genie don't depend on the GNOME Desktop Environment, usually requiring only GLib."
},
{"id": 227, 
"name": "Geometric Description Language",
"summary": "In computer-aided design, Geometric Description Language (GDL) is the programming language of ArchiCAD library parts. GSM is the file format of these CAD objects."
},
{"id": 228, 
"name": "Go (programming language)",
"summary": "Go, also known as Golang, is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency.There are two major implementations:\n\nGoogle's self-hosting compiler toolchain targeting multiple operating systems, mobile devices, and WebAssembly.\ngccgo, a GCC frontend.A third party transpiler, GopherJS, compiles Go to JavaScript for front-end web development."
},
{"id": 229, 
"name": "Go! (programming language)",
"summary": "Go, also known as Golang, is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson. Go is syntactically similar to C, but with memory safety, garbage collection, structural typing, and CSP-style concurrency.There are two major implementations:\n\nGoogle's self-hosting compiler toolchain targeting multiple operating systems, mobile devices, and WebAssembly.\ngccgo, a GCC frontend.A third party transpiler, GopherJS, compiles Go to JavaScript for front-end web development."
},
{"id": 230, 
"name": "Golo (programming language)",
"summary": "Golo is computer software, a programming language for the Java virtual machine (JVM). It is simple, with dynamic, weak typing. It was created in 2012 as part of the research activities of the DynaMid group of the Centre of Innovation in Telecommunications and Integration of service (CITI) Laboratory at Institut national des sciences appliquées de Lyon (INSA). It is distributed as free and open-source software under the Eclipse Public License 2.0."
},
{"id": 231, 
"name": "Google Apps Script",
"summary": "Apps Script is a scripting platform developed by Google for light-weight application development in the G Suite platform. Google Apps Script was initially developed by Mike Harm as a side project whilst working as a developer on Google Sheets. Google Apps Script was first publicly announced in May 2009 when a beta testing program was announced by Jonathan Rochelle, then Product Manager, Google Docs. In August 2009 Google Apps Script was subsequently made available to all Google Apps Premier and Education Edition customers. It is based on JavaScript 1.6, but also includes some portions of 1.7 and 1.8 and a subset of the ECMAScript 5 API. Apps Script projects run server-side on Google's infrastructure. According to Google, Apps Script \"provides easy ways to automate tasks across Google products and third party services.\" Apps Script is also the tool that powers the add-ons for Google Docs, Sheets and Slides."
},
{"id": 232, 
"name": "Gosu (programming language)",
"summary": "Gosu is a statically-typed general-purpose programming language that runs on the Java Virtual Machine. Its influences include Java, C#, and ECMAScript.  Development of Gosu began in 2002 internally for Guidewire Software, and the language saw its first community release in 2010 under the Apache 2 license.Gosu can serve as a scripting language, having free-form Program types (.gsp files) for scripting as well as statically verified Template files (.gst files).  Gosu can optionally execute these and all other types directly from source without precompilation, which also distinguishes it from other static languages."
},
{"id": 233, 
"name": "Grasshopper 3D",
"summary": "Grasshopper is a visual programming language and environment that runs within the Rhinoceros 3D computer-aided design (CAD) application. The program was created by David Rutten at Robert McNeel & Associates. Programs are created by dragging components onto a canvas.  The outputs to these components are then connected to the inputs of subsequent components.\n\nGrasshopper is primarily used to build generative algorithms, such as for generative art. Many of Grasshopper's components create 3D geometry. Programs may also contain other types of algorithms including numeric, textual, audio-visual and haptic applications.Advanced uses of Grasshopper include parametric modelling for structural engineering, parametric modelling for architecture and fabrication, lighting performance analysis for eco-friendly architecture and building energy consumption.The first version of Grasshopper, then called Explicit History, was released in September 2007. Grasshopper has become part of the standard Rhino toolset in Rhino 6.0 and later.\nAEC Magazine stated that Grasshopper is \"Popular among students and professionals, McNeel Associate’s Rhino modelling tool is endemic in the architectural design world. The new Grasshopper environment provides an intuitive way to explore designs without having to learn to script.\" Research supporting this claim has come from product design and architecture."
},
{"id": 234, 
"name": "Groovy (programming language)",
"summary": "Apache Groovy is a Java-syntax-compatible object-oriented programming language for the Java platform. It is both a static and dynamic language with features similar to those of Python, Ruby, and Smalltalk. It can be used as both a programming language and a scripting language for the Java Platform, is compiled to Java virtual machine (JVM) bytecode, and interoperates seamlessly with other Java code and libraries. Groovy uses a curly-bracket syntax similar to Java's. Groovy supports closures, multiline strings, and expressions embedded in strings. Much of Groovy's power lies in its AST transformations, triggered through annotations.\nGroovy 1.0 was released on January 2, 2007, and Groovy 2.0 in July, 2012. Since version 2, Groovy can be compiled statically, offering type inference and performance near that of Java. Groovy 2.4 was the last major release under Pivotal Software's sponsorship which ended in March 2015. Groovy 2.5.8 is the latest stable version of Groovy.\nGroovy has since changed its governance structure to a Project Management Committee in the Apache Software Foundation."
},
{"id": 235, 
"name": "Gödel (programming language)",
"summary": "Gödel is a declarative, general-purpose programming language that adheres to the logic programming paradigm. It is a strongly typed language, the type system being based on many-sorted logic with parametric polymorphism. It is named after logician Kurt Gödel."
},
{"id": 236, 
"name": "HAGGIS",
"summary": "Haggis is a savoury pudding containing sheep's pluck (heart, liver, and lungs), minced with onion, oatmeal, suet, spices, and salt, mixed with stock, and cooked while traditionally encased in the animal's stomach though now often in an artificial casing instead. According to the 2001 English edition of the Larousse Gastronomique: \"Although its description is not immediately appealing, haggis has an excellent nutty texture and delicious savoury flavour\".It is believed that food similar to haggis (though not so named)—perishable offal quickly cooked inside an animal's stomach, all conveniently available after a hunt—was eaten from ancient times.Although the name \"hagws\" or \"hagese\" was first recorded in England c. 1430, the dish is considered traditionally of Scottish origin. It is even the national dish, as a result of Scots poet Robert Burns' poem Address to a Haggis of 1787. Haggis is traditionally served with \"neeps and tatties\", boiled and mashed separately, and a dram (a glass of Scotch whisky), especially as the main course of a Burns Supper."
},
{"id": 237, 
"name": "HAL/S",
"summary": "HAL/S (High-order Assembly Language/Shuttle)  is a real-time aerospace programming language compiler and cross-compiler for avionics applications used by NASA and associated agencies (JPL, etc.). It has been used in many U.S. space projects since 1973 and its most significant use was in the Space Shuttle program (approximately 85% of the Shuttle software is coded in HAL/S).  It was designed by Intermetrics in 1972 for NASA and delivered in 1973. HAL/S is written in XPL, a dialect of PL/I. Although HAL/S is designed primarily for programming on-board computers, it is general enough to meet nearly all the needs in the production, verification, and support of aerospace and other real-time applications. According to documentation from 2005, it is been maintained by the HAL/S project of United Space Alliance."
},
{"id": 238, 
"name": "Hack (programming language)",
"summary": "Hack is a programming language for the HipHop Virtual Machine (HHVM), created by Facebook as a dialect of PHP. The language implementation is open-source, licensed under the MIT License.Hack allows programmers to use both dynamic typing and static typing.  This kind of a type system is called gradual typing, which is also implemented in other programming languages such as ActionScript.  Hack's type system allows types to be specified for function arguments, function return values, and class properties; however, types of local variables are always inferred and cannot be specified."
},
{"id": 239, 
"name": "Halide (programming language)",
"summary": "No summary available"
},
{"id": 240, 
"name": "Hamilton C shell",
"summary": "Hamilton C shell is a clone of the Unix C shell and utilities for Microsoft Windows created by Nicole Hamilton at Hamilton Laboratories as a completely original work, not based on any prior code.  It was first released on OS/2 on December 12, 1988 and on Windows NT in July 1992.  The OS/2 version was discontinued in 2003 but the Windows version continues to be actively supported."
},
{"id": 241, 
"name": "Harbour (software)",
"summary": "Harbour is a computer programming language, primarily used to create database/business programs. It is a modernized, open sourced and cross-platform version of the older Clipper system, which in turn developed from the dBase database market of the 1980s and 90s.\nHarbour code using the same databases can be compiled under a wide variety of platforms, including Microsoft Windows, Linux, Unix variants, several BSD descendants, Mac OS X, MINIX 3, Windows CE, Pocket PC, Symbian, iOS, Android, QNX, VxWorks, OS/2/eComStation, BeOS/Haiku, \nAIX and MS-DOS."
},
{"id": 242, 
"name": "Hartmann pipeline",
"summary": "CMS Pipelines implements the pipeline concept under the VM/CMS operating system. The programs in a pipeline operate on a sequential stream of records. A program writes records that are read by the next program in the pipeline. Any program can be combined with any other because reading and writing is done through a device independent interface."
},
{"id": 243, 
"name": "Haskell (programming language)",
"summary": "Haskell  is a statically typed, purely functional programming language with type inference and lazy evaluation. Type classes, which enable type-safe operator overloading, were first proposed by Philip Wadler and Stephen Blott for Standard ML and implemented later in Haskell. Its main implementation is the Glasgow Haskell Compiler. It is named after logician Haskell Curry.Haskell is based on the semantics, but not the syntax, of the Miranda programming language, which served to focus the efforts of the initial Haskell working group. The last stable release was made in July 2010 with the next standard planned for 2020.Haskell is used in academia and industry. As of September 2019, Haskell was the 23rd most popular programming language in terms of Google searches for tutorials and made up less than 1% of active users on the GitHub source code repository."
},
{"id": 244, 
"name": "Haxe",
"summary": "Haxe is a high-level cross-platform multi-paradigm programming language and compiler that can produce applications and source code, for many different computing platforms, from one code-base. It is free and open-source software, distributed under the GNU General Public License (GPL) version 2, and the standard library under the MIT License.\nHaxe includes a set of common functions that are supported across all platforms, such as numeric data types, text, arrays, binary and some common file formats. Haxe also includes platform-specific application programming interface (API) for Adobe Flash, C++, PHP and other languages. OpenFL, Kha, Heaps and Flambe are popular Haxe frameworks that enable creating multi-platform content from one codebase.Haxe originated with the idea of supporting client-side and server-side programming in one language, and simplifying the communication logic between them. Code written in the Haxe language can be source-to-source compiled into ActionScript 3, JavaScript, Java, C++, C#, PHP, Python, Lua and Node.js. Haxe can also directly compile SWF, HashLink and Neko bytecode.\nMany popular  IDEs and  source code editors have support available for Haxe development.  No particular development environment or tool set is officially recommended by the Haxe Foundation, although VS Code and IntelliJ IDEA have extensions to support Haxe development. The core functionalities of syntax highlighting, code completion, refactoring, debugging, etc., are available in various degree.\nTo help leverage existing code, the Haxe community has created source code converters for ActionScript 3 to Haxe and C# to Haxe The Haxe compiler can also output Haxe into standalone ActionScript 3, C++, C#, Java, PHP, Python and Lua source code, which can then be pulled out of the Haxe ecosystem and developed with traditional workflows.\nMajor users of Haxe include BBC, Coca-Cola, Disney, Hasbro, Mattel, Nickelodeon, Prezi, TiVo, Toyota, and Zynga."
},
{"id": 245, 
"name": "Hermes (programming language)",
"summary": "Hermes\nis a language for distributed programming\nthat was developed at IBM's Thomas J. Watson Research Center from 1986 through 1992,\nwith an open-source compiler and run-time system.\nHermes' primary features included:\nLanguage support of processes and interprocess communication.\nCompile-time verification that operations use initialized data.\nRepresentation-independent data aggregates called tables.\nLack of pointers.It used typestate analysis to check variables transitions errors, to rule out some semantically non meaningful transitions from one state to another (i.e. starting from a value, some sequences of operations on a variable are nonsensical), of which reading an uninitialized variable is a special case. In this role of compile-time checking of data initialization is similar to definite assignment analysis performed by Java, Cyclone and C#.\nHermes and its predecessor, NIL (Network Implementation Language), were the earliest programming languages supporting this form of initialization checking.\nTypestate was actually used more extensively, to generate compiler-inserted \"delete\" operations."
},
{"id": 246, 
"name": "High Level Assembly",
"summary": "High Level Assembly (HLA) is a high-level assembly language developed by Randall Hyde. It allows the use of higher-level language constructs to aid both beginners and advanced assembly developers. It fully supports advanced data types and object-oriented programming. It uses a syntax loosely based on several high-level programming languages (HLLs), such as Pascal, Ada, Modula-2, and C++, to allow creating readable assembly language programs, and to allow HLL programmers to learn HLA as fast as possible."
},
{"id": 247, 
"name": "High Level Shader Language",
"summary": "The High-Level Shader Language or High-Level Shading Language (HLSL) is a proprietary shading language developed by Microsoft for the Direct3D 9 API to augment the shader assembly language, and went on to become the required shading language for the unified shader model of Direct3D 10 and higher.\nHLSL is analogous to the GLSL shading language used with the OpenGL standard. It is very similar to the Nvidia Cg shading language, as it was developed alongside it.  HLSL shaders can enable profound speed and detail increases as well as many special effects in both 2d and 3d computer graphics.HLSL programs come in six forms: pixel shaders (fragment in GLSL), vertex shaders, geometry shaders, compute shaders, tessellation shaders (Hull and Domain shaders), and raytracing shaders (Ray Generation Shaders, Intersection Shaders, Any Hit/Closest Hit/Miss Shaders). A vertex shader is executed for each vertex that is submitted by the application, and is primarily responsible for transforming the vertex from object space to view space, generating texture coordinates, and calculating lighting coefficients such as the vertex's tangent, binormal and normal vectors. When a group of vertices (normally 3, to form a triangle) come through the vertex shader, their output position is interpolated to form pixels within its area; this process is known as rasterization. Each of these pixels comes through the pixel shader, whereby the resultant screen colour is calculated.\nOptionally, an application using a Direct3D 10/11/12 interface and Direct3D 10/11/12 hardware may also specify a geometry shader. This shader takes as its input some vertices of a primitive (triangle/line/point) and uses this data to generate/degenerate (or tessellate) additional primitives or to change the type of primitives, which are each then sent to the rasterizer.\nD3D11.3 and D3D12 introduced Shader Model 5.1 and later 6.0."
},
{"id": 249, 
"name": "Hollywood (programming language)",
"summary": "Hollywood is a commercially distributed programming language developed by Andreas Falkenhahn (Airsoft Softwair) which mainly focuses on the creation of multimedia-oriented applications. Hollywood is available for AmigaOS, MorphOS, WarpOS, AROS, Windows, macOS, Linux, Android, and iOS. Hollywood has an inbuilt cross compiler that can automatically save executables for all platforms supported by the software. The generated executables are completely stand-alone and do not have any external dependencies, so they can also be started from a USB flash drive. An optional add-on also allows users to compile projects into APK files.The Hollywood Designer is an add-on for Hollywood with which it is possible to use Hollywood also as a presentation software and an authoring system."
},
{"id": 250, 
"name": "Hop (software)",
"summary": "Hop is a Lisp-like programming language by Manuel Serrano for web 2.0 and also the name of the web broker (server and proxy) that implements this language. It is written in Bigloo Scheme. It is a project funded by INRIA."
},
{"id": 251, 
"name": "Hope (programming language)",
"summary": "Hope is a small functional programming language developed in the 1970s at the University of Edinburgh.\nIt predates Miranda and Haskell and is contemporaneous with ML, also developed at the University. Hope was derived from NPL, a simple functional language developed by Rod Burstall and John Darlington in their work on program transformation. NPL and Hope are notable for being the first languages with call-by-pattern evaluation and algebraic data types.Hope was named for Sir Thomas Hope (c. 1681–1771), a Scottish agricultural reformer, after whom Hope Park Square in Edinburgh, the location of the Department of Artificial Intelligence at the time of the development of Hope, was also named."
},
{"id": 252, 
"name": "Hopscotch (programming language)",
"summary": "Hopscotch is a visual programming language developed by Hopscotch Technologies, designed to allow young or beginner programmers to develop simple projects. Its simple UI allows its users to drag and drop blocks to create scripts that can be played when activated. Although the language is easy to use for simple programming, it lacks the power to be used for more complex programs. The use of the language is through an iPad or iPhone supporting Hopscotch."
},
{"id": 253, 
"name": "Hugo (programming language)",
"summary": "Interactive fiction, often abbreviated IF, is software simulating environments in which players use text commands to control characters and influence the environment. Works in this form can be understood as literary narratives, either in the form of interactive narratives or interactive narrations. These works can also be understood as a form of video game, either in the form of an adventure game or role-playing game. In common usage, the term refers to text adventures, a type of adventure game where the entire interface can be \"text-only\", however, graphical text adventure games, where the text is accompanied by graphics (still images, animations or video) still fall under the text adventure category if the main way to interact with the game is by typing text. Some users of the term distinguish between interactive fiction, known as \"Puzzle-free\", that focuses on narrative, and \"text adventures\" that focus on puzzles.\nDue to their text-only nature, they sidestepped the problem of writing for widely divergent graphics architectures. This feature meant that interactive fiction games were easily ported across all the popular platforms at the time, including CP/M (not known for gaming or strong graphics capabilities). The number of interactive fiction works is increasing steadily as new ones are produced by an online community, using freely available development systems.\nThe term can also be used to refer to digital versions of literary works that are not read in a linear fashion, known as gamebooks, where the reader is instead given choices at different points in the text; these decisions determine the flow and outcome of the story. The most famous example of this form of printed fiction is the Choose Your Own Adventure book series, and the collaborative \"addventure\" format has also been described as a form of interactive fiction. The term \"interactive fiction\" is sometimes used also to refer to visual novels, a type of interactive narrative software popular in Japan."
},
{"id": 254, 
"name": "Hume (language)",
"summary": "Hume is a functionally based programming language developed at the University of St Andrews and Heriot-Watt University in Scotland since the year 2000. The language name is both an acronym meaning 'Higher-order Unified Meta-Environment' and an honorific to the 18th Century philosopher David Hume. It targets real-time embedded systems, aiming to produce a design that is both highly abstract, yet which will still allow precise extraction of time and space execution costs. This allows programmers to guarantee the bounded time and space demands of executing programs.\nHume combines functional programming ideas with ideas from finite state automata. Automata are used to structure communicating programs into a series of \"boxes\", where each box maps inputs to outputs in a purely functional way using high-level pattern-matching. It is  structured as a series of levels, each of which exposes different machine properties."
},
{"id": 255, 
"name": "HyperTalk",
"summary": "HyperTalk was a high-level, procedural programming language created in 1987 by Dan Winkler and used in conjunction with Apple Computer's HyperCard hypermedia program by Bill Atkinson. Because the main target audience of HyperTalk was beginning programmers, HyperTalk programmers were usually called \"authors\" and the process of writing programs \"scripting\". HyperTalk scripts resembled written English and used a logical structure similar to that of the Pascal programming language.\nHyperTalk supported the basic control structures of procedural languages: repeat for/while/until, if/then/else, as well as function and message \"handler\" calls (a function handler was a subroutine and a message handler a procedure). Data types usually did not need to be specified by the programmer; conversion happened transparently in the background between strings and numbers. There were no classes or data structures in the traditional sense; in their place were special string literals, or \"lists\" of \"items\" delimited by commas (in later versions the \"itemDelimiter\" property allowed choosing an arbitrary character).\nIn the late 1980s Apple considered using HyperCard's HyperTalk scripting language as the standard language across the company and within its classic Mac OS operating system, as well as for interprocess communication between Apple and non-Apple products. The company did not oppose the development of imitations like SuperCard, but it created the HyperTalk Standards Committee to avoid incompatibility between language variants. The case-insensitive language was initially interpreted, but gained just-in-time compilation with HyperCard 2.0."
},
{"id": 256, 
"name": "IBM 1401 Symbolic Programming System",
"summary": "The IBM 1401 Symbolic Programming System (SPS) was an assembler that was developed by Gary Mokotoff, IBM Applied Programming Department, for the IBM 1401 computer, the first of the IBM 1400 series.  One source indicates that \"This programming system was announced by IBM with the machine.\"SPS-1 could run on a low-end machine with 1.4K memory, SPS-2 required at least 4K memory.\n\nSPS-1 punched one card for each input instruction in its first pass and this deck had to be read during pass 2. At the University of Chicago and many other locations, SPS-1 was replaced by assemblers taking advantage of the commonly available 4K memory configuration to pack the output of pass one into several instructions per card.  Other assemblers were written which placed the pass one output into memory for small programs.As the 1400 series matured additional assemblers, programming languages and report generators became available, replacing SPS in most sites."
},
{"id": 257, 
"name": "IBM 1620",
"summary": "The IBM 1620 was announced by IBM on October 21, 1959, and marketed as an inexpensive \"scientific computer\". After a total production of about two thousand machines, it was withdrawn on November 19, 1970. Modified versions of the 1620 were used as the CPU of the IBM 1710 and IBM 1720 Industrial Process Control Systems (making it the first digital computer considered reliable enough for real-time process control of factory equipment).Being variable-word-length decimal, as opposed to fixed-word-length pure binary, made it an especially attractive first computer to learn on –  and hundreds of thousands of students had their first experiences with a computer on the IBM 1620.\nCore memory cycle times were 20 microseconds for the (earlier) Model I, 10 microseconds for the Model II (about a thousand times slower than typical computer main memory in 2006). The Model II was introduced in 1962."
},
{"id": 258, 
"name": "IBM Basic assembly language",
"summary": "Basic Assembly Language (BAL) is the commonly used term for a low-level programming language used on IBM System/360 and successor mainframes. Originally, \"Basic Assembly Language\" applied only to an extremely restricted dialect designed to run under control of IBM Basic Programming Support (BPS/360) on systems with only 8 KB of main memory, and only a card reader, a card punch, and a printer for input/output — thus the word \"Basic\". However, the full name and the initialism \"BAL\" almost immediately attached themselves in popular use to all assembly-language dialects on the System/360 and its descendants. BAL for BPS/360 was introduced with the System/360 in 1964.\nAssemblers on other System/360 operating systems through System/370, System/390,  and System z, as well as the UNIVAC Series 90 mainframes made by Sperry Corporation, and the BS2000 Mainframes currently made by Fujitsu, inherited and extended its syntax. The latest derived language is known as the IBM High-Level Assembler (HLASM).  Programmers utilizing this family of assemblers also refer to them as ALC, (for Assembly Language Coding), or simply \"assembler\".\nBAL is also the mnemonic of the \"Branch And Link\" instruction."
},
{"id": 259, 
"name": "IBM HAScript",
"summary": "HAScript, or Host Access Script, is an IBM-developed macro language with an XML syntax designed for programmatic interaction with terminal-based applications. HAScript is based on a state machine principle. The first commercial implementation appeared in IBM's Host On-Demand in the late 1990s.\nIBM software products that use HAScript include WebSphere Host On-Demand (HOD), Personal Communications, and WebSphere Host Access Transformation Services (HATS). When accessing the IBM Mainframe the HAScript API allows for Host emulation whereby information from the host screen can be retrieved and reformatted within a webpage, or other software application.  There has been limited adoption of HAScript as it requires an intense amount of system resources, general process overhead and Java virtual machine resources.  To date, the implementation of HAScript by other software companies has been mild as the language used for communication is not universally standardized."
},
{"id": 260, 
"name": "IBM Informix-4GL",
"summary": "Informix-4GL is a 4GL programming language developed by Informix during the mid-1980s."
},
{"id": 261, 
"name": "IBM RPG",
"summary": "RPG is a high-level programming language (HLL) for business applications. RPG is an IBM proprietary programming language and its later versions are available only on IBM i- or OS/400-based systems.It has a long history, having been developed by IBM in 1959 as the Report Program Generator — a tool to replicate punched card processing on the IBM 1401 —  then updated to RPG II for the IBM System/3 in the late 1960s, and since evolved into an HLL equivalent to COBOL and PL/I.\nIt remains a popular programming language on the IBM i operating system, which runs on IBM Power platform hardware.  The current version, RPG IV, a.k.a. ILE RPG, provides a modern programming environment."
},
{"id": 262, 
"name": "IDL (programming language)",
"summary": "IDL, short for Interactive Data Language, is a programming language used for data analysis.  It is popular in particular areas of science, such as astronomy, atmospheric physics and medical imaging. IDL shares a common syntax with PV-Wave and originated from the same codebase, though the languages have subsequently diverged in detail. There are also two free implementations, GNU Data Language (GDL) and Fawlty Language (FL)."
},
{"id": 263, 
"name": "Icon (programming language)",
"summary": "Icon is a very high-level programming language featuring goal-directed execution and many facilities for managing strings and textual patterns. It is related to SNOBOL and SL5, string processing languages. Icon is not object-oriented, but an object-oriented extension called Idol was developed in 1996 which eventually became Unicon."
},
{"id": 264, 
"name": "Idris (programming language)",
"summary": "Idris is a purely functional programming language with dependent types, optional lazy evaluation, and features such as a totality checker. Idris may be used as a proof assistant, but it is designed to be a general-purpose programming language similar to Haskell.\nThe Idris type system is similar to Agda, and proofs are similar to Coq, including tactics. Compared to Agda and Coq, Idris prioritizes management of side effects and support for embedded domain-specific languages. Idris compiles to C (relying on a custom copying garbage collector using Cheney's algorithm) and JavaScript (both browser- and Node.js-based). There are third-party code generators for other platforms, including JVM, CIL, and LLVM.Idris 2, which has a Chez Scheme backend and uses quantitative type theory, is currently being worked on.Idris is named after a singing dragon from the 1970s UK children's television program Ivor the Engine."
},
{"id": 265, 
"name": "Inform (programming language)",
"summary": "Inform is a programming language and design system for interactive fiction originally created in 1993 by Graham Nelson.  Inform can generate programs designed for the Z-code or Glulx virtual machines.   Versions 1 through 5 were released between 1993 and 1996.  Around 1996, Nelson rewrote Inform from first principles to create version 6 (or Inform 6).\nOver the following decade, version 6 became reasonably stable and a popular language for writing interactive fiction.  In 2006, Nelson released Inform 7 (briefly known as Natural Inform), a completely new language based on principles of natural language and a new set of tools based around a book-publishing metaphor."
},
{"id": 266, 
"name": "IntelliCorp (Software)",
"summary": "IntelliCorp (IC) is a software company that provides, develops, and markets SAP application lifecycle management, business process management and data management software for SAP customers and partners. IntelliCorp applications deliver automatic intelligent impact analysis of SAP systems and are SAP Integration Certified."
},
{"id": 267, 
"name": "Io (programming language)",
"summary": "Io is a pure object-oriented programming language inspired by Smalltalk, Self, Lua, Lisp, Act1, and NewtonScript. Io has a prototype-based object model similar to the ones in Self and NewtonScript, eliminating the distinction between instance and class. Like Smalltalk, everything is an object and it uses dynamic typing. Like Lisp, programs are just data trees. Io uses actors for concurrency.\nRemarkable features of Io are its minimal size and openness to using external code resources. Io is executed by a small, portable virtual machine."
},
{"id": 268, 
"name": "J (programming language)",
"summary": "The J programming language, developed in the early 1990s by Kenneth E. Iverson and Roger Hui, is an array programming language based primarily on APL (also by Iverson).\nTo avoid repeating the APL special-character problem, J uses only the basic ASCII character set, resorting to the use of the dot and colon as inflections to form short words similar to digraphs. Most such primary (or primitive) J words serve as mathematical symbols, with the dot or colon extending the meaning of the basic characters available.  Also, many characters which in other languages often must be paired (such as [] {} \"\" `` or <>) are treated by J as stand-alone words or, when inflected, as single-character roots of multi-character words.\nJ is a very terse array programming language, and is most suited to mathematical and statistical programming, especially when performing operations on matrices. It has also been used in extreme programming and network performance analysis.Like John Backus's languages FP and FL, J supports function-level programming via its tacit programming features.\nUnlike most languages that support object-oriented programming, J's flexible hierarchical namespace scheme (where every name exists in a specific locale) can be effectively used as a framework for both class-based and prototype-based object-oriented programming.\nSince March 2011, J is free and open-source software under the GNU General Public License version 3 (GPLv3). One may also purchase source under a negotiated license."
},
{"id": 269, 
"name": "J Sharp",
"summary": "Visual J# (pronounced \"jay-sharp\") is an implementation of the J# programming language that was a transitional language for programmers of Java and Visual J++ languages, so they could use their existing knowledge and applications with the .NET Framework. It was introduced in 2002 and discontinued in 2007, with support for the final release of the product continuing until October 2017.\nJ# worked with Java bytecode as well as source so it could be used to transition applications that used third-party libraries even if their original source code was unavailable. It was developed by the Hyderabad-based Microsoft India Development Center at HITEC City in India."
},
{"id": 270, 
"name": "JADE (programming language)",
"summary": "JADE is a proprietary object-oriented software development and deployment platform product from the New Zealand-based Jade Software Corporation, first released in 1996. It consists of the JADE programming language, Integrated development environment and debugger, integrated application server and object database management system.\nDesigned as an end-to-end development environment to allow systems to be coded in one language from the database server down to the clients, it also provides APIs for other languages, including .NET Framework, Java, C/C++ and Web services.\nAlthough a free limited licence is available for development, using the JADE platform requires per-process fees to be paid."
},
{"id": 271, 
"name": "JAL (compiler)",
"summary": "JAL (Just Another Language) is a Pascal-like programming language and compiler that generates executable code for PIC microcontrollers.  It is a free-format language with a compiler that runs on Linux, MS-Windows and MS-DOS (OSX support). It is configurable and extendable through the use of libraries and can even be combined with PIC assembly language."
},
{"id": 272, 
"name": "JASS",
"summary": "Jass was also an early name for Jazz music. For the WarCraft III scripting language, see JASS.Jass (German pronunciation: [ˈjas]) is a trick taking, Ace-Ten  card game and a distinctive branch of the Marriage family, popularly supposed to be the progenitor of the American game of Pinochle. It is popular throughout the Alemannic German-speaking area of Europe (German-speaking Switzerland, Liechtenstein, Alsace part of France, Vorarlberg province of Austria, southwestern Germany (Baden-Wuerttemberg land), beyond in Romansh-speaking Graubünden and in French-speaking area of Switzerland, German-speaking South Tyrol in Italy and New Glarus, Wisconsin.\nThe most common variant of Jass is the Schieber (in Vorarlberg also known as Krüzjass), played by two teams of two players each.  It is often considered Switzerland's national card game, and is so popular there that the Swiss have come to apply the name Jass to trick-taking card games in general."
},
{"id": 273, 
"name": "JEAN",
"summary": "No summary available"
},
{"id": 274, 
"name": "JOSS",
"summary": "José is a predominantly Spanish and Portuguese form of the given name Joseph. While spelled alike, this name is pronounced differently in each language: in Spanish [xoˈse], and in Portuguese [ʒuˈzɛ] (or [ʒoˈzɛ]).\nIn French, the name José, pronounced [ʒoˈze], is an old vernacular form of Joseph, which is also in current usage as a given name. José is also commonly used as part of masculine name composites, such as José Manuel, José Maria or Antonio José, and also in female name composites like Maria José or Marie-José. The feminine written form is Josée as in French.\nIn Netherlandic Dutch however, José is a feminine given name, and is pronounced [ˈjoːseː]; it may occur as part of name composites like Marie-José or as a feminine first name in its own right; it can also be short for the name Josina and even a Dutch hypocorism of the name Johanna.\nIn England, Jose is originally a Romano-Celtic surname, and people with this family name can usually be found in, or traced to, the English county of Cornwall, where it was especially frequent during the fourteenth century; this surname is pronounced , as in the English names Joseph or Josephine. According to another interpretation Jose is cognate with Joyce; Joyce is an English and Irish surname derived from the Breton personal name Iodoc which was introduced to England by the Normans in the form Josse. In medieval England the name was occasionally borne by women but more commonly by men; the variant surname Jose is local to Devon and Cornwall.The common spelling of this given name in different languages is a case of interlingual homography. Similar cases occur in English given names (Albert, Bertrand, Christine, Daniel, Eric, Ferdinand) that are not exclusive to the English language, and which can be found namely in French with a different pronunciation under exactly the same spelling."
},
{"id": 275, 
"name": "JOVIAL",
"summary": "No summary available"
},
{"id": 276, 
"name": "JScript",
"summary": "JScript is Microsoft's dialect of the ECMAScript standard that is used in Microsoft's Internet Explorer.\nJScript is implemented as an Active Scripting engine. This means that it can be \"plugged in\" to OLE Automation applications that support Active Scripting, such as Internet Explorer, Active Server Pages, and Windows Script Host. It also means such applications can use multiple Active Scripting languages, e.g., JScript, VBScript or PerlScript.\nJScript was first supported in the Internet Explorer 3.0 browser released in August 1996. Its most recent version is JScript 9.0, included in Internet Explorer 9.\nJScript 10.0 is a separate dialect, also known as JScript .NET, which adds several new features from the abandoned fourth edition of the ECMAScript standard. It must be compiled for .NET Framework version 2 or version 4, but static type annotations are optional."
},
{"id": 277, 
"name": "JScript .NET",
"summary": "JScript .NET is a .NET programming language developed by Microsoft.\nThe primary differences between JScript and JScript .NET can be summarized as follows:\nFirstly, JScript is a scripting language, and as such programs (or more suggestively, scripts) can be executed without the need to compile the code first. This is not the case with the JScript .NET command-line compiler, since this next-generation version relies on the .NET Common Language Runtime (CLR) for execution, which requires that the code be compiled to Common Intermediate Language (CIL), formerly called Microsoft Intermediate Language (MSIL), code before it can be run. Nevertheless, JScript .NET still provides full support for interpreting code at runtime (e.g., via the Function constructor or the eval function) and indeed the interpreter can be exposed by custom applications hosting the JScript .NET engine via the VSA interfaces.\nSecondly, JScript has a strong foundation in Microsoft's ActiveX/COM technologies, and relies primarily on ActiveX components to provide much of its functionality (including database access via ADO, file handling, etc.), whereas JScript .NET uses the .NET Framework to provide equivalent functionality. For backwards-compatibility (or for where no .NET equivalent library exists), JScript .NET still provides full access to ActiveX objects via .NET / COM interop using both the ActiveXObject constructor and the standard methods of the .NET Type class.\nAlthough the .NET Framework and .NET languages such as C# and Visual Basic .NET have seen widespread adoption, JScript .NET has never received much attention, by the media or by developers. It is not supported in Microsoft's premier development tool, Visual Studio .NET. However, ASP.NET supports JScript .NET."
},
{"id": 278, 
"name": "Janus (concurrent constraint programming language)",
"summary": "Janus is a computer programming language partially described by K. Kahn and Vijay A. Saraswat in the paper \"Actors as a special case of concurrent constraint (logic) programming\" in 1990. It is a concurrent constraint language without backtracking.\nJanus models concurrency through the use of bag channels.  Code that needs to send a message to a process does so by constraining a bag to be the union of another bag and the singleton bag of the message. The other bag is then available to be constrained for sending subsequent messages.\nThe process receives the message by matching the bag to a pattern that says it is the union of some singleton and some other bag. The logic of the bag channels produces a property shared by the actor model, namely that the order of arrival of the messages is not guaranteed.  However, unlike actors in the actor model, processes in Janus can pass around their \"mailboxes\" so to speak, in the form of\nbags, and can hold more than one.  This ability to pass mailboxes around and hold more than one is inherited in computer programming language ToonTalk, which is influenced by Janus.\nJanus, the programming language, is named after Janus, the two-faced Roman god, because every logical variable in Janus has as its two \"faces\", two aspects that can be passed as arguments.  These are called the asker and the teller.  These represent, respectively, the right to ask the value of the variable (or some characteristic of the value) and the right to tell the value (or to tell some constraint on what the value can be).  The asker and teller aspects can be passed around as arguments independently of each other.  Neither right implies the other right.  The syntax of the language prevents copying a teller or exercising it more than once. Logical contradiction is statically prevented, according to Kahn and Saraswat."
},
{"id": 279, 
"name": "Janus (time-reversible computing programming language)",
"summary": "Janus is a time-reversible programming language written at Caltech in 1982. The operational semantics of the language were formally specified, together with a program inverter and an invertible self-interpreter, in 2007 by Tetsuo Yokoyama and Robert Glück. A Janus inverter and interpreter is made freely available by the TOPPS research group at DIKU. Another Janus interpreter was implemented in Prolog in 2009. The below summarises the language presented in the 2007 paper.\nJanus is an imperative programming language with a global store (there is no stack or heap allocation). Janus is a reversible programming language, i.e. it supports deterministic forward and backward computation by local inversion."
},
{"id": 280, 
"name": "Java (programming language)",
"summary": "Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but it has fewer low-level facilities than either of them. As of 2019, Java was one of the most popular programming languages in use according to GitHub, \nparticularly for client-server web applications, with a reported 9 million developers.Java was originally developed by James Gosling at Sun Microsystems (which has since been acquired by Oracle) and released in 1995 as a core component of Sun Microsystems' Java platform. The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun had relicensed most of its Java technologies under the GNU General Public License. Meanwhile, others have developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets).\nThe latest versions are Java 13, released in September 2019, and Java 11, a currently supported long-term support (LTS) version, released on September 25, 2018; Oracle released for the legacy Java 8 LTS the last free public update in January 2019 for commercial use, while it will otherwise still support Java 8 with public updates for personal use up to at least December 2020. Oracle (and others) highly recommend uninstalling older versions of Java because of serious risks due to unresolved security issues. Since Java 9 (and 10 and 12) is no longer supported, Oracle advises its users to immediately transition to the latest version (currently Java 13) or an LTS release."
},
{"id": 281, 
"name": "JavaFX Script",
"summary": "JavaFX Script was a scripting language designed by Sun Microsystems, forming part of the JavaFX family of technologies on the Java Platform.\nJavaFX targeted the Rich Internet Application domain (competing with Adobe Flex and Microsoft Silverlight), specializing in rapid development of visually rich applications for the desktop and mobile markets. JavaFX Script works with integrated development environments such as NetBeans, Eclipse and IntelliJ IDEA. JavaFX is released under the GNU General Public License, via the Sun sponsored OpenJFX project."
},
{"id": 282, 
"name": "JavaScript",
"summary": "JavaScript (), often abbreviated as JS, is a high-level, just-in-time compiled, object-oriented programming language that conforms to the ECMAScript specification. JavaScript has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.\nAlongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web. JavaScript enables interactive web pages and is an essential part of web applications. The vast majority of websites use it, and major web browsers have a dedicated JavaScript engine to execute it.\nAs a multi-paradigm language, JavaScript supports event-driven, functional, and imperative (including object-oriented and prototype-based) programming styles. It has APIs for working with text, arrays, dates, regular expressions, and the DOM, but the language itself does not include any I/O, such as networking, storage, or graphics facilities. It relies upon the host environment in which it is embedded to provide these features.\nInitially only implemented client-side in web browsers, JavaScript engines are now embedded in many other types of host software, including server-side in web servers and databases, and in non-web programs such as word processors and PDF software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets.\nThe terms Vanilla JavaScript and Vanilla JS refer to JavaScript not extended by any frameworks or additional libraries. Scripts written in Vanilla JS are plain JavaScript code.Although there are similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design. JavaScript was influenced by programming languages such as Self and Scheme. The JSON serialization format, used to store data structures in files or transmit them across networks, is based on JavaScript."
},
{"id": 283, 
"name": "Jess (programming language)",
"summary": "Jess is a rule engine for the Java platform that was developed by Ernest Friedman-Hill of Sandia National Labs. It is a superset of the CLIPS programming language. It was first written in late 1995. The language provides rule-based programming for the automation of an expert system, and is frequently termed as an expert system shell. In recent years, intelligent agent systems have also developed, which depend on a similar capability.\nRather than a procedural paradigm, where a single program has a loop that is activated only one time, the declarative paradigm used by Jess continuously applies a collection of rules to a collection of facts by a process called pattern matching. Rules can modify the collection of facts, or they can execute any Java code.\nThe Jess rules engine utilizes the Rete algorithm, and can be utilized to create:\n\nJava servlets\nEnterprise JavaBeans\nApplets"
},
{"id": 284, 
"name": "Job Control Language",
"summary": "Job Control Language (JCL) is a name for scripting languages used on IBM mainframe operating systems to instruct the system on how to run a batch job or start a subsystem.More specifically, the purpose of JCL is to say which programs to run, using which files or devices  for input or output, and at times to also indicate under what conditions to skip a step.\nThere are two distinct IBM Job Control languages: \n\none for the operating system lineage that begins with DOS/360 and whose latest member is z/VSE; and\nthe other for the lineage from OS/360 to z/OS, the latter now including JES extensions, Job Entry Control Language (JECL).They share some basic syntax rules and a few basic concepts, but are otherwise very different. The VM operating system does not have JCL as such; the CP and CMS components each have command languages.\n\n"
},
{"id": 285, 
"name": "Join Java",
"summary": "Join Java is a programming language based on the join-pattern that extends the standard Java programming language with the join semantics of the join-calculus.  It was written at the University of South Australia within the Reconfigurable Computing Lab by Dr. Von Itzstein."
},
{"id": 286, 
"name": "Joule (programming language)",
"summary": "Joule is a concurrent dataflow programming language, designed for building distributed applications. It is so concurrent that the order of statements within a block is irrelevant to the operation of the block. Statements are executed whenever possible, based on their inputs. Everything in Joule happens by sending messages. There is no control flow. Instead, the programmer describes the flow of data, making it a dataflow programming language.  \nIt is considered the precursor to the E programming language."
},
{"id": 287, 
"name": "Joy (programming language)",
"summary": "The Joy programming language in computer science is a purely functional programming language that was produced by Manfred von Thun of La Trobe University in Melbourne, Australia. Joy is based on composition of functions rather than lambda calculus. It has turned out to have many similarities to Forth, due not to design but to a sort of parallel evolution and convergence. It was also inspired by the function-level programming style of John Backus's FP."
},
{"id": 288, 
"name": "Julia (programming language)",
"summary": "Julia is a high-level, high-performance, dynamic programming language. While it is a general purpose language and can be used to write any application, many of its features are well-suited for high-performance numerical analysis and computational science.Distinctive aspects of Julia's design include a type system with parametric polymorphism in a dynamic programming language; with multiple dispatch as its core programming paradigm. Julia supports concurrent, (composable) parallel and distributed computing (with or without using MPI and/or the built-in corresponding to \"OpenMP-style\" threads), and direct calling of C and Fortran libraries without glue code. A just-in-time compiler that is referred to as \"just-ahead-of-time\" in the Julia community is used.\nJulia is garbage-collected, uses eager evaluation, and includes efficient libraries for floating-point calculations, linear algebra, random number generation, and regular expression matching. Many libraries are available, including some (e.g., for fast Fourier transforms) that were previously bundled with Julia and are now separate.Tools available for Julia include IDEs; with integrated tools, e.g. a linter, profiler (and flame graph support available for the built-in one), debugger, and the Rebugger.jl package \"supports repeated-execution debugging\" and more."
},
{"id": 289, 
"name": "Jython",
"summary": "Jython is an implementation of the Python programming language designed to run on the Java platform. The implementation was formerly known as JPython until 1999."
},
{"id": 290, 
"name": "K (programming language)",
"summary": "K is a proprietary array processing programming language developed by Arthur Whitney and commercialized by Kx Systems. The language serves as the foundation for kdb+, an in-memory, column-based database, and other related financial products. The language, originally developed in 1993, is a variant of APL and contains elements of Scheme. Advocates of the language emphasize its speed, facility in handling arrays, and expressive syntax."
},
{"id": 291, 
"name": "KRL (programming language)",
"summary": "KRL is a knowledge representation language, developed by Daniel G. Bobrow and Terry Winograd while at Xerox PARC and Stanford University, respectively. It is a frame-based language. \n\nKRL was an attempt to produce a language which was nice to read and write for the engineers who had to write programs in it, processed like human memory, so you could have realistic AI programs, had an underlying semantics which was firmly grounded like logic languages, all in one, all in one language. And I think it - again, in hindsight - it just bogged down under the weight of trying to satisfy all those things at once."
},
{"id": 292, 
"name": "KRYPTON",
"summary": "Krypton (from Ancient Greek: κρυπτός, romanized: kryptos \"the hidden one\") is a chemical element with the symbol Kr and atomic number 36. It is a colorless, odorless, tasteless noble gas that occurs in trace amounts in the atmosphere and is often used with other rare gases in fluorescent lamps. With rare exceptions, krypton is chemically inert.\nKrypton, like the other noble gases, is used in lighting and photography. Krypton light has many spectral lines, and krypton plasma is useful in bright, high-powered gas lasers (krypton ion and excimer lasers), each of which resonates and amplifies a single spectral line. Krypton fluoride also makes a useful laser medium. From 1960 to 1983, the official length of a meter was defined by the 606-nanometer wavelength of the orange spectral line of krypton-86, because of the high power and relative ease of operation of krypton discharge tubes."
},
{"id": 293, 
"name": "KUKA Robot Language",
"summary": "The KUKA Robot Language, also known as KRL, is a proprietary programming language similar to Pascal and used to control KUKA robots."
},
{"id": 294, 
"name": "Kaleidoscope (programming language)",
"summary": "The Kaleidoscope programming language is a constraint programming language embedding constraints into an imperative object-oriented language.  It adds keywords always, once, and assert..during (formerly while..assert) to make statements about relational invariants. Objects have constraint constructors, which are not methods, to enforce the meanings of user-defined datatypes.\nThere are three versions of Kaleidoscope which show an evolution from declarative to an increasingly imperative style. Differences between them are as follows."
},
{"id": 295, 
"name": "Karel (programming language)",
"summary": "Karel is an educational programming language for beginners, created by Richard E. Pattis in his book Karel The Robot: A Gentle Introduction to the Art of Programming. Pattis used the language in his courses at Stanford University, California. The language is named after Karel Čapek, a Czech writer who introduced the word robot."
},
{"id": 296, 
"name": "Kent Recursive Calculator",
"summary": "KRC (Kent Recursive Calculator) is a lazy functional language developed by David Turner from November 1979 to October 1981 based on SASL, with pattern matching, guards and ZF expressions (now more usually called list comprehensions).\nTwo implementations of KRC were written: David Turner's original one in BCPL running on EMAS, and Simon J. Croft's later one in C under Unix, and KRC was the main language used for teaching functional programming at the University of Kent at Canterbury (UK) from 1982 to 1985.\nThe direct successor to KRC is Miranda, which includes a polymorphic type discipline based on that of Milner's ML."
},
{"id": 297, 
"name": "KiXtart",
"summary": "KiXtart is a closed source free-format scripting language for Windows. It is described as a logon script processor and enhanced batch scripting language by the official website. Its name is a portmanteau of \"kick start\"."
},
{"id": 298, 
"name": "Kivy (framework)",
"summary": "Kivy is a free and open source Python library for developing mobile apps and other multitouch application software with a natural user interface (NUI). It is distributed under the terms of the MIT License, and can run on Android, iOS, GNU/Linux, OS X, and Windows.\nKivy is the main framework developed by the Kivy organization, alongside Python for Android, Kivy iOS, and several other libraries meant to be used on all platforms. In 2012, Kivy got a $5000 grant from the Python Software Foundation for porting it to Python 3.3. Kivy also supports the Raspberry Pi which was funded through Bountysource.The framework contains all the elements for building an application such as:\n\nextensive input support for mouse, keyboard, TUIO, and OS-specific multitouch events,\na graphic library using only OpenGL ES 2, and based on Vertex Buffer Object and shaders,\na wide range of widgets that support multitouch,\nan intermediate language (Kv) used to easily design custom widgets.Kivy is the evolution of the PyMT project, and is recommended for new projects."
},
{"id": 299, 
"name": "Klerer-May System",
"summary": "The Klerer–May System is a programming language developed in the mid-1960s, oriented to numerical scientific programming, whose most notable feature is its two-dimensional syntax based on traditional mathematical notation.\n\nFor input and output, the Klerer–May system used a Friden Flexowriter modified to allow half-line motions for subscripts and superscripts. The character set included digits, upper-case letters, subsets of 14 lower-case Latin letters and 18 Greek letters, arithmetic operators (+ − × / |) and punctuation (. , ( )), and eight special line-drawing characters (resembling  ╲ ╱ ⎜ _ ⎨ ⎬ ˘ ⁔) used to construct multi-line brackets and symbols for summation, products, roots, and for multi-line division or fractions.\nThe system was intended to be forgiving of input mistakes, and easy to learn; its reference manual was only two pages.The system was developed by Melvin Klerer and Jack May at Columbia University's Hudson Laboratories in Dobbs Ferry, New York, for the Office of Naval Research, and ran on GE-200 series computers."
},
{"id": 300, 
"name": "Knowledge Interchange Format",
"summary": "Knowledge Interchange Format (KIF) is a computer language designed to enable systems to share and re-use information from knowledge-based systems. KIF is similar to frame languages such as KL-One and LOOM but unlike such language its primary role is not intended as a framework for the expression or use of knowledge but rather for the interchange of knowledge between systems. The designers of KIF likened it to PostScript. PostScript was not designed primarily as a language to store and manipulate documents but rather as an interchange format for systems and devices to share documents. In the same way KIF is meant to facilitate sharing of knowledge across different systems that use different languages, formalisms, platforms, etc.\nKIF has a declarative semantics. It is meant to describe facts about the world rather than processes or procedures. Knowledge can be described as objects, functions, relations, and rules. It is a formal language, i.e., it can express arbitrary statements in first order logic and can support reasoners that can prove the consistency of a set of KIF statements. KIF also supports non-monotonic reasoning. KIF was  created by Michael Genesereth, Richard Fikes and others participating in the DARPA knowledge Sharing Effort.Although the original KIF group intended to submit to a formal standards body, that did not occur.  A later version called Common Logic has since been developed for submission to ISO and has been approved and published. A variant called SUO-KIF is the language in which the Suggested Upper Merged Ontology is written.\n\n"
},
{"id": 301, 
"name": "Kodu Game Lab",
"summary": "Kodu, originally named Boku, is a programming integrated development environment (IDE) by Microsoft's FUSE Labs. It runs on Xbox 360 and Microsoft Windows XP, Windows Vista, Windows 7, Windows 8 and Windows 10. It was released on the Xbox Live Marketplace on June 30, 2009. A Windows version is available to the general public for download from Microsoft's FUSE web portal."
},
{"id": 302, 
"name": "Kojo (programming language)",
"summary": "Kojo is a programming language and integrated development environment (IDE) for computer programming and learning. It has many different features that enable playing, exploring, creating, and learning in the areas of computer programming, mental skills, (interactive) math, graphics, art, music, science, animation, games, and electronics. Kojo draws ideas from the programming languages Logo and Processing.Kojo is open-source software. It was created,  and is actively developed, by Lalit Pant, a computer programmer and teacher living in Dehradun, India. Kojo provides domain-specific languages (DSLs) for its different areas of learning, and as such can be considered an educational programming language.\nKojo is written in, and its approach is based on, the programming language Scala, where users begin with a simple subset of the language and progress in steps. Its graphical user interface is based on Java Swing; a former version was based on the Java NetBeans platform.\nLalit chose Scala as the underlying language for Kojo because of its low barrier to entry and potential power.Kojo has been used in schools and classes around the world. Some of these include:\n\nHimjyoti School, Dehradun, India.\nRishi Valley School, Madanapalle, India.\nCardinal Forest Elementary School, Springfield, Virginia, USA.\nDiablo Valley College, Pleasant Hill, California, USA.\nLady's Catholic High School, Preston, England.\nA Swedish 4th grade class consisting of 10-year-old children. Kojo has been featured by Dagens Nyheter (DN) and Computer Sweden as a result of the work done by this class.\nEvents like Silicon Valley Code Camp, CoderDojo, Hack The Future, and Meetups.The development of Kojo is partly sponsored by Lightbend, formerly TypeSafe, and Lund University, Computer Science Department, where Kojo is used to introduce children and teachers to computer programming. Professor Björn Regnell of Lund University has an informative presentation on the subject. Professor Regnell writes, in translation: \"Kojo is the best tool, with a low barrier of entry, I have seen for making real text based programming available for children, that is also  usable all the way up to university level\"."
},
{"id": 303, 
"name": "Korn shell",
"summary": "KornShell (ksh) is a Unix shell which was developed by David Korn at Bell Labs in the early 1980s and announced at USENIX on July 14, 1983.  The initial development was based on Bourne shell source code.  Other early contributors were Bell Labs developers Mike Veach and Pat Sullivan, who wrote the Emacs and vi-style line editing modes' code, respectively. KornShell is backward-compatible with the Bourne shell and includes many features of the C shell, inspired by the requests of Bell Labs users."
},
{"id": 304, 
"name": "Kotlin (programming language)",
"summary": "Kotlin () is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of its standard library depends on the Java Class Library, but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript or native code (via LLVM). Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.Kotlin is officially supported by Google for mobile development on Android. Since the release of Android Studio 3.0 in October 2017, Kotlin is included as an alternative to the standard Java compiler. The Android Kotlin compiler lets the user choose between targeting Java 6 or Java 8 compatible bytecode."
},
{"id": 305, 
"name": "LANSA (development environment)",
"summary": "LANSA is an integrated development environment (IDE) for building desktop, web and mobile software applications that can be deployed to Cloud, Windows, Linux and IBM i server platforms.\nThe LANSA development environment includes:\n\nHigh-level programming language\nBusiness rules and data definitions metadata repository\nData management services\nApplication framework\nIntegrated development environment (IDE)"
},
{"id": 306, 
"name": "LINC 4GL",
"summary": "LINC (\"Logic and Information Network Compiler\") is a fourth-generation programming language, used mostly on Unisys computer systems."
},
{"id": 307, 
"name": "LINQ",
"summary": "No summary available"
},
{"id": 308, 
"name": "LIS (programming language)",
"summary": "LIS (Language d'Implementation de Systèmes) was a system implementation programming language designed by Jean Ichbiah, who later designed Ada.\nLIS was used to implement the compiler for the Ada-0 subset of Ada at Karlsruhe on the BS2000 Siemens operating system. Later on the Karlsruhe Ada compilation system got rewritten in Ada-0 itself, which was easy, because LIS and Ada-0 are very close."
},
{"id": 309, 
"name": "LPC (programming language)",
"summary": "LPC (short for Lars Pensjö C) is an object-oriented programming language derived from C and developed originally by Lars Pensjö to facilitate MUD building on LPMuds.  Though designed for game development, its flexibility has led to it being used for a variety of purposes, and to its evolution into the language Pike.LPC syntax places it in the family of C-like languages, with C and C++ its strongest influences."
},
{"id": 310, 
"name": "LSE (programming language)",
"summary": "LSE (French: Langage symbolique d'enseignement) is a programming language developed at Supélec in the late 1970s/early 1980s. It is similar to BASIC, except with French-language instead of English-language keywords. It was derived from an earlier language called LSD, also developed at Supélec. It is most commonly said to be an acronym for Langage Symbolique d'Enseignement (Symbolic Teaching Language), but other expansions are also known (e.g. Langage de Sup-Élec, or the more cynical Langage Sans Espoir (hopeless language)).\nIt originally flourished due to support from the French Ministry of National Education, but declined as the ministry lost interest. It went through a number of revisions; earlier versions of LSE lacked full support for structured programming, which later version added, along with exception handling."
},
{"id": 311, 
"name": "LYaPAS",
"summary": "Logical Language for the Representation of Synthesis Algorithms (LYaPAS, Russian: ЛЯПАС) is a programming language created in the Soviet Union in 1964, by Arkady D.Zakrevskij of the Laboratory of System Programming and Logical Synthesis, of the Academy of Sciences of the Byelorussian SSR, since renamed the National Academy of Sciences of Belarus.LYaPAS is an extension to the programming language APL, and was initially designed especially for non-numeric programming for the Soviet designed and built line of mainframe computers named Ural-1. An interesting feature of LYaPAS is its use of octal numbers.\nA further refinement of LYaPAS is LYaPAS-M."
},
{"id": 312, 
"name": "LabVIEW",
"summary": "Laboratory Virtual Instrument Engineering Workbench (LabVIEW) is a system-design platform and development environment for a visual programming language from National Instruments.\nThe graphical language is named \"G\"; not to be confused with G-code. Originally released for the Apple Macintosh in 1986, LabVIEW is commonly used for data acquisition, instrument control, and industrial automation on a variety of operating systems (OSs), including Microsoft Windows, various versions of Unix, Linux, and macOS.\nThe latest versions of LabVIEW are LabVIEW 2019 and LabVIEW NXG 3.1, released in May 2019."
},
{"id": 313, 
"name": "Ladder logic",
"summary": "Ladder logic was originally a written method to document the design and construction of relay racks as used in manufacturing and process control. Each device in the relay rack would be represented by a symbol on the ladder diagram with connections between those devices shown. In addition, other items external to the relay rack such as pumps, heaters, and so forth would also be shown on the ladder diagram.\nLadder logic has evolved into a programming language that represents a program by a graphical diagram based on the circuit diagrams of relay logic hardware. Ladder logic is used to develop software for programmable logic controllers (PLCs) used in industrial control applications. The name is based on the observation that programs in this language resemble ladders, with two vertical rails and a series of horizontal rungs between them. While ladder diagrams were once the only available notation for recording programmable controller programs, today other forms are standardized in IEC 61131-3 (For example, as an alternative to the graphical ladder logic form, there is also a more assembly language like format called Instruction list within the  IEC 61131-3 standard.)."
},
{"id": 314, 
"name": "Language for Instruction Set Architecture",
"summary": "An instruction set architecture (ISA) is an abstract model of a computer. It is also referred to as architecture or computer architecture. A realization of an ISA is called an implementation. An ISA permits multiple implementations that may vary in performance, physical size, and monetary cost (among other things); because the ISA serves as the interface between software and hardware. Software that has been written for an ISA can run on different implementations of the same ISA. This has enabled binary compatibility between different generations of computers to be easily achieved, and the development of computer families. Both of these developments have helped to lower the cost of computers and to increase their applicability. For these reasons, the ISA is one of the most important abstractions in computing today.\nAn ISA defines everything a machine language programmer needs to know in order to program a computer. What an ISA defines differs between ISAs; in general, ISAs define the supported data types, what state there is (such as the main memory and registers) and their semantics (such as the memory consistency and addressing modes), the instruction set (the set of machine instructions that comprises a computer's machine language), and the input/output model."
},
{"id": 315, 
"name": "Lasso (programming language)",
"summary": "Lasso is an application server and server management interface used to develop internet applications and is a general-purpose, high-level programming language. Originally a web datasource connection tool, for Filemaker and later included in Apple Computer's FileMaker 4.0 and Claris Homepage as CDML, it has since evolved into a complex language used to develop and serve large-scale internet applications and web pages.\nLasso includes a simple template system allowing code to control generation of HTML and other content types. Lasso is object-oriented and every value is an object. It also supports procedural programming through unbound methods. The language uses traits and multiple dispatch extensively.\nLasso has a dynamic type system, where objects can be loaded and augmented at runtime, automatic memory management, a comprehensive standard library, and three compiling methodologies: dynamic (comparable to PHP-Python), just-in-time compilation (comparable to Java or .NET Framework), and pre-compiled (comparable to C). Lasso also supports Query Expressions, allowing elements within arrays and other types of sequences to be iterated, filtered, and manipulated using a natural language syntax similar to SQL.\nLasso includes full Unicode character support in the standard string object, allowing it to serve and support multi-byte characters such as Japanese and Swedish, and supports transparent UTF-8 conversion when writing string data to the network or file system.\nLasso is often used as a scripting language, and also used in a wide range of non-scripting contexts. Lasso code can be packaged into standalone executable programs called \"LassoApps\", in which folder structures are compiled into single files.The Lasso Server application server runs as a system service and receives requests from the web server through FastCGI. It then hands the request off to the appropriate Lasso Instance, which formulates the response. Multiple individual instances are supported, allowing one server to handle multiple sites, each as separate processes. The server uses a high performance IO-based green threading system designed for multi-core systems.\nLasso can be compared to the server-side scripting languages PHP and Python, ColdFusion, Ruby, etc.Free for development, Lasso allows partial access to its source code, allowing developers to add or change major components of the language (for example, Ke Carlton's DS implementation of the Lasso Inline). Licensing comes in both SAS and stand-alone versions."
},
{"id": 316, 
"name": "Lava (programming language)",
"summary": "Lava is an experimental, visual object-oriented, interpreter-based programming language with an associated programming environment (Lava Programming Environment or LavaPE) that uses structure editors instead of text editors. Only comments, constants, and new identifiers may be entered as text.\nDeclarations are represented in LavaPE as tree structures whose subtrees may be collapsed or expanded. The properties of the declared Lava entities can be edited through pop-up dialogs.\nAlthough executable code has a traditional text representation in LavaPE, it can be edited only as complete syntactic units, rather than character by character. If you insert a new syntactic construct, it will typically contain \"placeholders\" (syntactic variables) that can then be replaced by concrete constructs; the latter may in turn contain syntactic variables, etc. LavaPE provides a tool button for every type of syntactic construct, and a button is enabled only if it is syntactically correct to insert the associated construct at the selected place.\nFurther characteristic properties of Lava and LavaPE include the following:\n\nIt provides strict syntactic separation of interface (public) and implementation (private) sections of a Lava class.\nIt distinguishes variable \"state objects\" from constant \"value objects\"; the latter cannot be modified any longer after creation/initialization.\nIt supports \"virtual types\": type parameters of classes and packages (families of related classes). As a consequence, undermining of strong type checks by \"type casts\" is no longer required.\nIt uses recursion and logical quantifiers instead of traditional loop constructs.\nIt uses single assignment; i.e., a value can be assigned to a variable only once within the same branch of a function.\nIt supports refactoring extensively via the LavaPE structure editors.\nIt distinguishes between constituents (sub-objects) and object acquaintances (pointers to independent objects). Copying and deletion of complex objects is largely facilitated in this way.\nSince release 0.9.0, LavaPE completely prevents inadvertent access to uninitialized variables and null objects already at programming time by complete static initialization checks.Lava is open source software using the GPL license (see also Lava at the Free Software Foundation and at KDE-Apps.org). It currently runs on Microsoft Windows, Linux and Mac OS X platforms."
},
{"id": 317, 
"name": "Legoscript",
"summary": "Lego Mindstorms is a hardware and software platform which is produced by Lego for the development of programmable robots based on Lego building blocks. Each version of the system includes an intelligent brick computer that controls the system, a set of modular sensors and motors, and Lego parts from the Technic line to create the mechanical systems.\nSince creation, there have been four generations of the Mindstorms platform: the original Robotics Invention System, NXT, NXT 2.0, and EV3. With each platform release, the motor and sensor capabilities expanded. The latest system, Lego Mindstorms EV3, was released on September 1, 2013. Some robot competitions use this set, such as the FIRST Lego League and the World Robot Olympiad."
},
{"id": 318, 
"name": "LilyPond",
"summary": "LilyPond is a computer program and file format for music engraving. One of LilyPond's major goals is to produce scores that are engraved with traditional layout rules, reflecting the era when scores were engraved by hand.\nLilyPond is cross-platform, and is available for several common operating systems; released under the terms of the GNU General Public License, LilyPond is free software."
},
{"id": 319, 
"name": "Limbo (programming language)",
"summary": "No summary available"
},
{"id": 320, 
"name": "Limnor",
"summary": "Limnor is a generic-purpose codeless and visual programming system. The aim is to enable users to create computer software without directly coding in a texture programming language.  It can be extended by software developers. The general idea of Limnor codeless programming is to add \"Actions\" to classes."
},
{"id": 321, 
"name": "Linden Scripting Language",
"summary": "Second Life is an online virtual world, developed and owned by the San Francisco-based  firm Linden Lab and launched on June 23, 2003. By 2013, Second Life had approximately one million regular users; at the end of 2017 active user count totals \"between 800,000 and 900,000\". In many ways, Second Life is similar to massively multiplayer online role-playing games; however, Linden Lab is emphatic that their creation is not a game: \"There is no manufactured conflict, no set objective\".The virtual world can be accessed freely via Linden Lab's own client programs or via alternative third-party viewers. Second Life users, also called residents, create virtual representations of themselves, called avatars, and are able to interact with places, objects and other avatars. They can explore the world (known as the grid), meet other residents, socialize, participate in both individual and group activities, build, create, shop, and trade virtual property and services with one another.\nThe platform principally features 3D-based user-generated content. Second Life also has its own virtual currency, the Linden Dollar, which is exchangeable with real world currency.Second Life is intended for people aged 16 and over, with the exception of 13–15-year-old users, who are restricted to the Second Life region of a sponsoring institution (e.g., a school).Built into the software is a 3D modeling tool based on simple geometric shapes that allows residents to build virtual objects. There is also a procedural scripting language, Linden Scripting Language, which can be used to add interactivity to objects.  Sculpted prims (\"sculpties\"), mesh, textures for clothing or other objects, animations, and gestures can be created using external software and imported. The Second Life terms of service provide that users retain copyright for any content they create, and the server and client provide simple digital rights management (DRM) functions. However, Linden Lab changed their terms of service in August 2013 to be able to use user-generated content for any purpose. The new terms of service prevent users from using textures from third-party texture services, as some of them pointed out explicitly."
},
{"id": 322, 
"name": "Lingo (programming language)",
"summary": "Lingo is a verbose object-oriented (OO) scripting language developed by John H. Thompson for use in Adobe Director (formerly Macromedia Director). Lingo is used to develop desktop application software, interactive kiosks, CD-ROMs and Adobe Shockwave content.Lingo is the primary programming language on the Adobe Shockwave platform, which dominated the interactive multimedia product market during the 1990s. Various graphic adventure games were developed with Lingo during the 1990s, including The Journeyman Project, Total Distortion, Mia's Language Adventure, Mia's Science Adventure, and the Didi & Ditto series. Hundreds of free online video games were developed using Lingo, and published on websites such as Miniclip and Shockwave.com.\nLingo can be used to build user interfaces, to manipulate raster graphics, vector graphics and 3D computer graphics, and other data processing tasks. Lingo supports specialized syntax for image processing and 3D object manipulation. 3D meshes can also be created on the fly using Lingo."
},
{"id": 323, 
"name": "Lisp (programming language)",
"summary": "Lisp (historically LISP) is a family of computer programming languages with a long history and a distinctive, fully parenthesized prefix notation.\nOriginally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only Fortran is older, by one year. Lisp has changed since its early days, and many dialects have existed over its history. Today, the best-known general-purpose Lisp dialects are Clojure, Common Lisp, and Scheme.\nLisp was originally created as a practical mathematical notation for computer programs, influenced by the notation of Alonzo Church's lambda calculus. It quickly became the favored programming language for artificial intelligence (AI) research. As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, and the read–eval–print loop.The name LISP derives from \"LISt Processor\". Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists. Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.\nThe interchangeability of code and data gives Lisp its instantly recognizable syntax. All program code is written as s-expressions, or parenthesized lists. A function call or syntactic form is written as a list with the function or operator's name first, and the arguments following; for instance, a function f that takes three arguments would be called as (f arg1 arg2 arg3)."
},

{"id": 330, 
"name": "Lite-C",
"summary": "Lite-C is a programming language for multimedia applications and personal computer games, using a syntax subset of the C language with some elements of the C++ language. Its main difference to C is the native implementation of multimedia and computer game related objects like sounds, images, movies, GUI elements, 2D and 3D models, collision detection and rigid body physics. Lite-C executables are compiled instead of interpreted. Lite-C runs on 32-bit and 64-bit Windows XP or Vista operating systems.\nLite-C claims to allow very fast programming with a minimum of code, and easy access to non-programmers. For this, the developer provides a 25-lesson workshop that especially deals with the game and multimedia related objects of the language. \nLite-C supports the Windows API and the Component Object Model (COM); therefore OpenGL and DirectX programs can directly be written in lite-C. It has integrated the free A8 rendering engine."
},
{"id": 331, 
"name": "Lithe (programming language)",
"summary": "Lithe is an experimental programming language created in 1982 by David Sandberg at the University of Washington which allows the programmer to freely choose their own syntax. Lithe combines the ideas of syntax-directed translation and classes in a novel manner that results in a remarkably simple yet powerful language."
},
{"id": 332, 
"name": "Little Computer 3",
"summary": "Little Computer 3, or LC-3, is a type of computer educational programming language, an assembly language, which is a type of low-level programming language.\nIt features a relatively simple instruction set, but can be used to write moderately complex assembly programs, and is a theoretically viable target for a C compiler. The language is less complex than x86 assembly but has many features similar to those in more complex languages. These features make it useful for beginning instruction, so it is most often used to teach fundamentals of programming and computer architecture to computer science and computer engineering students.\nThe LC-3 was developed by Yale N. Patt at the University of Texas at Austin and Sanjay J. Patel at the University of Illinois at Urbana–Champaign. Their specification of the instruction set, the overall architecture of the LC-3, and a hardware implementation can be found in the second edition of their textbook. Courses based on the LC-3 and Patt and Patel's book are offered in many computer engineering and computer science departments."
},
{"id": 333, 
"name": "Little Implementation Language",
"summary": "LIL, the Little Implementation Language, was a system programming language during the early days of Unix history on PDP-11 machines. It was written by P. J. Plauger of Bell Labs.\nLIL attempted to fill the gap between assemblers and machine-independent system implementation languages (such as the C programming language), by basically adding structured programming to the PDP-11 assembly language. LIL resembled PL360 with C-like flow control syntax.\nThe LIL compiler \"lc\" was part of Fifth Edition Unix (1974), but was dropped by Sixth Edition Unix (1975). Plauger left Bell Labs in the same year.\nPlauger explains why LIL was abandoned in Bell Labs in favor of C: [1]\n\n... LIL is, however, a failure. Its stiffest competition at Bell Labs is the language C, which is higher level, and machine independent. Every time it looked like C was too expensive to use for a particular project, LIL was considered. But almost every time, it proved easier (and more rewarding) to improve C, or its runtime support, or the hardware, than to invest time in yet another language. ... A machine independent language is always superior -- even for writing machine dependent code (it's easier to find trained programmers) -- so long as the overhead can be endured. It is clear now that writing straightforward code and then measuring it is the formula for the best end product. At worst there will be 5-15 per cent overhead, which is seldom critical. Once system writers become mature enough to recognize this basic truth, they gravitate naturally toward machine independent SILs. ... it looks like the little implementation language is an idea whose time as come -- and gone."
},
{"id": 334, 
"name": "Little b (programming language)",
"summary": "Little b is a domain-specific programming language, more specifically, a modeling language, designed to build modular mathematical models of biological systems.  It was designed and authored by Aneil Mallavarapu.  Little b is being developed in the Virtual Cell Program at Harvard Medical School, headed by mathematician Jeremy Gunawardena.\nThis language is based on Lisp and is meant to allow modular programming to model biological systems.  It will allow more flexibility to facilitate rapid change that is required to accurately capture complex biological systems.\nThe language draws on techniques from artificial intelligence and symbolic mathematics, and provides  syntactic conveniences derived from object-oriented languages.  The language was originally denoted with a lowercase b (distinguishing it from B, the predecessor to the widely used C programming language, but the name was eventually changed to \"little b\" to avoid confusion and to pay homage to Smalltalk, the first object-oriented programming language."
},
{"id": 335, 
"name": "LiveCode",
"summary": "LiveCode (formerly Revolution and MetaCard) is a cross-platform rapid application development runtime environment inspired by HyperCard. It features the LiveCode Script (formerly MetaTalk) programming language which belongs to the family of xTalk scripting languages like HyperCard's HyperTalk.The environment was introduced in 2001.  The \"Revolution\" development system was based on the MetaCard engine technology which Runtime Revolution later acquired from MetaCard Corporation in 2003. The platform won the Macworld Annual Editor's Choice Award for \"Best Development Software\" in 2004.  \"Revolution\" was renamed \"LiveCode\" in the fall of 2010.  \"LiveCode\" is developed and sold by Runtime Revolution Ltd., based in Edinburgh, Scotland. In March, 2015, the company was renamed \"LiveCode Ltd.\", to unify the company name with the product. In April 2013 a free/open source version 'LiveCode Community Edition 6.0' was published after a successful crowdfunding campaign at Kickstarter. The code base was re-licensed and made available as free and open source software with a version in April 2013.\nLiveCode runs on iOS, Android, OS X, Windows 95 through Windows 10, Raspberry Pi and several variations of Unix, including Linux, Solaris, and BSD. It can be used for mobile, desktop and server/CGI applications. The iOS (iPhone and iPad) version was released in December 2010. The first version to deploy to the Web was released in 2009. It is the most widely used HyperCard/HyperTalk clone, and the only one that runs on all major operating systems.\nA developer release of v.8 was announced in New York on March 12, 2015. This major enhancement to the product includes a new, separate development language, known as \"LiveCode Builder\",  which is capable of creating new object classes called \"widgets\". In earlier versions, the set of object classes was fixed, and could be enhanced only via the use of ordinary procedural languages such as C. The new language, which runs in its own IDE, is a departure from the transitional x-talk paradigm in that it permits typing of variables. But the two environments are fully integrated, and apart from the ability to create new objects, development in LiveCode proceeds in the normal way, within the established IDE.\nA second crowdfunding campaign to Bring HTML5 to LiveCode reached funding goals of nearly $400,000 USD on July 31, 2014. LiveCode developer release 8.0 DP4 (August 31, 2015) was the first to include a standalone deployment option to HTML5."
},
{"id": 336, 
"name": "LiveScript",
"summary": "LiveScript is a functional programming language that compiles to JavaScript. It was created by Jeremy Ashkenas—the creator of CoffeeScript—along with Satoshi Muramaki, George Zahariev, and many others. For a brief period in the 1990s, LiveScript was the name of JavaScript."
},
{"id": 337, 
"name": "Logo (programming language)",
"summary": "Logo is an educational programming language, designed in 1967 by Wally Feurzeig, Seymour Papert, and Cynthia Solomon. Logo is not an acronym: the name was coined by Feurzeig while he was at Bolt, Beranek and Newman, and derives from the Greek logos, meaning word or thought.\nA general-purpose language, Logo is widely known for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on screen or with a small robot termed a turtle. The language was conceived to teach concepts of programming related to Lisp and only later to enable what Papert called \"body-syntonic reasoning\", where students could understand, predict, and reason about the turtle's motion by imagining what they would do if they were the turtle. There are substantial differences among the many dialects of Logo, and the situation is confused by the regular appearance of turtle graphics programs that are named Logo.\nLogo is a multi-paradigm adaptation and dialect of Lisp, a functional programming language. There is no standard Logo, but UCBLogo has the best facilities for handling lists, files, I/O, and recursion in scripts, and can be used to teach all computer science concepts, as UC Berkeley lecturer Brian Harvey did in his Computer Science Logo Style trilogy.Logo is usually an interpreted language, although there have been developed compiled Logo dialects (such as Lhogho and Liogo). Logo is not case-sensitive but retains the case used for formatting."
},
{"id": 338, 
"name": "Logtalk",
"summary": "Logtalk is an object-oriented logic programming language that extends and leverages the Prolog language with a feature set suitable for programming in the large. It provides support for encapsulation and data hiding, separation of concerns and enhanced code reuse. Logtalk uses standard Prolog syntax with the addition of a few operators and directives.\nThe Logtalk language implementation is distributed under an open source license and can run using a Prolog implementation (compliant with official and de facto standards) as the back-end compiler."
},
{"id": 339, 
"name": "LotusScript",
"summary": "LotusScript is an object oriented programming language used by Lotus Notes (since version 4.0) and other IBM Lotus Software products.\nLotusScript is similar to Visual Basic.  Developers familiar with one can easily understand the syntax and structure of code in the other.  The major differences between the two are in their respective Integrated Development Environments and in the product-specific object classes provided in each language that are included.  VB includes a richer set of classes for UI manipulation, whereas LotusScript includes a richer set of application-specific classes for Lotus Notes, Lotus Word Pro and Lotus 1-2-3.  In the case of Lotus Notes, there are classes to work with Notes databases, documents (records) in those databases, etc. These classes can also be used as OLE Automation objects outside the Lotus Notes environment, from Visual Basic. \nLotusScript also allows the definition of user-defined types and classes, although it is not possible to inherit from the product-specific classes. LotusScript programs can access Microsoft Office documents by using the OLE automation in libraries from MS Office."
},
{"id": 340, 
"name": "Lua (programming language)",
"summary": "Lua ( LOO-ə; from Portuguese: lua [ˈlu.(w)ɐ] meaning moon) is a lightweight, high-level, multi-paradigm programming language designed primarily for embedded use in applications. Lua is cross-platform, since the interpreter of compiled bytecode is written in ANSI C, and Lua has a relatively simple C API to embed it into applications.Lua was originally designed in 1993 as a language for extending software applications to meet the increasing demand for customization at the time. It provided the basic facilities of most procedural programming languages, but more complicated or domain-specific features were not included; rather, it included mechanisms for extending the language, allowing programmers to implement such features. As Lua was intended to be a general embeddable extension language, the designers of Lua focused on improving its speed, portability, extensibility, and ease-of-use in development."
},
{"id": 341, 
"name": "Lucid (programming language)",
"summary": "Lucid is a dataflow programming language designed to experiment with non-von Neumann programming models. It was designed by Bill Wadge and Ed Ashcroft and described in the 1985 book Lucid, the Dataflow Programming Language.pLucid was the first interpreter for Lucid."
},
{"id": 342, 
"name": "Lustre (programming language)",
"summary": "Lustre is a formally defined, declarative, and synchronous dataflow programming language for programming reactive systems. It began as a research project in the early 1980s. A formal presentation of the language can be found in the 1991 Proceedings of the IEEE. In 1993 it progressed to practical, industrial use in a commercial product as the core language of the industrial environment SCADE, developed by Esterel Technologies. It is now used for critical control software in aircraft, helicopters, and nuclear power plants."
},
{"id": 343, 
"name": "Lynx (programming language)",
"summary": "Lynx is a programming language for large distributed networks, using remote procedure calls. It was developed by the University of Wisconsin–Madison in 1984 for the Charlotte multicomputer operating system. \nIn 1986 at the University of Rochester Lynx was ported to the Chrysalis operating system running on a BBN Butterfly multiprocessor."
},
{"id": 344, 
"name": "M Sharp (programming language)",
"summary": "F# (pronounced F sharp) is a general purpose, strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. F# is most often used as a cross-platform Common Language Infrastructure (CLI) language, but it can also generate JavaScript and graphics processing unit (GPU) code.F# is developed by the F# Software Foundation, Microsoft and open contributors. An open source, cross-platform compiler for F# is available from the F# Software Foundation. F# is also a fully supported language in Visual Studio and Xamarin Studio. Other tools supporting F# development include Mono, MonoDevelop, SharpDevelop, MBrace, and WebSharper. Plug-ins supporting F# exist for many widely used editors, most notably the Ionide extension for Atom and Visual Studio Code, and integrations for other editors such as Vim, Emacs, Sublime Text, and Rider.\nF# is a member of the ML language family and originated as a .NET Framework implementation of a core of the programming language OCaml. It has also been influenced by C#, \nPython, Haskell, Scala, and Erlang."
},
{"id": 345, 
"name": "M2001",
"summary": "M2001 is a modular educational mathematical programming language for developing and presenting mathematical algorithms, from the modern discrete to the classical continuous mathematics. M2001 is built on a semantic framework that is based in category theory and has a syntax similar to that of Pascal or Modula-2.\nIt is designed purely for pedagogic use, so efficiency and ease of implementation have been far less important in its development than generality and range of application. It was created to play an important role in forming a formal algorithmic foundation for first-year college math students."
},
{"id": 346, 
"name": "M4 (computer language)",
"summary": "m4 is a general-purpose macro processor included in all UNIX-like operating systems, and is a component of the POSIX standard.\nThe language was designed by Brian Kernighan and Dennis Ritchie for the original versions of UNIX. It is an extension of an earlier macro processor m3, written by Ritchie for the AP-3 minicomputer.The macro preprocessor operates as a text-replacement tool. It is employed to re-use text templates, typically in computer programming applications, but also in text editing and text-processing applications. Most users require m4 as a dependency of GNU autoconf."
},
{"id": 347, 
"name": "MAD (programming language)",
"summary": "MAD (Michigan Algorithm Decoder) is a programming language and compiler for the IBM 704 and later the IBM 709, IBM 7090, IBM 7040, UNIVAC 1107, UNIVAC 1108, Philco 210-211, and eventually the IBM S/370 mainframe computers. Developed in 1959 at the University of Michigan by Bernard Galler, Bruce Arden and Robert M. Graham, MAD is a variant of the ALGOL language. It was widely used to teach programming at colleges and universities during the 1960s and played a minor role in the development of CTSS, Multics, and the Michigan Terminal System computer operating systems.The archives at the Bentley Historical Library of the University of Michigan contain reference materials on the development of MAD and MAD/I, including three linear feet of printouts with hand-written notations and original printed manuals."
},
{"id": 348, 
"name": "MAPPER",
"summary": "No summary available"
},
{"id": 349, 
"name": "MARK IV (software)",
"summary": "MARK IV is a fourth-generation programming language that was created by Informatics, Inc.  in the 1960s. Informatics took advantage of IBM's decision to unbundle their software; MARK IV was the first \"software product to have cumulative sales of $10 million\".\nMARK IV was developed for IBM Systems (360 and 370) and for the RCA Spectra 70. Its main benefit was allowing faster application development on the order of 6 to 10 times faster than doing a system using a 3GL, such as COBOL. MARK IV, being an early 4GL, allowed user development of systems related to business. In a 1971 ad by Informatics, there are several quotes from customers, such as:\n\nWe conservatively estimate that the benefits derived from the MARK IV System have completely returned  the cost of our investment in a period of less than 3 months.\nMARK IV runs ... handle Accounts Receivable, Inventory, Sales Analyses, etc. on about 26 different factories.MARK IV went to Sterling Software in 1985 as part of that company's acquisition of Informatics General.  As VISION:BUILDER it is now part of the product suite from Computer Associates."
},
{"id": 350, 
"name": "MATH-MATIC",
"summary": "MATH-MATIC is the marketing name for the AT-3 (Algebraic Translator 3) compiler, an early programming language for the UNIVAC I and UNIVAC II.\nMATH-MATIC was written beginning around 1955 by a team led by Charles Katz under the direction of Grace Hopper. A preliminary manual was produced in 1957 and a final manual the following year.\nSyntactically, MATH-MATIC was similar to Univac's contemporaneous business-oriented language, FLOW-MATIC, differing in providing algebraic-style expressions and floating-point arithmetic, and arrays rather than record structures."
},
{"id": 351, 
"name": "MATLAB",
"summary": "MATLAB (matrix laboratory) is a multi-paradigm numerical computing environment and proprietary programming language developed by MathWorks. MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages.\nAlthough MATLAB is intended primarily for numerical computing, an optional toolbox uses the MuPAD symbolic engine allowing access to symbolic computing abilities. An additional package, Simulink, adds graphical multi-domain simulation and model-based design for dynamic and embedded systems.\nAs of 2018, MATLAB has more than 3 million users worldwide. MATLAB users come from various backgrounds of engineering, science, and economics."
},
{"id": 352, 
"name": "MDL (programming language)",
"summary": "MDL (More Datatypes than Lisp or MIT Design Language) is a programming language, a descendant of the language Lisp. Its initial purpose was to provide high level language support for the Dynamic Modeling Group at Massachusetts Institute of Technology's (MIT) Project MAC. It was initially developed in 1971 on a PDP-10 computer on a time-sharing operating system named Incompatible Timesharing System (ITS). It later ran on TENEX, TOPS-20,, BSD, and AEGIS.\nThe initial development team consisted of Gerald Sussman and Carl Hewitt of the Artificial Intelligence Lab, and Chris Reeve, Bruce Daniels, and David Cressey of the Dynamic Modeling Group. Later, Stu Galley, also of the Dynamic Modeling Group, wrote the MDL documentation.MDL was initially called Muddle. This style of self-deprecating humor was not widely understood or appreciated outside of Project MAC and a few other early citadels of information technology. So the name was sanitized to MDL.MDL provides several enhancements to classic Lisp.  It supports several built-in data types, including lists, strings and arrays, and user-defined data types.  It offers multithreaded expression evaluation and coroutines. Variables can carry both a local value within a scope, and a global value, for passing data between scopes. Advanced built-in functions supported interactive debugging of MDL programs, incremental development, and reconstruction of source programs from object programs.\nAlthough MDL is obsolete, some of its features have been incorporated in later versions of Lisp.  Gerald Sussman went on to develop the Scheme language, in collaboration with Guy Steele, who later wrote the specifications for Common Lisp and Java.  Carl Hewitt had already published the idea for the language Planner before the MDL project began, but his subsequent thinking on Planner reflected lessons learned from building MDL.  Planner concepts influenced languages such as Prolog and Smalltalk. Smalltalk and Simula, in turn, influenced Hewitt's future work on the actor model.\nBut the largest influence that MDL had was on the software genre of interactive fiction (IF).  An IF game named Zork, sometimes called Dungeon, was first written in MDL. Later, Reeve, Daniels, Galley and other members of Dynamic Modeling went on to start Infocom, a company that produced many early commercial works of interactive fiction."
},
{"id": 353, 
"name": "MHEG-5",
"summary": "MHEG-5, or ISO/IEC 13522-5, is part of a set of international standards relating to the presentation of multimedia information, standardised by the Multimedia and Hypermedia Experts Group (MHEG). It is most commonly used as a language to describe interactive television services."
},
{"id": 354, 
"name": "MIIS (programming language)",
"summary": "MIIS (Meditech Interpretive Information System) is a MUMPS-like programming language that was created by A.Neil Pappalardo and Curt W. Marble, on a DEC PDP at Mass General Hospital from 1964 to 1968. MUMPS evolution took two major directions: MUMPS proper and MIIS. MUMPS became an ANSI and ISO-standard language. When many MUMPS implementations standardized to be compatible, MIIS did not standardize, but became a proprietary system instead.\nAs an example of the differences between MUMPS and MIIS, the value of a logical expression in MUMPS may be false = zero (0) or true = non-zero, canonically, one (1). In MIIS, the value false is the empty string and the value of true is a string consisting of the ASCII delete character (code 127 decimal).\nThere is also a philosophical difference between the dialects.  MIIS often takes the approach that code should march along, regardless of possible errors, where MUMPS will error out to prevent more serious problems.  For example, when encountering an undefined variable, MUMPS generates an error where MIIS treats it as nil.\nIn the 1980s Brigham and Women's Hospital in Massachusetts used MIIS to program their Data General Mainframe.\nIn 1986, SCAMC reported that Vancouver General Hospital also had an Integrated Cardiology Patient Management System written in MIIS.\nThe MIIS language has been used in programming library systems as well as health industry systems. The OCLC's library system is one example. It has also been used to create financial systems for insurance brokers, as seen in Ireland and the UK in the late 1970s."
},
{"id": 355, 
"name": "MIMIC",
"summary": "In evolutionary biology, mimicry is an evolved resemblance between an organism and another object, often an organism of another species. Mimicry may evolve between different species, or between individuals of the same species. Often, mimicry functions to protect a species from predators, making it an antipredator adaptation. Mimicry evolves if a receiver (such as a predator) perceives the similarity between a mimic (the organism that has a resemblance) and a model (the organism it resembles) and as a result changes its behaviour in a way that provides a selective advantage to the mimic. The resemblances that evolve in mimicry can be visual, acoustic, chemical, tactile, or electric, or combinations of these sensory modalities. Mimicry may be to the advantage of both organisms that share a resemblance, in which case it is a form of mutualism; or mimicry can be to the detriment of one, making it parasitic or competitive. The evolutionary convergence between groups is driven by the selective action of a signal-receiver or dupe. Birds, for example, use sight to identify palatable insects, whilst avoiding the noxious ones. Over time, palatable insects may evolve to resemble noxious ones, making them mimics and the noxious ones models. In the case of mutualism, sometimes both groups are referred to as \"co-mimics\". It is often thought that models must be more abundant than mimics, but this is not so. Mimicry may involve numerous species; many harmless species such as hoverflies are Batesian mimics of strongly defended species such as wasps, while many such well-defended species form Mullerian mimicry rings, all resembling each other. Mimicry between prey species and their predators often involves three or more species.In its broadest definition, mimicry can include non-living models. The specific terms masquerade and mimesis are sometimes used when the models are inanimate. For example, animals such as flower mantises, planthoppers, comma and geometer moth caterpillars resemble twigs, bark, leaves, bird droppings or flowers. Many animals bear eyespots, which are hypothesized to resemble the eyes of larger animals. They may not resemble any specific organism's eyes, and whether or not animals respond to them as eyes is also unclear. Nonetheless, eyespots are the subject of a rich contemporary literature. The model is usually another species, except in automimicry, where members of the species mimic other members, or other parts of their own bodies, and in inter-sexual mimicry, where members of one sex mimic members of the other.\n\nMimicry can result in an evolutionary arms race if mimicry negatively affects the model, and the model can evolve a different appearance from the mimic.p161 Mimicry should not be confused with other forms of convergent evolution that occurs when species come to resemble each other by adapting to similar lifestyles that have nothing to do with a common signal receiver. Mimics may have different models for different life cycle stages, or they may be polymorphic, with different individuals imitating different models, such as in Heliconius butterflies. Models themselves may have more than one mimic, though frequency dependent selection favours mimicry where models outnumber mimics. Models tend to be relatively closely related organisms, but mimicry of vastly different species is also known. Most known mimics are insects, though many other examples including vertebrates are also known. Plants and fungi may also be mimics, though less research has been carried out in this area."
},
{"id": 356, 
"name": "MIRC scripting language",
"summary": "The mIRC scripting language (often unofficially abbreviated to \"mSL\") is the scripting language embedded in mIRC, an IRC client for Windows."
},
{"id": 357, 
"name": "MIVA Script",
"summary": "Miva Script is a proprietary computer scripting language mainly used for internet applications such as e-commerce. As of 2015, it is developed, maintained and owned by Miva Merchant, Inc., based in San Diego, California.\nMany web hosting companies support Miva Script on their servers, but it is significantly less widespread than other popular web languages."
},
{"id": 358, 
"name": "ML (programming language)",
"summary": "ML (\"Meta Language\") is a general-purpose functional programming language.  It has roots in Lisp, and has been characterized as \"Lisp with types\".  ML is a statically-scoped functional programming language like Scheme.  It is known for its use of the polymorphic Hindley–Milner type system, which automatically assigns the types of most expressions without requiring explicit type annotations, and ensures type safety – there is a formal proof that a well-typed ML program does not cause runtime type errors.   ML provides pattern matching for function arguments, garbage collection, imperative programming, call-by-value and currying.  It is used heavily in programming language research and is one of the few languages to be completely specified and verified using formal semantics.  Its types and pattern matching make it well-suited and commonly used to operate on other formal languages, such as in compiler writing, automated theorem proving, and formal verification."
},
{"id": 359, 
"name": "MOO (programming language)",
"summary": "The MOO programming language is a relatively simple programming language used to support the MOO Server. It is dynamically typed and uses a prototype-based object-oriented system, with syntax roughly derived from the ADA school of programming languages."
},
{"id": 360, 
"name": "MPD (programming language)",
"summary": "Multithreaded, Parallel, and Distributed Programming (MPD) is a concurrent programming language whose syntax is derived from the one used in the book Foundations of Multithreaded, Parallel, and Distributed Programming. The name lists the distinguishing features of the language, namely that it supports all three of these concurrent programming techniques.\nMPD is implemented as a variant of the SR programming language. It has a different parser, but it uses the same intermediate form and run-time system as SR. Consequently, MPD provides the same variety of concurrent programming mechanisms as does SR.\nMPD programs can execute on single processors, shared-memory multiprocessors, or clusters of (homogeneous) processors. The implementation transparently supports a variety of different kinds of processors and Unix systems."
},
{"id": 361, 
"name": "MUMPS",
"summary": "Mumps is a viral disease caused by the mumps virus. Initial signs and symptoms often include fever, muscle pain, headache, poor appetite, and feeling generally unwell. This is then usually followed by painful swelling of one or both parotid salivary glands. Symptoms typically occur 16 to 18 days after exposure and resolve after 7 to 10 days. Symptoms are often more severe in adults than in children. About a third of people have mild or no symptoms. Complications may include meningitis (15%), pancreatitis (4%), inflammation of the heart, permanent deafness, and testicular inflammation, which uncommonly results in infertility. Women may develop ovarian swelling, but this does not increase the risk of infertility.Mumps is highly contagious and spreads rapidly among people living in close quarters. The virus is transmitted by respiratory droplets or direct contact with an infected person. Only humans get and spread the disease. People are infectious from about 7 days before onset of parotid inflammation to about 8 days after. Once an infection has run its course, a person is typically immune for life. Reinfection is possible, but the ensuing infection tends to be mild. Diagnosis is usually suspected due to parotid swelling and can be confirmed by isolating the virus on a swab of the parotid duct. Testing for IgM antibodies in the blood is simple and may be useful; however, it can be falsely negative in those who have been immunized.Mumps is preventable by two doses of the mumps vaccine. Most of the developed world includes it in their immunization programs, often in combination with measles, rubella, and varicella vaccine. Countries that have low immunization rates may see an increase in cases among older age groups and thus worse outcomes. No specific treatment is known. Efforts involve controlling symptoms with pain medication such as paracetamol (acetaminophen). Intravenous immunoglobulin may be useful in certain complications. Hospitalization may be required if meningitis or pancreatitis develops. About one in 10,000 people who are infected die.Without immunization, about 0.1 to 1.0% of the population is affected per year. Widespread vaccination has resulted in a more than 90% decline in rates of disease. Mumps is more common in the developing world, where vaccination is less common. Outbreaks, however, may still occur in a vaccinated population. Before the introduction of a vaccine, mumps was a common childhood disease worldwide. Larger outbreaks of disease typically occurred every 2 to 5 years. Children between the ages of 5 and 9 were most commonly affected. Among immunized populations, those in their early 20s often are affected. Around the equator, it often occurs all year round, while in the more northerly and southerly regions of the world, it is more common in the winter and spring. Painful swelling of the parotid glands and testicles was described by Hippocrates in the fifth century BCE."
},
{"id": 362, 
"name": "Machine code",
"summary": "Machine code is a computer program written in machine language instructions that can be executed directly by a computer's central processing unit (CPU). Each instruction causes the CPU to perform a very specific task, such as a load, a store, a jump, or an ALU operation on one or more units of data in CPU registers or memory.\nMachine code is a strictly numerical language which is intended to run as fast as possible, and may be regarded as the lowest-level representation of a compiled or assembled computer program or as a primitive and hardware-dependent programming language. While it is possible to write programs directly in machine code, it is tedious and error prone to manage individual bits and calculate numerical addresses and constants manually. For this reason, programs are very rarely written directly in machine code in modern contexts, but may be done for low level debugging, program patching (especially when assembler source is not available) and assembly language disassembly.\nThe overwhelming majority of practical programs today are written in higher-level languages or assembly language. The source code is then translated to executable machine code by utilities such as compilers, assemblers, and linkers, with the important exception of interpreted programs, which are not translated into machine code. However, the interpreter itself, which may be seen as an executor or processor, performing the instructions of the source code, typically consists of directly executable machine code (generated from assembly or high-level language source code).\nMachine code is by definition the lowest level of programming detail visible to the programmer, but internally many processors use microcode or optimise and transform machine code instructions into sequences of micro-ops. This is not generally considered to be a machine code."
},
{"id": 363, 
"name": "Macsyma",
"summary": "Macsyma (; \"Project MAC's SYmbolic MAnipulator\") is one of the oldest general-purpose computer algebra systems  still in wide use. It was originally developed from 1968 to 1982 at MIT's Project MAC.\nIn 1982, Macsyma was licensed to Symbolics and became a commercial product. In 1992, Symbolics Macsyma was spun off to Macsyma, Inc., which continued to develop Macsyma until 1999. That version is still available for Microsoft's Windows XP operating system.\nThe 1982 version of MIT Macsyma remained available to academics and US government agencies, and it is distributed by the US Department of Energy (DOE). That version, DOE Macsyma, was maintained by Bill Schelter. Under the name of Maxima, it was released under the GPL in 1999, and remains under active maintenance."
},
{"id": 364, 
"name": "Magik (programming language)",
"summary": "Magik is an object-oriented programming language that supports multiple inheritance and polymorphism, and it is dynamically typed. It was designed and implemented in 1989 by Arthur Chance of Smallworld Systems Ltd. as part of Smallworld Geographical Information System (GIS). Following Smallworld's acquisition in 2000, Magik is now provided by GE Energy, still as part of its Smallworld technology platform.\nMagik (Inspirational Magik) was originally introduced in 1990 and has been improved and updated over the years. Its current version is 5.2.\nIn July 2012, Magik developers announced that they were in the process of porting Magik language on the Java virtual machine. The successful porting was confirmed by Oracle Corporation in November of the same year."
},
{"id": 365, 
"name": "Magma computer algebra system",
"summary": "Magma is a computer algebra system designed to solve problems in algebra, number theory, geometry and combinatorics. It is named after the algebraic structure magma. It runs on Unix-like operating systems, as well as Windows.\n\n"
},
{"id": 366, 
"name": "Maple (software)",
"summary": "Maple is a symbolic and numeric computing environment, and is also a multi-paradigm programming language.\nDeveloped by Maplesoft, Maple also covers other aspects of technical computing, including visualization, data analysis, matrix computation, and connectivity.\nA toolbox, MapleSim, adds functionality for multidomain physical modeling and code generation.\n\n"
},
{"id": 367, 
"name": "Markup language",
"summary": "In computer text processing, a markup language is a system for annotating a document in a way that is syntactically distinguishable from the text. The idea and terminology evolved from the \"marking up\" of paper manuscripts (i.e., the revision instructions by editors), which is traditionally written with a red or blue pencil on authors' manuscripts. In digital media, this \"blue pencil instruction text\" was replaced by tags, which indicate what the parts of the document are, rather than details of how they might be shown on some display. This lets authors avoid formatting every instance of the same kind of thing redundantly (and possibly inconsistently). It also avoids the specification of fonts and dimensions which may not apply to many users (such as those with different-size displays, impaired vision and screen-reading software).\nEarly markup systems typically included typesetting instructions, as troff, TeX and LaTeX do, while Scribe and most modern markup systems name components, and later process those names to apply formatting or other processing, as in the case of XML.\nSome markup languages, such as the widely used HTML, have pre-defined presentation semantics—meaning that their specification prescribes generally how to present the structured data on particular media. Others, such as XML and its predecessor SGML, allow but do not impose such prescriptions—all of the while allowing users to define any custom document components as they wish.\nHyperText Markup Language (HTML), one of the document formats of the World Wide Web, is an application of SGML and XML. Other applications, such as DocBook, Open eBook, JATS and others, are heavily used in the communication of work between authors, editors, and printers."
},
{"id": 368, 
"name": "Mary (programming language)",
"summary": "Mary is a programming language designed and implemented by RUNIT at Trondheim, Norway in the 1970s. It borrowed many features from ALGOL 68 but was designed for systems programming (machine-oriented programming).\nAn unusual feature of its syntax was that expressions were constructed using the conventional infix operators, but all of them had the same precedence and evaluation went from left to right unless there were brackets. Assignment had the destination on the right and assignment was considered just another operator.\nSimilar to C, several language features appear to have existed to allow producing reasonably well optimised code, despite a quite primitive code generator in the compiler. These included operators similar to the += et alter in C and explicit register declarations for variables.\nNotable features:\n\nDataflow syntax – values flow from left to right, including assignment\nMost constructs could be used in expressions: blocks, IF, CASE, etc.\nText-based recursive macros\nOverloaded user-defined operators, not constrained to predefined identifiers as in C++\nAutomatic building and dereferencing of pointers from type context\nScalar range types\nArray and set enumeration in loop iterators\nDynamic array descriptors (ROW)A book describing Mary was printed in 1974 (Fourth and last edition in 1979): Mary Textbook by Reidar Conradi & Per Holager.\nCompilers were made for Kongsberg Våpenfabrikk's SM-4 and Norsk Data Nord-10/ND-100 mini-computers. The original Mary compiler was written in NU ALGOL, ran on the Univac-1100 series and was used to bootstrap a native compiler for ND-100/Sintran-III. RUNIT implemented a CHILL compiler written in Mary which ran on ND-100 and had Intel 8086 and 80286 targets. When this compiler was ported to the VAX platform, a common backend for Mary and CHILL was implemented. Later, backends for i386 and SPARC were available. Since the Mary compiler was implemented in Mary, it was possible to run the compiler on all these platforms.\nMary is no longer maintained."
},
{"id": 369, 
"name": "Mathcad",
"summary": "Mathcad is computer software primarily intended for the verification, validation, documentation and re-use of engineering calculations. First introduced in 1986 on DOS, it was the first to introduce live editing of typeset mathematical notation, combined with its automatic computations."
},
{"id": 370, 
"name": "Mathematica",
"summary": "Mathematics (from Greek μάθημα máthēma, \"knowledge, study, learning\") includes the study of such topics as quantity (number theory), structure (algebra), space (geometry), and change (mathematical analysis). It has no generally accepted definition.Mathematicians seek and use patterns to formulate new conjectures; they resolve the truth or falsity of conjectures by mathematical proof. When mathematical structures are good models of real phenomena, mathematical reasoning can be used to provide insight or predictions about nature. Through the use of abstraction and logic, mathematics developed from counting, calculation, measurement, and the systematic study of the shapes and motions of physical objects. Practical mathematics has been a human activity from as far back as written records exist. The research required to solve mathematical problems can take years or even centuries of sustained inquiry.\nRigorous arguments first appeared in Greek mathematics, most notably in Euclid's Elements. Since the pioneering work of Giuseppe Peano (1858–1932), David Hilbert (1862–1943), and others on axiomatic systems in the late 19th century, it has become customary to view mathematical research as establishing truth by rigorous deduction from appropriately chosen axioms and definitions. Mathematics developed at a relatively slow pace until the Renaissance, when mathematical innovations interacting with new scientific discoveries led to a rapid increase in the rate of mathematical discovery that has continued to the present day.Mathematics is essential in many fields, including natural science, engineering, medicine, finance, and the social sciences. Applied mathematics has led to entirely new mathematical disciplines, such as statistics and game theory. Mathematicians engage in pure mathematics (mathematics for its own sake) without having any application in mind, but practical applications for what began as pure mathematics are often discovered later."
},
{"id": 371, 
"name": "Maude system",
"summary": "The Maude system is an implementation of rewriting logic developed at SRI International. It is similar in its general approach to Joseph Goguen's OBJ3 implementation of equational logic, but based on rewriting logic rather than order-sorted equational logic, and with a heavy emphasis on powerful metaprogramming based on reflection.\nMaude is free software, and tutorials are available online."
},
{"id": 372, 
"name": "Max (software)",
"summary": "Max, also known as Max/MSP/Jitter, is a visual programming language for music and multimedia developed and maintained by San Francisco-based software company Cycling '74. Over its more than thirty-year history, it has been used by composers, performers, software designers, researchers, and artists to create recordings, performances, and installations.The Max program is modular, with most routines existing as shared libraries. An application programming interface (API) allows third-party development of new routines (named external objects). Thus, Max has a large user base of programmers unaffiliated with Cycling '74 who enhance the software with commercial and non-commercial extensions to the program. Because of this extensible design, which simultaneously represents both the program's structure and its graphical user interface (GUI), Max has been described as the lingua franca for developing interactive music performance software."
},
{"id": 373, 
"name": "Maxima (software)",
"summary": "Maxima () is a computer algebra system (CAS) based on a 1982 version of Macsyma. It is written in Common Lisp and runs on all POSIX platforms such as macOS, Unix, BSD, and Linux, as well as under Microsoft Windows and Android. It is free software released under the terms of the GNU General Public License (GPL)."
},
{"id": 374, 
"name": "Maya Embedded Language",
"summary": "The Maya Embedded Language (MEL) is a scripting language used to simplify tasks in Autodesk's 3D Graphics Software Maya. Most tasks that can be achieved through Maya's GUI can be achieved with MEL, as well as certain tasks that are not available from the GUI. MEL offers a method of speeding up complicated or repetitive tasks, as well as allowing users to redistribute a specific set of commands to others that may find it useful."
},
{"id": 375, 
"name": "Mercury (programming language)",
"summary": "Mercury is a functional logic programming language made for real-world uses. The first version was developed at the University of Melbourne, Computer Science department, by Fergus Henderson, Thomas Conway, and Zoltan Somogyi, under Somogyi's supervision, and released on April 8, 1995.\nMercury is a purely declarative logic programming language. It is related to both Prolog and Haskell. It features a strong, static, polymorphic type system, and a strong mode and determinism system.\nThe official implementation, the Melbourne Mercury Compiler, is available for most Unix and Unix-like platforms, including Linux, macOS, and for Windows (32bits only)."
},
{"id": 376, 
"name": "Mesa (programming language)",
"summary": "Mesa is a programming language developed in the late 1970s at the Xerox Palo Alto Research Center in Palo Alto, California, United States. The language name was a pun based upon the programming language catchphrases of the time, because Mesa is a \"high level\" programming language.\nMesa is an ALGOL-like language with strong support for modular programming. Every library module has at least two source files: a definitions file specifying the library's interface plus one or more program files specifying the implementation of the procedures in the interface. To use a library, a program or higher-level library must \"import\" the definitions. The Mesa compiler type-checks all uses of imported entities; this combination of separate compilation with type-checking was unusual at the time.Mesa introduced several other innovations in language design and implementation, notably in the handling of software exceptions, thread synchronization, and incremental compilation.\nMesa was developed on the Xerox Alto, one of the first personal computers with a graphical user interface, however, most of the Alto's system software was written in BCPL. Mesa was the system programming language of the later Xerox Star workstations, and for the GlobalView desktop environment.  Xerox PARC later developed Cedar, which was a superset of Mesa.\nMesa and Cedar had a major influence on the design of other important languages, such as Modula-2 and Java, and was an important vehicle for the development and dissemination of the fundamentals of GUIs, networked environments, and the other advances Xerox contributed to the field of computer science.\n\n"
},
{"id": 377, 
"name": "Metafont",
"summary": "Metafont is a description language used to define raster fonts. It is also the name of the interpreter that executes Metafont code, generating the bitmap fonts that can be embedded into e.g. PostScript. Metafont was devised by Donald Knuth as a companion to his TeX typesetting system.\nOne of the characteristics of Metafont is that the points defining the shapes of the glyphs—for example top of a stem, or intersection of a stem and crossbar—are defined with geometrical equations; the intent that the three stems of an ‘m’ are equally spaced horizontally might be expressed as{missing info}\n   if points 1, 2, and 3 are at the bottom ends of the three stems, whereas the intent that they all end on the same vertical position would be {missing info}.  Another characteristic is that Metafont is a macro language, where operations such as \"draw a lower case top of stem serif at point 4\" might appear as one macro instruction (with the point as argument) in the program for a letter.  For describing shapes, Metafont has a rich set of path construction operations that mostly relieves the user of having to calculate control points.  Finally, many families of Metafont fonts are set up so that the main source file for a font only defines a small number of design parameters (x-height, em width, slant, vertical stroke width, etc.), then calling a separate source file common for a whole range of fonts to actually draw the individual glyphs; this is the meta aspect of the system."
},
{"id": 378, 
"name": "MicroScript (programming language)",
"summary": "JavaScript (), often abbreviated as JS, is a high-level, just-in-time compiled, object-oriented programming language that conforms to the ECMAScript specification. JavaScript has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions.\nAlongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web. JavaScript enables interactive web pages and is an essential part of web applications. The vast majority of websites use it, and major web browsers have a dedicated JavaScript engine to execute it.\nAs a multi-paradigm language, JavaScript supports event-driven, functional, and imperative (including object-oriented and prototype-based) programming styles. It has APIs for working with text, arrays, dates, regular expressions, and the DOM, but the language itself does not include any I/O, such as networking, storage, or graphics facilities. It relies upon the host environment in which it is embedded to provide these features.\nInitially only implemented client-side in web browsers, JavaScript engines are now embedded in many other types of host software, including server-side in web servers and databases, and in non-web programs such as word processors and PDF software, and in runtime environments that make JavaScript available for writing mobile and desktop applications, including desktop widgets.\nThe terms Vanilla JavaScript and Vanilla JS refer to JavaScript not extended by any frameworks or additional libraries. Scripts written in Vanilla JS are plain JavaScript code.Although there are similarities between JavaScript and Java, including language name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design. JavaScript was influenced by programming languages such as Self and Scheme. The JSON serialization format, used to store data structures in files or transmit them across networks, is based on JavaScript."
},
{"id": 379, 
"name": "Microassembler",
"summary": "A microassembler is a computer program that helps prepare a microprogram, called firmware, to control the low level operation of a computer in much the same way an assembler helps prepare higher level code for a processor. The difference is that the microprogram is usually only developed by the processor manufacturer and works intimately with the computer hardware. On a microprogrammed computer the microprogram implements the operations of the instruction set in which any normal program (including both application programs and operating systems) is written. The use of a microprogram allows the manufacturer to fix certain mistakes, including working around hardware design errors, without modifying the hardware. Another means of employing microassembler-generated microprograms is in allowing the same hardware to run different instruction sets. After it is assembled, the microprogram is then loaded to a control store to become part of the logic of a CPU's control unit.\nSome microassemblers are more generalized and are not targeted at a single computer architecture. For example, through the use of macro-assembler-like capabilities, Digital Equipment Corporation used their MICRO2 microassembler for a very wide range of computer architectures and implementations.\nIf a given computer implementation supports a writeable control store, the microassembler is usually provided to customers as a means of writing customized microcode.\nIn the process of microcode assembly it is helpful to verify the microprogram with emulation  tools before distribution. Nowadays, microcoding has experienced a revival, since it is possible to correct and optimize the firmware of processing units already manufactured or sold, in order to adapt to specific operating systems or to fix hardware bugs. However, a commonly usable microassembler for today's CPUs is not available to manipulate the microcode. Unfortunately, knowledge of a processor's microcode is usually considered proprietary information so it is difficult to obtain information about how to modify it."
},
{"id": 380, 
"name": "Microsoft Macro Assembler",
"summary": "The Microsoft Macro Assembler (MASM) is an x86 assembler that uses the Intel syntax for MS-DOS and Microsoft Windows. Beginning with MASM 8.0, there are two versions of the assembler: One for 16-bit & 32-bit assembly sources, and another (ML64) for 64-bit sources only.\nMASM is maintained by Microsoft, but since version 6.12 it has not been sold as a separate product. It is instead supplied with various Microsoft SDKs and C compilers. Recent versions of MASM are included with Microsoft Visual Studio."
},
{"id": 381, 
"name": "Milk (programming language)",
"summary": "Milk is a programming language \"that lets application developers manage memory more efficiently in programs that deal with scattered data points in large data sets.\""
},
{"id": 382, 
"name": "Mirah (programming language)",
"summary": "Mirah (formerly Duby) is a programming language based on Ruby language syntax, local type inference, hybrid static–dynamic type system, and a pluggable compiler toolchain. Mirah was created by Charles Oliver Nutter to be \"a 'Ruby-like' language, probably a subset of Ruby syntax, that [could] compile to solid, fast, idiomatic JVM bytecode.\" The word mirah refers to the gemstone ruby in the Javanese language, a play on the concept of Ruby in Java."
},
{"id": 383, 
"name": "Miranda (programming language)",
"summary": "Miranda is a lazy, purely functional programming language designed by David Turner as a successor to his earlier programming languages SASL and KRC, using some concepts from ML and Hope.  It was produced by Research Software Ltd. of England (which holds a trademark on the name Miranda) and was the first purely functional language to be commercially supported.Miranda was first released in 1985, as a fast interpreter in C for Unix-flavour operating systems, with subsequent releases in 1987 and 1989. Miranda had a strong influence on the later Haskell programming language."
},
{"id": 384, 
"name": "Mixal",
"summary": "MIX is a hypothetical computer used in Donald Knuth's monograph, The Art of Computer Programming (TAOCP).  MIX's model number is 1009, which was derived by combining the model numbers and names of several contemporaneous, commercial machines deemed significant by the author. Also, \"MIX\" read as a Roman numeral is 1009.  \nThe 1960s-era MIX has since been superseded by a new (also hypothetical) computer architecture, MMIX, to be incorporated in forthcoming editions of TAOCP.  Software implementations for both the MIX and MMIX architectures have been developed by Knuth and made freely available (named \"MIXware\" and \"MMIXware\", respectively).\nSeveral derivatives of Knuth's MIX/MMIX emulators also exist. GNU MDK is one such software package; it is free and runs on a wide variety of platforms.\nTheir purpose for education is quite similar to John L. Hennessy's and David A. Patterson's DLX architecture, from Computer Organization and Design - The Hardware Software Interface."
},
{"id": 385, 
"name": "Model 204",
"summary": "Model 204 (M204) is a database management system for IBM and compatible mainframe computers developed and commercialized by Computer Corporation of America. It was announced in 1965, and first deployed in 1972. It incorporates a programming language and an environment for application development.  Implemented in assembly language for IBM System/360 and its successors, M204 can deal with very large databases and transaction loads of 1000 TPS."
},
{"id": 386, 
"name": "Modelica",
"summary": "Modelica is an object-oriented, declarative, multi-domain modeling language for component-oriented modeling of complex systems, e.g., systems containing mechanical, electrical, electronic, hydraulic, thermal, control, electric power or process-oriented subcomponents.\nThe free Modelica language\nis developed by the non-profit Modelica Association. The Modelica Association also develops the free Modelica Standard Library that contains about 1360 generic model components and 1280 functions in various domains, as of version 3.2.1."
},
{"id": 387, 
"name": "Modula",
"summary": "The Modula programming language is a descendant of the Pascal programming language. It was developed in Switzerland in the 1970s by Niklaus Wirth, the same person who designed Pascal. The main innovation of Modula over Pascal is a module system, used for grouping sets of related declarations into program units; hence the name Modula. The language is defined in a report by Wirth called Modula. A language for modular multiprogramming published 1976.Modula was first implemented by Niklaus Wirth himself on a PDP-11. Very soon other implementations followed, most important the University of York Modula compiler and a compiler developed at Philips Laboratories named PL Modula, which generated code for the LSI-11 microprocessor.\nThe development of Modula was discontinued soon after its publication. Wirth then concentrated his efforts on Modula's successor, Modula-2."
},
{"id": 388, 
"name": "Modula-2",
"summary": "Modula-2 is a computer programming language designed and developed between 1977 and 1985 by Niklaus Wirth at the Swiss Federal Institute of Technology in Zurich (ETH Zurich) as a revision of Pascal to serve as the sole programming language for the operating system and application software for the personal workstation Lilith. The principal concepts were:\n\nThe module as a compilation unit for separate compilation\nThe coroutine as the basic building block for concurrent processes\nTypes and procedures that allow access to machine-specific data.Wirth viewed Modula-2 as a successor to his earlier programming languages Pascal and Modula. The language design was also influenced by the Mesa language and the new programming possibilities of the early personal computer Xerox Alto, both from Xerox, that Wirth saw during his 1976 sabbatical year at Xerox PARC. The computer magazine BYTE devoted the August 1984 issue to the language and its surrounding environment."
},
{"id": 389, 
"name": "Modula-3",
"summary": "Modula-3 is a programming language conceived as a successor to an upgraded version of Modula-2 known as Modula-2+. While it has been influential in research circles (influencing the designs of languages such as Java, C#, and Python) it has not been adopted widely in industry. It was designed by Luca Cardelli, James Donahue, Lucille Glassman, Mick Jordan (before at the Olivetti Software Technology Laboratory), Bill Kalsow and Greg Nelson at the Digital Equipment Corporation (DEC) Systems Research Center (SRC) and the Olivetti Research Center (ORC) in the late 1980s.\nModula-3's main features are simplicity and safety while preserving the power of a systems-programming language. Modula-3 aimed to continue the Pascal tradition of type safety, while introducing new constructs for practical real-world programming. In particular Modula-3 added support for generic programming (similar to templates), multithreading, exception handling, garbage collection, object-oriented programming, partial revelation and explicit marking of unsafe code.\nThe design goal of Modula-3 was a language that implements the most important features of modern imperative languages in quite basic forms. Thus allegedly dangerous and complicating features such as multiple inheritance and operator overloading were omitted."
},
{"id": 390, 
"name": "Mohol programming languages",
"summary": "A system programming language is a programming language used for system programming; such languages are designed for writing system software, which usually requires different development approaches when compared with application software. Edsger Dijkstra refers to these language as Machine Oriented High Order Languages, or mohol.General-purpose programming languages tend to focus on generic features in order to allow programs written in the language to use the same code on different platforms. Examples of such languages include ALGOL and Pascal. This generic quality typically comes at the cost of denying direct access to the machine's internal workings, and this often has negative impacts on performance.\nSystem languages, in contrast, are designed not for compatibility but performance and ease of access to the underlying hardware while still providing high-level programming concepts like structured programming. Examples include SPL/3000 and ESPOL, both of which are similar to ALGOL in syntax but tuned to their respective platforms. Others are cross-platform but designed to work close to the hardware, like JOVIAL and BCPL.\nSome languages straddle the system and application domains, the canonical example being the C programming language, which is widely used as both a systems and application programming language. Modern languages such as Rust and Swift also bridge the gap between these spaces."
},
{"id": 391, 
"name": "Mortran",
"summary": "Mortran (More Fortran) is an extension of the Fortran programming language used for scientific computation. It introduces syntax changes, including the use of semicolons to end statements, in order to improve readability and flexibility. Mortran code is macro-processed into Fortran code for compilation.\nExample:\n\nNote that Mortran, like many preprocessors, does not make a complete analysis of the Fortran source and, like many preprocessors, may not always make its assumptions/requirements explicit.  Consider, for example, Mortran multiple assignment.  From the Mortran User Guide:\n\nproduces the following FORTRAN statements:\n\nIn this example, the produced Fortran implements the multiple assignment correctly only if X is not aliased to I or to A(I,K), assuming the multiple assignment semantics are left to right."
},
{"id": 392, 
"name": "Mouse (programming language)",
"summary": "The Mouse programming language is a small computer programming language developed by Dr. Peter Grogono in the late 1970s and early 1980s. It was developed as an extension of an earlier language called MUSYS, which was used to control digital and analog devices in an electronic music studio.\nMouse was originally intended as a small, efficient language for microcomputers with limited memory.  It is an interpreted, stack-based language and uses Reverse Polish notation.  To make an interpreter as easy as possible to implement, Mouse is designed so that a program is processed as a stream of characters, interpreted one character at a time.\nThe elements of the Mouse language consist of a set of (mostly) one-character symbols, each of which performs a specific function (see table below).  Since variable names are limited to one character, there are only 26 possible variables in Mouse (named A-Z).  Integers and characters are the only available data types.\nDespite these limits, Mouse includes a number of relatively advanced features, including:\n\nConditional branching\nLoops\nPointers\nMacros (subroutines (which may be recursive))\nArrays\nCode tracingThe design of the Mouse language makes it ideal for teaching the design of a simple interpreter.  Much of the book describing Mouse is devoted to describing the implementation of two interpreters, one in Z80 assembly language, the other in Pascal."
},
{"id": 393, 
"name": "MuPAD",
"summary": "MuPAD is a computer algebra system (CAS). Originally developed by the MuPAD research group at the University of Paderborn, Germany, development was taken over by the company SciFace Software GmbH & Co. KG in cooperation with the MuPAD research group and partners from some other universities starting in 1997.  MuPAD's graphics package was particularly successful, especially considering the era when it was developed.Until autumn 2005, the version \"MuPAD Light\" was offered for free for research and education, but as a result of the closure of the home institute of the MuPAD research group, only the version \"MuPAD Pro\" became available for purchase.\nThe MuPAD kernel is bundled with Scientific Notebook and Scientific Workplace. Former versions of MuPAD Pro were bundled with SciLab. In MathCAD's version 14 release Mupad was adopted as the CAS engine.\nIn September 2008, SciFace was purchased by MathWorks and the MuPAD code was included in the Symbolic Math Toolbox add-on for MATLAB. On 28 September 2008, MuPAD was withdrawn from the market as a software product in its own right. However, it is still available in the Symbolic Math Toolbox in MATLAB and can also be used as a stand-alone program by the command mupad entered into the MATLAB terminal."
},
{"id": 394, 
"name": "Mystic BBS",
"summary": "Mystic BBS is a bulletin board system software program that began in 1995 and was first released to the public in December 1997 under the MS-DOS platform.  It has since been ported to Microsoft Windows, OS/2, OS X, and Linux (Intel and ARM based systems such as the Raspberry Pi).  Mystic was designed to be a spiritual successor to the Telegard and Renegade bulletin board systems.\nSome of the more notable capabilities of Mystic BBS include:\n\nIntegrated Telnet, SSH, RLogin, FTP, BinkP, HTTP, NNTP, POP3, SMTP servers with IPv4 + IPv6 support\nFull 5D compliant BSO mailer and tosser, including BINKP and FTP mailer\nBuilt in AreaFix and FileFix functionality and full fileecho support\nIntegrated QWK and QWKE networking via FTP\nIntegrated text and ANSI editors, message editing with on-the-fly spell checking and word suggestions\nProprietary scripting language called Mystic Programming Language (MPL)\nEmbedded PYTHON programming language\nDOS CP437 and UTF8 character translations\nDynamic menus including menu editor, and fully customizable prompts\nMultiple user-selectable themes\nDOOR32 support in addition to various DOS-type door formats\nAutomatic random ANSI display (i.e. ansi.ans, ansi.an1, ansi.an2, etc. would display randomly)\nA fully featured ACS (access control system) and MCI display codes\nHighly integrated with ANSI graphics including full screen editor, lightbar menus, lightbar file listings and message reading\nAdvanced, feature-rich JAM message base system with QWK/QWKE offline mail\nMultiple platform distributions available including Windows, OS X, Linux and ARM Linux (Raspberry Pi, ODROID, etc)A more complete list of capabilities can be found at http://www.mysticbbs.com/features.html\nAttracted to the flexibility and potential that the scripting language provides, a number groups, such as ACiDic BBS modding, Cyberia, Demonic, DoRE, Vanguard, wOE!mODDING and Wicked formed for the sole purpose of writing BBS mods for SysOps who run Mystic."
},
{"id": 395, 
"name": "Máni",
"summary": "Máni (Old Norse \"moon\") is the personification of the moon in Norse mythology. Máni, personified, is attested in the Poetic Edda, compiled in the 13th century from earlier traditional sources, and the Prose Edda, written in the 13th century by Snorri Sturluson. Both sources state that he is the brother of the personified sun, Sól, and the son of Mundilfari, while the Prose Edda adds that he is followed by the children Hjúki and Bil through the heavens. As a proper noun, Máni appears throughout Old Norse literature. Scholars have proposed theories about Máni's potential connection to the Northern European notion of the Man in the Moon, and a potentially otherwise unattested story regarding Máni through skaldic kennings."
},
{"id": 396, 
"name": "NESL",
"summary": "NESL is a parallel programming language developed at Carnegie Mellon by the SCandAL project and released in 1993. It integrates various ideas from parallel algorithms, and functional programming and array programming languages.\nThe most important new ideas behind NESL are\n\nNested data parallelism: this feature offers the benefits of data parallelism, concise code that is easy to understand and debug, while being well suited for irregular algorithms, such as algorithms on trees, graphs or sparse matrices.\nA language based performance model: this gives a formal way to calculate the work and depth of a program. These measures can be related to running time on parallel machines.The main design guideline for NESL was to make parallel programming easy and portable. Algorithms are typically significantly more concise in NESL than in most other parallel programming languages, and the code closely resembles high-level pseudocode.\nNESL supports nested data parallelism by using the flattening transform to convert nested data parallelism to flat data parallelism. This works by storing nested vectors as the nested data and a segment descriptor of vector lengths, separately.\nThis flattening transform, however, can increase the asymptotic work and space complexity of the original program, leading to a much less efficient result."
},
{"id": 397, 
"name": "NEWP",
"summary": "NEWP, short for New Executive Programming Language, is a high-level programming language used on the Unisys MCP systems. The language is used to write the operating system and other system utilities, although it can also be used to write user software as well. Several constructs separate it from extended ALGOL on which it is based. Language operators such as MEMORY which allows direct memory access are strictly used by programs running as the MCP."
},
{"id": 398, 
"name": "NORD Programming Language",
"summary": "Nord Programming Language, commonly abbreviated NPL, was a programming language by the Norwegian minicomputer manufacturer Norsk Data. It shipped as a standard component of the operating system SINTRAN III.\nThe language was also used to implement SINTRAN III. I.e. the core and file system of SINTRAN III was written in NPL. The NPL compiler was also written in NPL and some core applications was early on written in NPL until PLANC came and linker and other software was rewritten in PLANC.\nThe NPL compiler was also special in that it did not produce object code as most compilers do. Instead it produced assembler code which then had to be assembled using the Norsk Data Assembler.\nThe registers of the CPU were available in NPL as predefined variables. Thus you could write:\n\nX + T =: A\n\nand the compiler would generate:\n\nCOPY SX DA\nRADD ST DA\n\nFunctions could be declared with multiple entry points:\n\nFUNC FUN1, FUN2\n\nFUN1: T := 1\nFUN2:\n\ncode here\n\nEND\n\nFUN1 could be called to set T to 1 before falling into FUN2 or T could be set to something else and call FUN2. If T register specified which file handle to write to then either FUN1 could be called to always output to terminal or T could be specified to handle a file itself in T and call FUN2 to output to that file."
},
{"id": 399, 
"name": "NWScript",
"summary": "NWScript is the scripting language developed by BioWare for the role-playing video game Neverwinter Nights. It is based on the C programming language and is implemented in the Aurora toolset. Neverscript, an open source 3rd party editor, has been created for the Mac OS X and Linux versions of NWN because the Aurora toolset has not been ported to those platforms.\nNWScript is also used in the video games The Witcher, Star Wars: Knights of the Old Republic and Star Wars: Knights of the Old Republic II The Sith Lords, which use the Odyssey Engine. Neverwinter Nights 2, the sequel to the original NWN, features a modified version of this scripting language.\n\n"
},
{"id": 400, 
"name": "NXT-G",
"summary": "LEGO Mindstorms NXT is a programmable robotics kit released by Lego in late July 2006.\nIt replaced the first-generation Lego Mindstorms kit, which was called the Robotics Invention System. The base kit ships in two versions: the Retail Version (set #8527) and the Education Base Set (set #9797). It comes with the NXT-G programming software, or optionally LabVIEW for Lego Mindstorms. A variety of unofficial languages exist, such as NXC, NBC, leJOS NXJ, and RobotC. The second generation of the set, the Lego Mindstorms NXT 2.0, was released on August 1, 2009, featuring a color sensor and other upgraded capabilities. The third generation, the EV3, was released in September 2013."
},
{"id": 401, 
"name": "Napier88",
"summary": "Napier88 is an orthogonally persistent programming language that was designed and implemented at the University of St Andrews, Scotland. The primary designer was Ron Morrison, whose initial designs were extended and implemented by Fred Brown, Richard Connor, and Al Dearle. Napier88 was ahead of its time in many ways, and was the first robustly implemented language to combine a polymorphic type system with orthogonal persistence. The language was robustly implemented and released to users from both industry and academia; up to 1,000 registered users were recorded in due course. The language, however, was only intended to provide a proof of concept for an experiment in persistent programming; some time after 1989 (the year the first implementation was in fact released) the group's interests moved on and the language was no longer maintained.\nIts influence lives on in various other systems however; the CORBA type ANY is distinctly recognisable in Napier88's type ANY; Microsoft's Common Language Runtime (CLR) uses a similar polymorphic architecture, and Java's parametric types solve some of the same problems of uninstantiated types escaping from their static scope."
},
{"id": 402, 
"name": "Neko (programming language)",
"summary": "NekoVM is a virtual machine developed by Nicolas Cannasse as part of research and development (R&D) efforts at two indie video game firms in Bordeaux, France: first at Motion Twin and then at Shiro Games.  NekoVM's native language is the bytecode for a high-level dynamically typed programming language called Neko.  This pairing allows Neko to be used directly as an embedded scripting language or to target NekoVM by compiling some other language (such as Haxe) to NekoVM bytecode."
},
{"id": 403, 
"name": "Nemerle",
"summary": "Nemerle is a general-purpose high-level statically typed programming language designed for platforms using the Common Language Infrastructure (.NET/Mono). It offers functional, object-oriented (OO) and imperative features. It has a simple C#-like syntax and a powerful metaprogramming system. In June 2012, the core developers of Nemerle were hired by the Czech software development company JetBrains. The team is focusing on developing Nitra, a framework to implement extant and new programming languages. This framework will likely be used to create future versions of Nemerle.Nemerle is named after the Archmage Nemmerle, a character in the fantasy novel A Wizard of Earthsea by Ursula K. Le Guin."
},
{"id": 404, 
"name": "Net.Data",
"summary": "Net.Data is a programming language by IBM used largely for database-backed web applications."
},
{"id": 405, 
"name": "NetLogo",
"summary": "NetLogo is a programming language and integrated development environment (IDE) for modeling. It is agent-based."
},
{"id": 406, 
"name": "NetRexx",
"summary": "Rexx (Restructured Extended Executor) is an interpreted programming language developed at IBM by Mike Cowlishaw. It is a structured, high-level programming language designed for ease of learning and reading. Proprietary and open source Rexx interpreters exist for a wide range of computing platforms; compilers exist for IBM mainframe computers.Rexx is used as a scripting and macro language, and is often used for processing data and text and generating reports; these similarities with Perl mean that Rexx works well in Common Gateway Interface (CGI) programming and it is indeed used for this purpose. Rexx is the primary scripting language in some operating systems, e.g. OS/2, MVS, VM, AmigaOS, and is also used as an internal macro language in some other software, such as SPFPC, KEDIT, THE and the ZOC terminal emulator. Additionally, the Rexx language can be used for scripting and macros in any program that uses Windows Scripting Host ActiveX scripting engines languages (e.g. VBScript and JScript) if one of the Rexx engines is installed.\nRexx is supplied with VM/SP Release 3 on up, TSO/E Version 2 on up, OS/2 (1.3 and later, where it is officially named Procedures Language/2), AmigaOS Version 2 on up, PC DOS (7.0 or 2000), and Windows NT 4.0 (Resource Kit: Regina). REXX scripts for OS/2 share the filename extension .cmd with other scripting languages, and the first line of the script specifies the interpreter to be used. REXX macros for REXX-aware applications use extensions determined by the application. In the late 1980s, Rexx became the common scripting language for IBM Systems Application Architecture, where it was renamed \"SAA Procedure Language REXX\".\nA Rexx script or command is sometimes referred to as an EXEC in a nod to the CMS file type used for EXEC, EXEC 2 and REXX scripts on CP/CMS and VM/370 through z/VM."
},
{"id": 407, 
"name": "Netwide Assembler",
"summary": "The Netwide Assembler (NASM) is an assembler and disassembler for the Intel x86 architecture. It can be used to write 16-bit, 32-bit (IA-32) and 64-bit (x86-64) programs. NASM is considered to be one of the most popular assemblers for Linux.NASM was originally written by Simon Tatham with assistance from Julian Hall. As of 2016, it is maintained by a small team led by H. Peter Anvin. It is open-source software released under the terms of a simplified (2-clause) BSD license."
},
{"id": 408, 
"name": "NewLISP",
"summary": "newLISP is a scripting language which is a dialect of the Lisp family of programming languages. It was designed and developed by Lutz Mueller. newLISP is free and open-source software released under the GNU General Public License, version 3 or later."
},
{"id": 409, 
"name": "Newspeak (programming language)",
"summary": "Newspeak is a programming language and platform in the tradition of Smalltalk and Self being developed by a team led by Gilad Bracha. The platform includes an IDE, a GUI library, and standard libraries. Starting in 2006, Cadence Design Systems funded its development and employed the main contributors, but ceased funding in January 2009.Newspeak is a class based language. Classes may be nested, as in BETA. This is one of the key differences between Newspeak and Smalltalk.  All names in Newspeak are late-bound, and are interpreted as message sends, as in Self.\nNewspeak is distinguished by its unusual approach to modularity. The language has no global namespace. Top level classes act as module declarations. Module declarations are first class values (i.e., they may be stored in variables, passed as parameters, returned from methods, etc.) and are stateless."
},
{"id": 410, 
"name": "NewtonScript",
"summary": "NewtonScript is a prototype-based programming language created to write programs for the Newton platform. It is heavily influenced by the Self programming language, but modified to be more suited to needs of mobile and embedded devices."
},
{"id": 411, 
"name": "Next Generation Shell",
"summary": "In computer science, the Boolean data type is a data type that has one of two possible values (usually denoted true and false) which is  intended to represent the two truth values of logic and Boolean algebra. It is named after George Boole, who first defined an algebraic system of logic in the mid 19th century. The Boolean data type is primarily associated with conditional statements, which allow different actions by changing control flow depending on whether a programmer-specified Boolean condition evaluates to true or false. It is a special case of a more general logical data type (see probabilistic logic)—logic doesn't always need to be Boolean."
},
{"id": 412, 
"name": "Nial",
"summary": "Nial (from \"Nested Interactive Array Language\") is a high-level array programming language developed from about 1981 by Mike Jenkins of Queen's University, Kingston, Ontario, Canada.  Jenkins co-created the Jenkins–Traub algorithm.\nNial combines a functional programming notation for arrays based on an array theory developed by Trenchard More with structured programming concepts for numeric, character and symbolic data.\nIt is most often used for prototyping and artificial intelligence."
},
{"id": 413, 
"name": "Nice (programming language)",
"summary": "Nice is an object-oriented programming language released under the GNU General Public License.\nIt features a powerful type system which can help eliminate many common bugs, such as null pointer dereferences and invalid casts, by detecting potential runtime errors at compile-time; the goal of the designers was to provide safety features comparable to those found in languages such as ML and Haskell, but using a more conventional syntax.\nNice aims to be feature-rich, and as such, in addition to the common features of modern object-oriented programming languages, it implements contracts in the style of Eiffel, class extensibility through multimethods, and many concepts drawn from functional programming such as anonymous functions, tuples, pattern matching (“value dispatch”), and parametric polymorphism.\nSource programs are compiled to Java bytecode, and can therefore interact with libraries written in Java and other programming languages targeting the Java Virtual Machine.\nWork on the Nice language appears to have slowed since early 2006."
},
{"id": 414, 
"name": "Nickle (programming language)",
"summary": "Nickle is a numeric oriented programming language by Keith Packard and Bart Massey. Originally used for desktop calculation, it has since expanded for prototyping of complicated algorithms."
},
{"id": 415, 
"name": "Nim (programming language)",
"summary": "Nim (formerly named Nimrod) is an imperative, general-purpose, multi-paradigm, statically typed, systems, compiled programming language designed and developed by Andreas Rumpf. It is designed to be \"efficient, expressive, and elegant\", supporting metaprogramming, functional, message passing, procedural, and object-oriented programming styles by providing several features such as compile time code generation, algebraic data types, a foreign function interface (FFI) with C and C++, and compiling to C, C++, Objective-C, and JavaScript."
},
{"id": 416, 
"name": "Non-English-based programming languages",
"summary": "Non-English-based programming languages are programming languages that do not use keywords taken from or inspired by English vocabulary."
},
{"id": 417, 
"name": "Not Quite C",
"summary": "Not Quite C (NQC) is a programming language, application programming interface (API), and native bytecode compiler toolkit for the Lego Mindstorms, Cybermaster and LEGO Spybotics systems. It is based primarily on the C language but has specific limitations, such as the maximum number of subroutines and variables allowed, which differ depending on the version of firmware the RCX has. The language was invented by David Baum. He has released two books on the subject."
},
{"id": 418, 
"name": "Not eXactly C",
"summary": "Not eXactly C, or NXC, is a high-level programming language for the Lego Mindstorms NXT designed by John Hansen in 2006. NXC, which is short for Not eXactly C, is based on Next Byte Codes, an assembly language. NXC has a syntax like C. The IDE for NXC is the Bricx Command Center.\nThe NXC compiler is available under the Mozilla Public License. A sample code is as shown below:"
},
{"id": 419, 
"name": "Nu (programming language)",
"summary": "Nu is an interpreted object-oriented programming language, with a Lisp-like syntax, created by Tim Burks as an alternative scripting language to program OS X through its Cocoa application programming interface (API). Implementations also exist for iPhone and Linux.\nThe language was first announced at C4, a conference for indie Mac developers held in August 2007."
},
{"id": 420, 
"name": "Nullsoft Scriptable Install System",
"summary": "Nullsoft Scriptable Install System (NSIS) is a script-driven installer authoring tool for Microsoft Windows backed by Nullsoft, the creators of Winamp. NSIS is released under a combination of free software licenses, primarily the zlib license. It has become a widely used alternative to commercial proprietary products like InstallShield, with users including Amazon.com, Dropbox, Google, Ubisoft, FL Studio,  BitTorrent, and McAfee."
},
{"id": 421, 
"name": "O:XML",
"summary": "o:XML is an open source, dynamically typed, general-purpose object-oriented programming language based on XML-syntax.  It has threads, exception handling, regular expressions and namespaces.  Additionally o:XML has an expression language very similar to XPath that allows functions to be invoked on nodes and node sets."
},
{"id": 422, 
"name": "OBJ2",
"summary": "No summary available"
},
{"id": 423, 
"name": "OCaml",
"summary": "OCaml ( oh-KAM-əl) (formerly Objective Caml) is the main implementation of the Caml programming language, created in 1996 by Xavier Leroy, Jérôme Vouillon, Damien Doligez, Didier Rémy, Ascánder Suárez, and others. It extends Caml with object-oriented features, and is a member of the ML family.\nThe OCaml toolchain includes an interactive top-level interpreter, a bytecode compiler, an optimizing native code compiler, a reversible debugger, and a package manager (OPAM). It has a large standard library, which makes it useful for many of the same applications as Python and Perl, and has robust modular and object-oriented programming constructs that make it applicable for large-scale software engineering.\nThe acronym CAML originally stood for Categorical Abstract Machine Language, but OCaml omits this abstract machine. OCaml is a free and open-source software project managed and principally maintained by the French Institute for Research in Computer Science and Automation (INRIA). In the early 2000s, elements from OCaml were adopted by many languages, notably F# and Scala."
},
{"id": 424, 
"name": "OPS5",
"summary": "OPS5 is a rule-based or production system computer language, notable as the first such language to be used in a successful expert system, the R1/XCON system used to configure VAX computers.\nThe OPS (said to be short for \"Official Production System\") family was developed in the late 1970s by Charles Forgy while at Carnegie Mellon University. Allen Newell's research group in artificial intelligence had been working on production systems for some time, but Forgy's implementation, based on his Rete algorithm, was especially efficient, sufficiently so that it was possible to scale up to larger problems involving hundreds or thousands of rules.\nOPS5 uses a forward chaining inference engine; programs execute by scanning \"working memory elements\" (which are vaguely object-like, with classes and attributes) looking for matches with the rules in \"production memory\". Rules have actions that may modify or remove the matched element, create new ones, perform side effects such as output, and so forth. Execution continues until no more matches can be found.\nIn this sense, OPS5 is an execution engine for a Petri net extended with inhibitor arcs.\nThe OPS5 forward chaining process makes it extremely parallelizeable during the matching phase, and several automatic parallelizing compilers were created.\nOPS4 was an early version, while OPS83 came later.\nThe first implementation of OPS5 was written in Lisp, and later rewritten in BLISS for speed.\nDEC OPS5 is an extended implementation of the OPS5 language definition, developed for use with the VMS, RISC ULTRIX, and DEC OSF/1 operating systems."
},
{"id": 425, 
"name": "ORCA/Modula-2",
"summary": "Modula-2 is a computer programming language designed and developed between 1977 and 1985 by Niklaus Wirth at the Swiss Federal Institute of Technology in Zurich (ETH Zurich) as a revision of Pascal to serve as the sole programming language for the operating system and application software for the personal workstation Lilith. The principal concepts were:\n\nThe module as a compilation unit for separate compilation\nThe coroutine as the basic building block for concurrent processes\nTypes and procedures that allow access to machine-specific data.Wirth viewed Modula-2 as a successor to his earlier programming languages Pascal and Modula. The language design was also influenced by the Mesa language and the new programming possibilities of the early personal computer Xerox Alto, both from Xerox, that Wirth saw during his 1976 sabbatical year at Xerox PARC. The computer magazine BYTE devoted the August 1984 issue to the language and its surrounding environment."
},
{"id": 426, 
"name": "Oak (programming language)",
"summary": "Oak is a discontinued programming language created by James Gosling in 1991, initially for Sun Microsystems' set-top box project. The language later evolved to become Java.\nThe name Oak was used by Gosling after an oak tree that stood outside his office."
},
{"id": 427, 
"name": "Oberon (programming language)",
"summary": "Oberon is a general-purpose programming language created in 1986 by Niklaus Wirth and the latest member of the Wirthian family of ALGOL-like languages (Euler, Algol-W, Pascal, Modula, and Modula-2). Oberon was the result of a concentrated effort to increase the power of Modula-2, the direct successor of Pascal, and simultaneously to reduce its complexity. Its principal new feature is the concept of type extension of record types: It permits the construction of new data types on the basis of existing ones and to relate them, deviating from the dogma of strictly static data typing. Type extension is Wirth's way of inheritance reflecting the viewpoint of the parent site. Oberon was developed as part of the implementation of the Oberon operating system at ETH Zurich in Switzerland. The name is from the moon of Uranus, Oberon.\nOberon is still maintained by Wirth and the latest Project Oberon compiler update is dated May 31, 2019."
},
{"id": 428, 
"name": "Object Lisp",
"summary": "The Common Lisp Object System (CLOS) is the facility for object-oriented programming which is part of ANSI Common Lisp. CLOS is a powerful dynamic object system which differs radically from the OOP facilities found in more static languages such as C++ or Java. CLOS was inspired by earlier Lisp object systems such as MIT Flavors and CommonLoops, although it is more general than either. Originally proposed as an add-on, CLOS was adopted as part of the ANSI standard for Common Lisp and has been adapted into other Lisp dialects such as EuLisp or Emacs Lisp."
},
{"id": 429, 
"name": "Object Pascal",
"summary": "Object Pascal is an extension to the programming language Pascal that provides object-oriented programming features such as classes and methods.\nThe language was originally developed by Apple Computer as Clascal for the Lisa Workshop development system. As Lisa gave way to Macintosh, Apple collaborated with Niklaus Wirth, the author of Pascal, to develop an officially standardized version of Clascal. This was renamed Object Pascal. Through the mid-1980s, Object Pascal was the primary programming language for early versions of the MacApp application framework. The language lost its place as the primary development language on the Mac in 1991 with the release of the C++-based MacApp 3.0. Official support ended in 1996.\nSymantec also developed a compiler for Object Pascal for their THINK Pascal product, which could compile programs much faster than Apple's own Macintosh Programmer's Workshop (MPW). Symantec then developed the THINK Class Library (TCL), based on MacApp concepts, which could be called from both Object Pascal as well as THINK C. The THINK suite largely displaced MPW as the primary development platform on the Mac in the late 1980s.\nSymantec ported Object Pascal to the PC, and developed a similar object framework on that platform. In contrast to TCL, which eventually migrated to C++, the PC libraries remained primarily based on Pascal.\nBorland added support for object oriented programming to Turbo Pascal 5.5, which would eventually become the basis for the Object Pascal dialect used in Delphi. Delphi remained mainstream for business applications on the PC into the early 2000's, and was partially displaced in the 2000's with the introduction of .NET."
},
{"id": 430, 
"name": "Object REXX",
"summary": "The Object REXX programming language is an object-oriented scripting language initially produced by IBM for the operating system OS/2. It is a follow-on to and a significant extension of the \"Classic Rexx\" language originally created for the Conversational Monitor System (CMS) component of the operating system VM/SP and later ported to Multiple Virtual Storage (MVS), OS/2 and PC DOS. OS/2 version of IBM Object REXX is deeply integrated with IBM System Object Model (SOM).On October 12, 2004, IBM released Object REXX as free and open-source software, giving rise to Open Object Rexx (ooREXX), now available for various operating systems: Linux, Solaris, Windows. This implementation includes a Windows Script Host (WSH) Scripting Engine for Rexx. The released sources however didn't include significant part of the SOM support.Object REXX supports multiple inheritance via the use of mixin classes."
},
{"id": 431, 
"name": "ObjectLOGO",
"summary": "Logo is an educational programming language, designed in 1967 by Wally Feurzeig, Seymour Papert, and Cynthia Solomon. Logo is not an acronym: the name was coined by Feurzeig while he was at Bolt, Beranek and Newman, and derives from the Greek logos, meaning word or thought.\nA general-purpose language, Logo is widely known for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on screen or with a small robot termed a turtle. The language was conceived to teach concepts of programming related to Lisp and only later to enable what Papert called \"body-syntonic reasoning\", where students could understand, predict, and reason about the turtle's motion by imagining what they would do if they were the turtle. There are substantial differences among the many dialects of Logo, and the situation is confused by the regular appearance of turtle graphics programs that are named Logo.\nLogo is a multi-paradigm adaptation and dialect of Lisp, a functional programming language. There is no standard Logo, but UCBLogo has the best facilities for handling lists, files, I/O, and recursion in scripts, and can be used to teach all computer science concepts, as UC Berkeley lecturer Brian Harvey did in his Computer Science Logo Style trilogy.Logo is usually an interpreted language, although there have been developed compiled Logo dialects (such as Lhogho and Liogo). Logo is not case-sensitive but retains the case used for formatting."
},
{"id": 432, 
"name": "Objective-C",
"summary": "Objective-C is a general-purpose, object-oriented programming language that adds Smalltalk-style messaging to the C programming language. It was the main programming language supported by Apple for the macOS, iOS and iPadOS operating systems, and their respective application programming interfaces (APIs) Cocoa and Cocoa Touch until the introduction of Swift in 2014.The language was originally developed in the early 1980s. It was later selected as the main language used by NeXT for its NeXTSTEP operating system, from which macOS and iOS are derived. Portable Objective-C programs that do not use Apple libraries, or those using parts that may be ported or reimplemented for other systems, can also be compiled for any system supported by GNU Compiler Collection (GCC) or Clang.\nObjective-C source code 'implementation' program files usually have .m filename extensions, while Objective-C 'header/interface' files have .h extensions, the same as C header files. Objective-C++ files are denoted with a .mm file extension."
},
{"id": 433, 
"name": "Objective-J",
"summary": "Objective-J is a programming language developed as part of the Cappuccino web development framework. Its syntax is nearly identical to the Objective-C syntax and it shares with JavaScript the same relationship that Objective-C has with the C programming language: that of being a strict, but small, superset; adding traditional inheritance and Smalltalk/Objective-C style dynamic dispatch. Pure JavaScript, being a prototype-based language, already has a notion of object orientation and inheritance, but Objective-J adds the use of class-based programming to JavaScript.\nPrograms written in Objective-J need to be preprocessed before being run by a web browser's JavaScript virtual machine. This step can occur in the web browser at runtime or by a compiler which translates Objective-J programs into pure JavaScript code.  The Objective-J compiler is written in JavaScript; consequently, deploying Objective-J programs does not require a web browser plug-in. Objective-J can be compiled and run on Node.js."
},
{"id": 434, 
"name": "Obliq",
"summary": "Obliq is an interpreted, object-oriented programming language designed to make distributed, and locally multi-threaded, computation simple and easy for the programmer, while providing program safety and implicit type system. The interpreter is written in Modula-3, and provides Obliq with full access to Modula-3's network objects capabilities. A type inference algorithm for record concatenation, subtyping and recursive types has been developed for Obliq, more important it has been proved to be NP-complete\nand its lowest complexity to be Ο(n3) or if under other modeling up to certain conditions down to Ο(n2)  and its best known implementation runs in Ο(n5).\nObliq's syntax is very similar to Modula-3, the biggest difference being that Obliq has no need of explicit typed variables (i.e., a variable can hold any data type allowed by the type checker and if does not accepts one, i.e., a given expression execution error will be thrown) although explicit type declarations are allowed and ignored by the interpreter. The basic data types in the language include booleans, integers, reals, characters, strings, and arrays. Obliq supports the usual set of sequential control structures (conditional, iteration, and exception handling forms), as well as special control forms for concurrency (mutexes and guarded statements). Besides that Obliq's objects are able to be cloned and safely copied remotely by any machine in a distributed network object and it can be done in a transparent way.Obliq's large standard library provides strong support for mathematical operations, I/O, persistence, thread control, graphics, and animation. Distributed computation is object-based: objects hold a state, which is local to a particular process. Scope of objects and other variables is purely lexical. Objects can call methods of other objects, even if those objects are on another machine on the network. Obliq objects are simply collections of named fields (similar to slots in Self and Smalltalk), and support inheritance by delegation (like Self).\nThe common uses of Obliq involve programming over networks, 3D animation, and distributed computation over Ethernet LAN as. Obliq is included free with the DEC Modula-3 distribution, but other free versions exist elsewhere including pre-compiled binaries for several operating systems."
},
{"id": 435, 
"name": "Occam (programming language)",
"summary": "occam is a programming language which is concurrent and builds on the communicating sequential processes (CSP) process algebra, and shares many of its features. It is named after philosopher William of Ockham for whom Occam's razor is named.\noccam is an imperative procedural language (such as Pascal). It was developed by David May and others at Inmos (trademark INMOS), advised by Tony Hoare, as the native programming language for their transputer microprocessors, but implementations for other platforms are available. The most widely known version is occam 2; its programming manual was written by Steven Ericsson-Zenith and others at Inmos."
},
{"id": 436, 
"name": "Occam-π",
"summary": "In computer science, occam-π (or occam-pi) is the name of a variant of the programming language occam developed by the Kent Retargetable occam Compiler (KRoC) team at the University of Kent. The name reflects the introduction of elements of π-calculus (pi-calculus) into occam, especially concepts involving mobile agents (processes) and data. The language contains several extensions to occam 2.1, including:\n\nNested protocols\nRun-time process creation\nMobile channels, data, and processes\nRecursion\nProtocol inheritance\nArray constructors\nExtended rendezvous"
},
{"id": 437, 
"name": "OmniMark",
"summary": "OmniMark is a fourth-generation programming language used mostly in the publishing industry. It is currently a proprietary software product of Stilo International.  As of September 2018 the most recent release of OmniMark was 10.1.2, dated April 2016."
},
{"id": 438, 
"name": "Onyx (programming language)",
"summary": "Onyx is a stack-oriented, multi-threaded, interpreted, general purpose programming language \n."
},
{"id": 439, 
"name": "Opa (programming language)",
"summary": "Opa is an open-source programming language for developing scalable web applications.\nIt can be used for both client-side and server-side scripting, where complete programs are written in Opa and subsequently compiled to Node.js on the server and JavaScript on the client, with the compiler automating all communication between the two. Opa implements strong, static typing, which can be helpful in protecting against security issues such as SQL injections and cross-site scripting attacks.The language was first officially presented at the OWASP conference in 2010, and the source code was released on\nGitHub\nin June 2011, under a GNU Affero General Public License. Later, the license changed to the MIT license for the framework part (library) and AGPL for the compiler so that applications written in Opa can be released under any license, proprietary or open source."
},
{"id": 440, 
"name": "Opal (programming language)",
"summary": "OPAL (OPtimized Applicative Language) is a functional programming language first developed at the Technical University of Berlin."
},
{"id": 441, 
"name": "Open Programming Language",
"summary": "Open Programming Language (OPL) is an embedded programming language for portable devices that run the Symbian Operating System."
},
{"id": 442, 
"name": "OpenCL",
"summary": "OpenCL (Open Computing Language) is a framework for writing programs that execute across heterogeneous platforms consisting of central processing units (CPUs), graphics processing units (GPUs), digital signal processors (DSPs), field-programmable gate arrays (FPGAs) and other processors or hardware accelerators. OpenCL specifies programming languages (based on C99 and C++11) for programming these devices and application programming interfaces (APIs) to control the platform and execute programs on the compute devices. OpenCL provides a standard interface for parallel computing using task- and data-based parallelism.\nOpenCL is an open standard maintained by the non-profit technology consortium Khronos Group. Conformant implementations are available from Altera, AMD, Apple (OpenCL along with OpenGL is deprecated for Apple hardware, in favor of Metal 2), ARM, Creative, IBM, Imagination, Intel, Nvidia, Qualcomm, Samsung, Vivante, Xilinx, and ZiiLABS."
},
{"id": 443, 
"name": "OpenEdge Advanced Business Language",
"summary": "OpenEdge Advanced Business Language, or OpenEdge ABL for short, is a business application development language created and maintained by Progress Software Corporation (PSC). The language, typically classified as a fourth-generation programming language, uses an English-like syntax to simplify software development. The language was called PROGRESS or Progress 4GL up until version 9, but in 2006 PSC changed the name to OpenEdge Advanced Business Language (OpenEdge ABL) in order to overcome a presumed industry perception that 4GLs were less capable than other languages. A subset of the language, called SpeedScript, is used in the development of web applications.OpenEdge ABL helps developers to develop applications optionally using its own integrated relational database and programming tool. These applications are portable across computing systems and allow access to various popular data sources without having to learn the underlying data access methods. This means that the end-user of these products can be unaware of the underlying architecture.\nBy combining a fourth generation language and relational database, OpenEdge ABL allows the use of the Rapid Application Development (RAD) model for developing software. A programmer and even end users can do rapid prototyping using the integrated and GUI tools of the development environment."
},
{"id": 444, 
"name": "OpenVera",
"summary": "OpenVera is a hardware verification language developed and managed by Synopsys. OpenVera is an interoperable, open hardware verification language for testbench creation. The OpenVera language was used as the basis for the advanced verification features in the IEEE Std. 1800 SystemVerilog standard, for the benefit of the entire verification community including companies in the semiconductor, systems, IP and EDA industries along with verification services.\nThe OpenVera language reference manual (LRM) can be obtained at no cost, but modifications to the language must go through Synopsys."
},
{"id": 445, 
"name": "OptimJ",
"summary": "OptimJ is an extension of the Java with language support for writing optimization models and abstractions for bulk data processing. The extensions and the proprietary product implementing the extensions were developed by Ateji which went out of business in September 2011.\nOptimJ aims at providing a clear and concise algebraic notation for optimization modeling, removing compatibility barriers between optimization modeling and application programming tools, and bringing software engineering techniques such as object-orientation and modern IDE support to optimization experts.\nOptimJ models are directly compatible with Java source code, existing Java libraries such as database access, Excel connection or graphical interfaces. OptimJ is compatible with development tools such as Eclipse, CVS, JUnit or JavaDoc. OptimJ is available free with the following solvers: lp_solve, glpk, LP or MPS file formats and also supports the following commercial solvers: Gurobi, MOSEK, IBM ILOG CPLEX Optimization Studio."
},
{"id": 446, 
"name": "Orc (programming language)",
"summary": "Orc is a concurrent, nondeterministic computer programming language created by Jayadev Misra at the University of Texas at Austin.\nOrc  provides uniform access to computational services, including distributed communication and data manipulation, through sites. Using four simple concurrency primitives, the programmer orchestrates the invocation of sites to achieve a goal, while managing timeouts, priorities, and failures."
},
{"id": 447, 
"name": "Oriel (scripting language)",
"summary": "Oriel is a scripting language released with the Power Tools series of instructional books written by the LeBlond Group. Described in its documentation as a \"graphics-based batch language\", it was originally designed for Microsoft Windows 3.0 and released with the book Windows 3 Power Tools in 1991. However, versions of the language were also bundled with Windows 3.1 Power Tools in 1992 and Windows NT Power Tools in 1994.\nThe suggested extension for an Oriel script file was ORL. Oriel was distributed with two executables: ORIEL.EXE, and MKRUNTIM.EXE. The former was the Oriel interpreter, which when invoked would prompt the user to choose a script file for execution. The latter gave the user the ability to create custom executables by bundling a script within a copy of the interpreter. In this way, an Oriel program could be distributed and run in the same way as any other Windows EXE.\nThe language was named after the oriel style of bay window. A window of that style is depicted in the icon distributed with the runtime."
},
{"id": 448, 
"name": "Orwell (programming language)",
"summary": "Orwell is a small, lazy-evaluation functional programming language implemented principally by Martin Raskovsky and first released in 1984 by Philip Wadler during his time as a Research Fellow in the Programming Research Group, part of the Oxford University Computing Laboratory. Developed as a free alternative to Miranda, it was a forerunner of Haskell and was one of the first programming languages to support list comprehensions and pattern matching.\nThe name is a tribute to George Orwell's novel Nineteen Eighty-Four, the year in which the programming language was released.  In the late 1980s and the 1990s, most of the computing practical assignments for undergraduates studying for a degree in Mathematics and Computation at Oxford University were required to be completed using the language."
},
{"id": 449, 
"name": "Oxygene (programming language)",
"summary": "Oxygene (formerly known as Chrome) is a programming language developed by RemObjects Software for Microsoft's Common Language Infrastructure, the Java Platform and Cocoa. Oxygene is Object Pascal-based, but also has influences from  C#, Eiffel, Java, F# and other languages.\nCompared to the now deprecated Delphi.NET, Oxygene does not emphasize total backward compatibility, but is designed to be a \"reinvention\" of the language, be a good citizen on the managed development platforms, and leverage all the features and technologies provided by the .NET and Java runtimes.\nOxygene is a commercial product, and offers full integration into Microsoft's Visual Studio IDE on Windows, as well as its own IDE, Fire for use on macOS. The command line compiler is available free. Oxygene is one of four languages supported by the underlying Elements Compiler toolchain, next to C#, Swift and Java).\nFrom 2008 to 2012, RemObjects Software has licensed its compiler and IDE technology to Embarcadero to be used in their Embarcadero Prism product. Starting in the Fall of 2011, Oxygene became available in two separate editions, with the second edition adding support for the Java and Android runtimes.  Starting with the release of XE4, Embarcadero Prism is no longer part of the RAD Studio SKU. Numerous support and upgrade paths for Prism customers exist to migrate to Oxygene. As of 2016, there is only one edition of Oxygene, which allows development on Windows or macOS, and which can create executables for Windows, Linux, WebAssembly .NET, iOS, Android, Java and macOS."
},
{"id": 450, 
"name": "Oz (programming language)",
"summary": "Oz is a multiparadigm programming language, developed in the Programming Systems Lab at Université catholique de Louvain, for programming language education.  It has a canonical textbook: Concepts, Techniques, and Models of Computer Programming.\nOz was first designed by Gert Smolka and his students in 1991.  In 1996, development of Oz continued in cooperation with the research group of Seif Haridi and Peter Van Roy at the Swedish Institute of Computer Science.  Since 1999, Oz has been continually developed by an international group, the Mozart Consortium, which originally consisted of Saarland University, the Swedish Institute of Computer Science, and the Université catholique de Louvain.  In 2005, the responsibility for managing Mozart development was transferred to a core group, the Mozart Board, with the express purpose of opening Mozart development to a larger community.\nThe Mozart Programming System is the primary implementation of Oz. It is released with an open source license by the Mozart Consortium.  Mozart has been ported to Unix, FreeBSD, Linux, Windows, and macOS."
},
{"id": 451, 
"name": "P (programming language)",
"summary": "P is a programming language that was developed by Microsoft and UC, Berkeley.\nP enables programmers to specify systems consisting of a collection of state machines that communicate asynchronously in terms of events.  Code can be run on Microsoft Windows and Windows Phone, and is now open source."
},
{"id": 452, 
"name": "P4 (programming language)",
"summary": "P4 is a programming language for controlling packet forwarding planes in networking devices, such as routers and switches. In contrast to a general purpose language such as C or Python, P4 is a domain-specific language with a number of constructs optimized for network data forwarding.  P4 is distributed as open-source, permissively licensed code, and is maintained by the P4 Language Consortium, a not-for-profit organization."
},
{"id": 453, 
"name": "PARI/GP",
"summary": "PARI/GP is a computer algebra system with the main aim of facilitating number theory computations. Versions 2.1.0 and higher are distributed under the GNU General Public License. It runs on most common operating systems."
},
{"id": 454, 
"name": "PCASTL",
"summary": "The PCASTL (an acronym for by Parent and Childset Accessible Syntax Tree Language) is an interpreted high-level programming language.  It was created in 2008 by Philippe Choquette.  The PCASTL is designed to ease the writing of self-modifying code.  The language has reserved words parent and childset to access the nodes of the syntax tree of the currently written code."
},
{"id": 455, 
"name": "PEARL (programming language)",
"summary": "PEARL, or Process and experiment automation realtime language, is a computer programming language designed for multitasking and real-time programming. Being a high-level language, it is fairly cross-platform. Since 1977, the language has been going under several standardization steps by the Deutsches Institut für Normung. The current version is PEARL-90, which was standardized in 1998 as DIN 66253-2.\nPEARL is not to be confused with the similarly named Perl, an entirely unrelated programming language created by Larry Wall in 1987."
},
{"id": 456, 
"name": "PHP",
"summary": "PHP is a general-purpose programming language originally designed for web development. It was originally created by Rasmus Lerdorf in 1994; the PHP reference implementation is now produced by The PHP Group. PHP originally stood for Personal Home Page, but it now stands for the recursive initialism PHP: Hypertext Preprocessor.PHP code may be executed with a command line interface (CLI), embedded into HTML code, or used in combination with various web template systems, web content management systems, and web frameworks. PHP code is usually processed by a PHP interpreter implemented as a module in a web server or as a Common Gateway Interface (CGI) executable. The web server outputs the results of the interpreted and executed PHP code, which may be any type of data, such as generated HTML code or binary image data. PHP can be used for many programming tasks outside of the web context, such as standalone graphical applications and robotic drone control.The standard PHP interpreter, powered by the Zend Engine, is free software released under the PHP License. PHP has been widely ported and can be deployed on most web servers on almost every operating system and platform, free of charge.The PHP language evolved without a written formal specification or standard until 2014, with the original implementation acting as the de facto standard which other implementations aimed to follow. Since 2014, work has gone on to create a formal PHP specification.As of September 2019, over 60% of sites on the web using PHP are still on discontinued/\"EOLed\" version 5.6 or older; versions prior to 7.2 are no longer officially supported by The PHP Development Team, but security support is provided by third parties, such as Debian."
},
{"id": 457, 
"name": "PILOT",
"summary": "No summary available"
},
{"id": 458, 
"name": "PL-11",
"summary": "PL-11 is a high-level machine-oriented programming language for the PDP-11, developed by R.D. Russell of CERN in 1971. Written in Fortran IV, it is similar to PL360 and is cross-compiled on other machines.\nPL-11 was originally developed as part of the Omega project, a particle physics facility operational at CERN (Geneva, Switzerland) during the 1970s. The first version was written for the CII 10070, a clone of the XDS Sigma 7 built in France. Towards the end of the 1970s it was ported to the IBM 370/168, then part of CERN's computer centre.\nA report describing the language is available from CERN."
},
{"id": 459, 
"name": "PL/0",
"summary": "PL/0 is a programming language, intended as an educational programming language, that is similar to but much simpler than Pascal, a general-purpose programming language. It serves as an example of how to construct a compiler. It was originally introduced in the book, Algorithms + Data Structures = Programs, by Niklaus Wirth in 1976. It features quite limited language constructs: there are no real numbers, very few basic arithmetic operations and no control-flow constructs other than \"if\" and \"while\" blocks. While these limitations make writing real applications in this language impractical, it helps the compiler remain compact and simple."
},
{"id": 460, 
"name": "PL/C",
"summary": "PL/C is a computer programming language developed at Cornell University with the specific goal of being used for teaching programming.  It is based on  IBM's PL/I language, and was designed in the early 1970s.  Cornell also developed a compiler for the language that was based on its earlier CUPL compiler, and it was widely used in college-level programming courses.  The two researchers and academic teachers who designed PL/C were Richard W. Conway and Thomas R. Wilcox. They submitted the famous article \"Design and implementation of a diagnostic compiler for PL/I\" published in the Communications of ACM in March 1973, pages 169-179. \nPL/C eliminated some of the more complex features of PL/I, and added extensive debugging and error recovery facilities. PL/C is a subset of PL/I.   A program that runs without error under the PL/C compiler should run under PL/I and produce the  same results, unless certain incompatible diagnostic features, such as a  macro section (begun by a $MACRO statement and finished by a $MEND statement), were used. The PL/C compiler had the unusual capability of never failing to compile any program, through the use of extensive automatic correction of many syntax errors and by converting any remaining syntax errors to output statements."
},
{"id": 461, 
"name": "PL/I",
"summary": "PL/I (Programming Language One, pronounced  and sometimes written PL/1) is a procedural, imperative computer programming language developed and published by IBM. It is designed for scientific, engineering, business and system programming.  It has been used by  academic, commercial and industrial organizations since it was introduced in the 1960s, and is still used.PL/I's main domains are data processing, numerical computation, scientific computing, and system programming. It supports recursion, structured programming, linked data structure handling, fixed-point, floating-point, complex, character string handling, and bit string handling. The language syntax is English-like and suited for describing complex data formats with a wide set of functions available to verify and manipulate them."
},
{"id": 462, 
"name": "PL/M",
"summary": "The PL/M programming language \n(an acronym of Programming Language for Microcomputers)\nis a high-level language conceived and developed by \nGary Kildall in 1973  for Hank Smith at Intel for its microprocessors.\nThe language incorporated ideas from PL/I, ALGOL and XPL, and had an integrated macro processor. As a graduate of the University of Washington Kildall had used their B5500 computer[1], and as such was aware of the potential of high-level languages such as ESPOL for systems programming.\nUnlike other contemporary languages such as Pascal, C or BASIC, PL/M had no standard input or output routines.  It included features targeted at the low-level hardware specific to the target microprocessors, and as such, it could support direct access to any location in memory, I/O ports and the processor interrupt flags in a very efficient manner. PL/M was the first higher level programming language for microprocessor-based computers and was the original implementation language for those parts of the CP/M operating system which were not written in assembler. Many Intel and Zilog Z80 based embedded systems were programmed in PL/M during the 1970s and 1980s. For instance, the firmware of the Service Processor component of CISC AS/400 was written in PL/M.\nThe original PL/M compiler targeted the Intel 8008. An updated version generated code for the 8080 processor, which would also run on the newer Intel 8085 as well as on the Zilog Z80 family (as it is backward-compatible with the 8080). Later followed compilers for the Intel 8048 and Intel 8051-microcontroller family as well as for the 8086 (8088), 80186 (80188) and subsequent 8086-based processors, including the advanced 80286 and the 32-bit 80386. There were also PL/M compilers developed for later microcontrollers, such as the Intel 8061 and 8096 / MCS-96 architecture family. \nWhile some PL/M compilers were \"native\", meaning that they ran on systems using that same microprocessor, e.g. for the Intel ISIS operating system, there were also \"cross compilers\", for instance PLMX, which ran on other operating environments such as CP/M, Microsoft's DOS, and Digital Equipment Corporation's VAX/VMS.\nPL/M is no longer supported by Intel, but aftermarket tools like PL/M-to-C translators exist (for examples, see External links, below)."
},
{"id": 463, 
"name": "PL/P",
"summary": "The PL/P programming language (an acronym of Programming Language for Prime (computers)) is a mid-level programming language developed by Prime Computer to serve as their second primary system programming language after Fortran IV.  PL/P was a subset of PL/I.\nAdditions to the PRIMOS operating system for Prime 50 Series computers were written mostly in PL/P in later years.  Certain PRIMOS modules written in Fortran IV during PRIMOS's early years were rewritten in PL/P.  PL/P was the most widespread compiled programming language used for commercial PRIMOS applications, outpacing the use of the Prime C compiler, the CPL (PRIMOS) scripting language, and the Fortran IV compiler in commercial applications."
},
{"id": 464, 
"name": "PL/SQL",
"summary": "PL/SQL (Procedural Language for SQL) is Oracle Corporation's procedural extension for SQL and the Oracle relational database.  PL/SQL is available in Oracle Database (since version 6 - stored PL/SQL procedures/functions/packages/triggers since version 7), Times Ten in-memory database (since version 11.2.1), and IBM DB 2 (since version 9.7).  Oracle Corporation usually extends PL/SQL functionality with each successive release of the Oracle Database.\nPL/SQL includes procedural language elements such as conditions and loops. It allows declaration of constants and variables, procedures and functions, types and variables of those types, and triggers.  It can handle exceptions (run-time errors).  Arrays are supported involving the use of PL/SQL collections.  Implementations from version 8 of Oracle Database on wards have included features associated with object-orientation.  One can create PL/SQL units such as procedures, functions, packages, types, and triggers, which are stored in the database for reuse by applications that use any of the Oracle Database programmatic interfaces.\nHistorically,  the first public version of PL/SQL definition was in 1995, and the Oracle's inception year ~1992. It implements the ISO SQL/PSM standard."
},
{"id": 465, 
"name": "PL360",
"summary": "PL360 (or PL/360) is a system programming language designed by Niklaus Wirth and written by Niklaus Wirth, Joseph  W.  Wells, Jr., and Edwin Satterthwaite, Jr. for the IBM System/360 computer at Stanford University. A description of PL360 was published in early 1968, although the implementation was probably completed before Wirth left Stanford in 1967."
},
{"id": 466, 
"name": "PLANC",
"summary": "PLANC (pronounced as \"plank\") is a high level computer programming language. The acronym stands for Programming LAnguage for Nd Computers.\nCompilers were developed by Norsk Data for several architectures, including the Motorola 68000, 88000, x86, and the Norsk Data NORD-10 minicomputer architecture and ND-500 superminicomputer.\nThe language  was designed to be platform independent. It was mainly used internally at Norsk Data for writing high level systems software such as the upper parts of the operating systems and compilers."
},
{"id": 467, 
"name": "PLEX (programming language)",
"summary": "PLEX (Programming Language for EXchanges) is a special-purpose, concurrent, real-time programming language.  The PLEX language is closely tied to the architecture of Ericsson's AXE telephone exchanges which it was designed to control. PLEX was developed by Göran Hemdahl at Ericsson in the 1970s,  and it has been continuously evolving since then. PLEX was described in 2008 as \"a cross between Fortran and a macro assembler.\"The language has two variants: Plex-C used for the AXE Central Processor (CP) and Plex-M used for Extension Module Regional Processors (EMRP)."
},
{"id": 468, 
"name": "PLEXIL",
"summary": "PLEXIL (Plan Execution Interchange Language) is an open source technology for automation, created and currently in development by  NASA."
},
{"id": 469, 
"name": "POP-11",
"summary": "POP-11 is a reflective, incrementally compiled programming language with many of the features of an interpreted language. It is the core language of the Poplog programming environment developed originally by the University of Sussex, and recently in the School of Computer Science at the University of Birmingham, which hosts the Poplog website.\nPOP-11 is an evolution of the language POP-2, developed in Edinburgh University, and features an open stack model (like Forth, among others). It is mainly procedural, but supports declarative language constructs, including a pattern matcher, and is mostly used for research and teaching in artificial intelligence, although it has features sufficient for many other classes of problems. It is often used to introduce symbolic programming techniques to programmers of more conventional languages like Pascal, who find POP syntax more familiar than that of Lisp. One of POP-11's features is that it supports first-class functions.\nPOP-11 is the core language of the Poplog system. The availability of the compiler and compiler subroutines at run-time (a requirement for incremental compilation) gives it the ability to support a far wider range of extensions than would be possible using only a macro facility. This made it possible for incremental compilers to be added for Prolog, Common Lisp and Standard ML, which could be added as required to support either mixed language development or development in the second language without using any POP-11 constructs. This made it possible for Poplog to be used by teachers, researchers, and developers who were interested in only one of the languages. The most successful product developed in POP-11 was the Clementine data-mining system, developed by ISL. After SPSS bought ISL they decided to port Clementine to C++ and Java, and eventually succeeded with great effort (and perhaps some loss of the flexibility provided by the use of an AI language).\nPOP-11 was for a time available only as part of an expensive commercial package (Poplog), but since about 1999 it has been freely available as part of the Open Source version of Poplog, including various additional packages and teaching libraries. An online version of ELIZA using POP-11 is available at Birmingham.\nAt the University of Sussex, David Young used POP-11 in combination with C and Fortran to develop a suite of teaching and interactive development tools for image processing and vision, and has made them available in the Popvision extension to Poplog."
},
{"id": 470, 
"name": "POP-2",
"summary": "Pop 2 is the fourth mixtape by English singer and songwriter Charli XCX, released on 15 December 2017 by Asylum Records. Executive produced by A.G. Cook of PC Music, sessions for the mixtape began just several months before its release and featured a wide variety of guest contributions. The project received acclaim from music critics, and was backed by the single \"Out of My Head\" featuring Alma and Tove Lo."
},
{"id": 471, 
"name": "POV-Ray",
"summary": "The Persistence of Vision Ray Tracer, most commonly acronymed as POV-Ray, is a cross-platform ray-tracing program that generates images from a text-based scene description. It was originally based on DKBTrace, written by David Kirk Buck and Aaron A. Collins for Amiga computers. There are also influences from the earlier Polyray raytracer because of contributions from its author, Alexander Enzmann. POV-Ray is free and open-source software, with the source code available under the AGPLv3."
},
{"id": 472, 
"name": "PROIV",
"summary": "PROIV (/proʊ,fʊər/) is a low code development platform, developed and sold by NorthgateArinso, part of the Northgate Information Solutions Group. It has an active community of around 2500 developers and end-users worldwide, ranging from consultants to large multinationals, finance institutions, tax authorities, retailers, engineering companies, media operators and software houses.\nPROIV's usual application domain is database-centric business applications. PROIV has some similarities to languages such as ABAP, FOCUS and RPG.\nPROIV programs consist of declarative/non-procedural specifications that control the overall structure of the program and database access and that have an implicit sequence of execution (which PROIV programmers refer to as the timing cycle).  Procedural subroutines can be added by the programmer; these are written in a 3GL-like language which PROIV calls \"Logic\".\nNote that in PROIV programs are referred to as \"functions\", which can be confusing as it differs from the more usual use of that term in programming languages."
},
{"id": 473, 
"name": "PROMAL",
"summary": "A promenade dance, commonly called a prom, is a semi-formal (black tie) dance or gathering of high school students. This event is typically held near the end of the senior year (the last year of high school). Proms figure greatly in popular culture and are major events among high school students. There may be individual senior (12th grade) and junior (11th grade) proms or they may be combined.\nAt a prom, a prom king and a prom queen may be revealed. These are honorary titles awarded to students elected in a school-wide vote prior to the prom.  Other students may be honored with inclusion in a prom court. The selection method for a prom court is similar to that of homecoming queen/princess, king, and court. Inclusion in a prom court may be a reflection of popularity of those students elected and their level of participation in school activities, such as clubs or sports.\nThe prom queen and prom king may be given crowns to wear. Members of the prom court may be given sashes to wear and photographed together.Similar events take place in many other parts of the world. In Canada, the term \"formal\" or \"Grad\" are often used. While in Australia and New Zealand, the terms school formal and ball are most commonly used for occasions equivalent to the American prom, and the event is usually held for students in Year 12, although the bestowing of the regal titles does not occur. Many schools hold a formal graduation ball for finishing students at the end of the year in place of or as well as a formal.  In Ireland a debutante ball or debs may also be held. In Poland, high schools organize a \"studniówka\". The term \"prom\" is becoming more common in the UK and younger generations in Canada because of the influence of American films and television shows."
},
{"id": 474, 
"name": "PROSE modeling language",
"summary": "PROSE was the mathematical 4GL virtual machine which established the holistic modeling paradigm known as Synthetic Calculus (AKA MetaCalculus). A successor to the SLANG/CUE simulation and optimization language developed at TRW Systems, it was introduced in 1974 on Control Data supercomputers. It was the first commercial language to employ automatic differentiation (AD), which was optimized to loop in the instruction-stack of the CDC 6600 CPU.\nAlthough PROSE was a rich block-structured procedural language, its focus was the blending of simultaneous-variable mathematical systems such as: \n\nimplicit non-linear equations systems,\nordinary differential-equations systems, and\nmultidimensional optimization.Each of these kinds of system models were distinct and had operator templates to automate and solve them, added to the procedural syntax. These automated system problems were considered \"holistic\" because their unknowns were simultaneous, and they could not be reduced in formulation to solve piecewise, or by algebra manipulation (e.g. substitution), but had to be solved as wholes. And wholeness also pertained to algorithmic determinacy or mathematical \"closure\", which made solution convergence possible and certain in principle, if not corrupted by numerical instability."
},
{"id": 475, 
"name": "ParaSail (programming language)",
"summary": "No summary available"
},
{"id": 476, 
"name": "Parallax Propeller",
"summary": "The Parallax P8X32A Propeller is a multi-core processor parallel computer architecture microcontroller chip with eight 32-bit reduced instruction set computer (RISC) central processing unit (CPU) cores. Introduced in 2006, it is designed and sold by Parallax, Inc.\nThe Propeller microcontroller, Propeller assembly language, and Spin interpreter were designed by Parallax's cofounder and president, Chip Gracey. The Spin programming language and Propeller Tool integrated development environment (IDE) were designed by Chip Gracey and Parallax's software engineer Jeff Martin.\nOn August 6, 2014, Parallax Inc., released all of the Propeller 1 P8X32A hardware and tools as open-source hardware and software under the GNU General Public License (GPL) 3.0. This included the Verilog code, top-level hardware description language (HDL) files, Spin interpreter, PropellerIDE and SimpleIDE programming tools, and compilers."
},
{"id": 477, 
"name": "Pascal (programming language)",
"summary": "Pascal is an imperative and procedural programming language, designed by Niklaus Wirth as a small, efficient language intended to encourage good programming practices using structured programming and data structuring. It is named in honour of the French mathematician, philosopher and physicist Blaise Pascal.\nBased on Wirth's book, Algorithms + Data Structures = Programs, Pascal was developed on the pattern of the ALGOL 60 language. Wirth was involved in the process to improve the language as part of the ALGOL X efforts and proposed a version known as ALGOL W. This was not accepted, and the ALGOL X process bogged down. In 1968, Wirth decided to abandon the ALGOL X process and further improve ALGOL W, releasing this as Pascal in 1970.\nOn top of ALGOL's scalars and arrays, Pascal enabled defining complex datatypes and building dynamic and recursive data structures such as lists, trees and graphs. Pascal has strong typing on all objects, which means that one type of data cannot be converted or interpreted as another without explicit conversions. Unlike most languages in the C-family, Pascal allows nested procedure definitions to any level of depth, and also allows most kinds of definitions and declarations inside subroutines (procedures and functions). A program is thus syntactically similar to a single procedure or function.\nPascal became very successful in the 1970s, notably on the burgeoning minicomputer market. Compilers were also available for many microcomputers as the field emerged in the late 1970s. It was widely used as a teaching language in university-level programming courses in the 1980s, and also used in production settings for writing commercial software during the same period. It was displaced by the C programming language during the late 1980s and early 1990s as UNIX-based systems became popular, and especially with the release of C++.\nA derivative known as Object Pascal designed for object-oriented programming was developed in 1985; this was used by Apple Computer and Borland in the late 1980s and later developed into Delphi on the Microsoft Windows platform. Extensions to the Pascal concepts led to the languages Modula-2 and Oberon."
},
{"id": 478, 
"name": "Pascal Script",
"summary": "Pascal Script is a scripting language based on the programming language Pascal that facilitates automated runtime control over scriptable applications and server software. It is implemented by a free scripting engine that includes a compiler and an interpreter for byte code.\nPascal Script supports the majority of Object Pascal constructs, making it partly compatible to Delphi, Free Pascal and GNU Pascal.\nInitially developed by Carlo Kok as CajScript and renamed to Innerfuse Pascal Script with version 2.23, the software was taken over by RemObjects, renamed again to RemObjects Pascal Script and offered as open source software for the Delphi IDE. Beginning with version 2.07 CajScript has been ported to Free Pascal. Since 2017 Pascal Script is included as a standard component in the Lazarus IDE."
},
{"id": 479, 
"name": "PeopleCode",
"summary": "PeopleCode is a proprietary object-oriented programming language used to express business logic for PeopleSoft applications. Syntactically, PeopleCode is similar to other programming languages, and can be found in both loosely-typed and strongly-typed forms. PeopleCode and its run-time environment is part of the larger PeopleTools framework. PeopleCode has evolved over time and its implementation through the PeopleSoft applications lack consistency. PeopleCode offers some interoperability with the Java programming language. Definition name references, for example, enable you to refer to PeopleTools definitions, such as record definitions or pages, without using hard-coded string literals. Other language features, such as PeopleCode data types and metastrings, reflect the close interaction of PeopleTools and Structured Query Language (SQL). Dot notation, classes and methods in PeopleCode are similar to other object oriented languages, like Java. Object syntax was an important feature of PeopleTools 8."
},
{"id": 480, 
"name": "Perl",
"summary": "Perl is a family of two high-level, general-purpose, interpreted, dynamic programming languages. \"Perl\" refers to Perl 5, but from 2000 to 2019 it also referred to its redesigned \"sister language\", Perl 6, before the latter's name was officially changed to Raku in October 2019.Though Perl is not officially an acronym, there are various backronyms in use, including \"Practical Extraction and Reporting Language\". Perl was originally developed by Larry Wall in 1987 as a general-purpose Unix scripting language to make report processing easier. Since then, it has undergone many changes and revisions. Raku, which began as a redesign of Perl 5 in 2000, eventually evolved into a separate language. Both languages continue to be developed independently by different development teams and liberally borrow ideas from one another.\nThe Perl languages borrow features from other programming languages including C, shell script (sh), AWK, and sed; Wall also alludes to BASIC and Lisp in the introduction to Learning Perl (Schwartz & Christiansen) and so on. They provide text processing facilities without the arbitrary data-length limits of many contemporary Unix command line tools, facilitating manipulation of text files. Perl 5 gained widespread popularity in the late 1990s as a CGI scripting language, in part due to its unsurpassed regular expression and string parsing abilities.In addition to CGI, Perl 5 is used for system administration, network programming, finance, bioinformatics, and other applications, such as for GUIs. It has been nicknamed \"the Swiss Army chainsaw of scripting languages\" because of its flexibility and power, and also its ugliness. In 1998, it was also referred to as the \"duct tape that holds the Internet together,\" in reference to both its ubiquitous use as a glue language and its perceived inelegance."
},
{"id": 481, 
"name": "Perl Data Language",
"summary": "Perl Data Language (abbreviated PDL) is a set of free software array programming extensions to the Perl programming language. PDL extends the data structures built into Perl, to include large multidimensional arrays, and adds functionality to manipulate those arrays as vector objects. It also provides tools for image processing, computer modeling of physical systems, and graphical plotting and presentation. Simple operations are automatically vectorized across complete arrays, and higher-dimensional operations (such as matrix multiplication) are supported."
},
{"id": 482, 
"name": "Pharo",
"summary": "Pharo is an open source dynamic and reflective language which is inspired by the programming language Smalltalk. Pharo offers several live programming features such as immediate object manipulation, live update and hot recompiling."
},
{"id": 483, 
"name": "Pico (programming language)",
"summary": "See also Pico (disambiguation).Pico is a programming language developed at the Software Languages Lab at Vrije Universiteit Brussel. The language was created to introduce the essentials of programming to non-computer science students.\nPico can be seen as an effort to generate a palatable and enjoyable language for people who do not want to study hard for the elegance and power of a language. They have done it by adapting Scheme's semantics.\nWhile designing Pico, the Software Languages Lab was inspired by the Abelson and Sussman's book \"Structure and Interpretation of Computer Programs\". Furthermore, they were influenced by the teaching of programming at high school or academic level.\nPico should be interpreted as 'small', the idea was to create a small language for educational purposes."
},
{"id": 484, 
"name": "Picolisp",
"summary": "PicoLisp is a programming language, a dialect of the language Lisp. It runs on operating systems including Linux and others that are Portable Operating System Interface (POSIX) compliant. Its most prominent features are simplicity and minimalism. It is built on one internal data type: a cell. On the language level, a programmer can use three different data types (numbers, symbols, and lists) being represented by cells and differentiated by bits at the end of the cell. It is free and open-source software released under an MIT License (X11)."
},
{"id": 485, 
"name": "Pict (programming language)",
"summary": "Pict is a statically typed programming language, one of the very few based on the π-calculus. Work on the language began at the University of Edinburgh in 1992, and development has been more or less dormant since 1998. The language is still at an experimental stage."
},
{"id": 486, 
"name": "Pig (programming tool)",
"summary": "Apache Pig\nis a high-level platform for creating programs that run on Apache Hadoop. The language for this platform is called Pig Latin.  Pig can execute its Hadoop jobs in MapReduce, Apache Tez, or Apache Spark.  Pig Latin abstracts the programming from the Java MapReduce idiom into a notation which makes MapReduce programming high level, similar to that of SQL for relational database management systems. Pig Latin can be extended using user-defined functions (UDFs) which the user can write in Java, Python, JavaScript, Ruby or Groovy and then call directly from the language."
},
{"id": 487, 
"name": "Pike (programming language)",
"summary": "Pike is an interpreted, general-purpose, high-level, cross-platform, dynamic programming language, with a syntax similar to that of C. Unlike many other dynamic languages, Pike is both statically and dynamically typed, and requires explicit type definitions. It features a flexible type system that allows the rapid development and flexible code of dynamically typed languages, while still providing some of the benefits of a statically typed language.\nPike features garbage collection, advanced data types, and first-class anonymous functions, with support for many programming paradigms, including object-oriented, functional and imperative programming. Pike is free software, released under the GPL, LGPL and MPL licenses."
},
{"id": 488, 
"name": "Pinecone (programming language)",
"summary": "The aim of this list of programming languages is to include all notable programming languages in existence, both those in current use and historical ones, in alphabetical order. Dialects of BASIC, esoteric programming languages, and markup languages are not included. \n\n"
},
{"id": 489, 
"name": "Pizza (programming language)",
"summary": "Pizza is an open-source superset of Java 1.4, prior to the introduction of generics for the Java programming language.  In addition to its own solution for adding generics to the language, Pizza also added function pointers and algebraic types with case classes and pattern matching.\nIn August 2001, the developers made a compiler capable of working with Java.  Most Pizza applications can run in a Java environment, but certain cases will cause problems.\nWork on Pizza has more or less stopped since 2002.  Its main developers have concentrated instead on the Generic Java project, another attempt to add generics to Java which was eventually adopted into the official language version 1.5. The pattern matching and other functional programming-like features have been further developed in the Scala programming language. \nMartin Odersky remarked, \"we wanted to integrate the functional and object-oriented parts in a cleaner way than what we were able to achieve before with the Pizza language. [...] In Pizza we did a clunkier attempt, and in Scala I think we achieved a much smoother integration between the two.\""
},
{"id": 490, 
"name": "Plankalkül",
"summary": "Plankalkül (German pronunciation: [ˈplaːnkalkyːl]) is a programming language designed for engineering purposes by Konrad Zuse  between 1942 and 1945. It was the first high-level programming language to be designed for a computer.\nKalkül is the German term for a formal system—as in Hilbert-Kalkül, the original name for the Hilbert-style deduction system—so Plankalkül refers to a formal system for planning."
},
{"id": 491, 
"name": "Planner (programming language)",
"summary": "Planner (often seen in publications as \"PLANNER\" although it is not an acronym) is a programming language designed by Carl Hewitt at MIT, and first published in 1969.  First, subsets such as Micro-Planner and Pico-Planner were implemented, and then essentially the whole language was implemented as Popler by Julian Davies at the University of Edinburgh in the POP-2 programming language. Derivations such as QA4, Conniver, QLISP and Ether (see scientific community metaphor) were important tools in artificial intelligence research in the 1970s, which influenced commercial developments such as KEE and ART."
},
{"id": 492, 
"name": "Plus (programming language)",
"summary": "C++ () is a general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or \"C with Classes\". The language has expanded significantly over time, and modern C++ has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms.C++ was designed with a bias toward system programming and embedded, resource-constrained software and large systems, with performance, efficiency¸ and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, servers (e.g. e-commerce, Web search, or SQL servers), and performance-critical applications (e.g. telephone switches or space probes).C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2017 as ISO/IEC 14882:2017 (informally known as C++17). The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11 and C++14 standards. The current C++17 standard supersedes these with new features and an enlarged standard library.  Before the initial standardization in 1998, C++ was developed by Danish computer scientist Bjarne Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization. C++20 is the next planned standard, keeping with the current trend of a new version every three years."
},
{"id": 493, 
"name": "Polymorphic Programming Language",
"summary": "The Polymorphic Programming Language (PPL) was developed in 1969 at Harvard University by Thomas A. Standish. It is an interactive, extensible language with a base language similar to the language APL.The assignment operator <- (or ←) has influenced the language S."
},
{"id": 494, 
"name": "Pony (programming language)",
"summary": "The Shakespeare Programming Language (SPL) is an esoteric programming language designed by Jon Åslund and Karl Hasselström. Like the Chef programming language, it is designed to make programs appear to be something other than programs; in this case, Shakespearean plays.\nA character list in the beginning of the program declares a number of stacks, naturally with names like \"Romeo\" and \"Juliet\". These characters enter into dialogue with each other in which they manipulate each other's topmost values, push and pop each other, and do I/O. The characters can also ask each other questions which behave as conditional statements. On the whole, the programming model is very similar to assembly language but much more verbose."
},
{"id": 495, 
"name": "PostScript",
"summary": "PostScript (PS) is a page description language in the electronic publishing and desktop publishing business.  It is a dynamically typed, concatenative programming language and was created at Adobe Systems by John Warnock, Charles Geschke, Doug Brotz, Ed Taft and Bill Paxton from 1982 to 1984."
},
{"id": 496, 
"name": "PowerBuilder",
"summary": "PowerBuilder is an integrated development environment owned by SAP since the acquisition of Sybase in 2010.  On July 5, 2016, SAP and Appeon entered into an agreement whereby Appeon would be responsible for developing, selling, and supporting PowerBuilder.Over the years, PowerBuilder has been updated with new standards.  In 2010, a major upgrade of PowerBuilder was released to provide support for the Microsoft .NET Framework.  In 2014, support was added for OData, dockable windows, and 64-bit native applications.  In 2017, support was added for iOS and Android app development.PowerBuilder 2019 provides new targets to enable developers to rapidly create RESTful Web APIs and non-visual .NET assemblies, in a test-driven manner, using the C# language and the .NET Core framework. And PowerScript client app development was revamped with new UI technologies and cloud architecture."
},
{"id": 497, 
"name": "PowerShell",
"summary": "PowerShell is a task automation and configuration management framework from Microsoft, consisting of a command-line shell and associated scripting language. Initially a Windows component only, known as Windows PowerShell, it was made open-source and cross-platform on 18 August 2016 with the introduction of PowerShell Core. The former is built on .NET Framework while the latter on .NET Core.\nIn PowerShell, administrative tasks are generally performed by cmdlets (pronounced command-lets), which are specialized .NET classes implementing a particular operation. These work by accessing data in different data stores, like the file system or registry, which are made available to PowerShell via providers. Third-party developers can add cmdlets and providers to PowerShell. Cmdlets may be used by scripts and scripts may be packaged into modules.\nPowerShell provides full access to COM and WMI, enabling administrators to perform administrative tasks on both local and remote Windows systems as well as WS-Management and CIM enabling management of remote Linux systems and network devices. PowerShell also provides a hosting API with which the PowerShell runtime can be embedded inside other applications. These applications can then use PowerShell functionality to implement certain operations, including those exposed via the graphical interface. This capability has been used by Microsoft Exchange Server 2007 to expose its management functionality as PowerShell cmdlets and providers and implement the graphical management tools as PowerShell hosts which invoke the necessary cmdlets. Other Microsoft applications including Microsoft SQL Server 2008 also expose their management interface via PowerShell cmdlets.PowerShell includes its own extensive, console-based help (similar to man pages in Unix shells) accessible via the Get-Help cmdlet. Local help contents can be retrieved from the Internet via Update-Help cmdlet. Alternatively, help from the web can be acquired on a case-by-case basis via the -online switch to Get-Help."
},
{"id": 498, 
"name": "Powerhouse (programming language)",
"summary": "PowerHouse is a trademarked name for a byte-compiled fourth-generation programming language (or 4GL) originally produced by Quasar Corporation (later renamed Cognos Incorporated) for the Hewlett-Packard HP3000 mini-computer. It was initially composed of five components:\n\nQDD, or Quasar Data Dictionary: for building a central data dictionary used by all other components\nQDesign: a character-based screen generator\nQuick: an interactive, character-based screen processor (running screens generated by QDesign)\nQuiz: a report writer\nQTP: a batch transaction processor."
},
{"id": 499, 
"name": "Pro*C",
"summary": "Proložac is a municipality in Split–Dalmatia County, Croatia. In the census of 2011 it had a population of 3,802, in the following settlements:\nDonji Proložac, population 1,511\nGornji Proložac, population 346\nPostranje, population 1,390\nRičice, population 231\nŠumet, population 324It borders Herzegovina and some Croatian municipalities such as Imotski and Lovreć."
},
{"id": 500, 
"name": "Processing (programming language)",
"summary": "Processing is an open-source graphical library and integrated development environment (IDE) built for the electronic arts, new media art, and visual design communities with the purpose of teaching non-programmers the fundamentals of computer programming in a visual context.\nProcessing uses the Java language, with additional simplifications such as additional classes and aliased mathematical functions and operations. It also provides a graphical user interface for simplifying the compilation and execution stage.\nThe Processing language and IDE were the precursor to other projects including Arduino, Wiring and p5.js."
},
{"id": 501, 
"name": "Processing.js",
"summary": "Processing.js is a JavaScript port of Processing, a programming language designed to write visualisations, images, and interactive content. It allows web browsers to display animations, visual applications, games and other graphical rich content without the need for a Java applet or Flash plugin. \nProcessing.js was originally created to allow existing Processing developers and existing code to work unmodified on web. Processing.js used JavaScript to render 2D and 3D content on the HTML canvas element, and was supported by browsers that have implemented this element (the latest versions of Mozilla Firefox, Opera, Internet Explorer, Safari and Google Chrome).\nThe development of Processing.js was started by John Resig and then picked up by the CDOT group at Seneca College after its initial release in 2008. A team of students and professors finished the porting work to get Processing.js to parity with the Processing v1.0 API, fixing more than 900 bugs, shipping 12 releases, and creating a vibrant community in the process. The project was run through a partnership between the Mozilla Foundation and Seneca College, led by David Humphrey, Al MacDonald, and Corban Brook.\nProcessing.js development was moved to GitHub in February of 2010, receiving contributions from 58 individuals, and was kept at parity with Processing up to its API version 2.1 release. The project was discontinued in December of 2018, two years after active development on it had stopped.\nLauren McCarthy created p5.js, a native JavaScript alternative and successor to Processing.js that has the official support of the Processing Foundation. McCarthy also teaches an introductory course to p5.js on Kadenze."
},
{"id": 502, 
"name": "Programming Language for Business",
"summary": "Programming Language for Business or PL/B is a business-oriented programming language originally called DATABUS and designed by Datapoint in 1972 as an alternative to COBOL because Datapoint's 8-bit computers could not fit COBOL into their limited memory, and because COBOL did not at the time have facilities to deal with Datapoint's built-in keyboard and screen.\nA version of DATABUS became an ANSI standard, and the name PL/B came about when Datapoint chose not to release its trademark on the DATABUS name."
},
{"id": 503, 
"name": "Programming language",
"summary": "A programming language is a formal language, which comprises a set of instructions that produce various kinds of output. Programming languages are used in computer programming to implement algorithms.\nMost programming languages consist of instructions for computers. There are programmable machines that use a set of specific instructions, rather than general programming languages. Early ones preceded the invention of the digital computer, the first probably being the automatic flute player described in the 9th century by the brothers Musa in Baghdad, during the Islamic Golden Age. Since the early 1800s, programs have been used to direct the behavior of machines such as Jacquard looms, music boxes and player pianos. The programs for these machines (such as a player piano's scrolls) did not produce different behavior in response to different inputs or conditions.\nThousands of different programming languages have been created, and more are being created every year. Many programming languages are written in an imperative form (i.e., as a sequence of operations to perform) while other languages use the declarative form (i.e. the desired result is specified, not how to achieve it).\nThe description of a programming language is usually split into the two components of syntax (form) and semantics (meaning). Some languages are defined by a specification document (for example, the C programming language is specified by an ISO Standard) while other languages (such as Perl) have a dominant implementation that is treated as a reference. Some languages have both, with the basic language defined by a standard and extensions taken from the dominant implementation being common."
},
{"id": 504, 
"name": "Programming language for Computable Functions",
"summary": "In computer science, Programming Computable Functions, or PCF, is a typed functional language introduced by Gordon Plotkin in 1977, based on previous unpublished material by Dana Scott. It can be considered to be an extended version of the typed lambda calculus or a simplified version of modern typed functional languages such as ML or Haskell.\nA fully abstract model for PCF was first given by Milner (1977). However, since Milner's model was essentially based on the syntax of PCF it was considered less than satisfactory (Ong, 1995). The first two fully abstract models not employing syntax were formulated during the 1990s. These models are based on game semantics (Hyland and Ong, 2000; Abramsky, Jagadeesan, and Malacaria, 2000) and Kripke logical relations (O'Hearn and Riecke, 1995). For a time it was felt that neither of these models was completely satisfactory, since they were not effectively presentable. However, Ralph Loader demonstrated that no effectively presentable fully abstract model could exist, since the question of program equivalence in the finitary fragment of PCF is not decidable."
},
{"id": 505, 
"name": "Prograph",
"summary": "Prograph is a visual, object-oriented, dataflow, multiparadigm programming language that uses iconic symbols to represent actions to be taken on data. Commercial Prograph software development environments such as Prograph Classic and Prograph CPX were available for the Apple Macintosh and Windows platforms for many years but were eventually withdrawn from the market in the late 1990s. Support for the Prograph language on macOS has recently reappeared with the release of the Marten software development environment."
},
{"id": 506, 
"name": "Prolog",
"summary": "Prolog is a  logic programming language associated with artificial intelligence and computational linguistics.Prolog has its roots in first-order logic, a formal logic, and unlike many other programming languages, Prolog is intended primarily as a declarative programming language: the program logic is expressed in terms of relations, represented as facts and rules.  A computation is initiated by running a query over these relations.The language was first conceived by Alain Colmerauer and his group in Marseille, France, in the early 1970s and the first Prolog system was developed in 1972 by Colmerauer with Philippe Roussel, based on foundational work by Robert \"Bob\" A. Kowalski's procedural interpretation of Horn clausesProlog was one of the first logic programming languages, and remains the most popular among such languages today, with several free and commercial implementations available. The language has been used for theorem proving, expert systems, term rewriting, type systems, and automated planning, as well as its original intended field of use, natural language processing.  Modern Prolog environments support the creation of graphical user interfaces, as well as administrative and networked applications.\nProlog is well-suited for specific tasks that benefit from rule-based logical queries such as searching databases, voice control systems, and filling templates."
},
{"id": 507, 
"name": "Promela",
"summary": "PROMELA (Process or Protocol Meta Language) is a verification modeling language introduced by Gerard J. Holzmann. The language allows for the dynamic creation of concurrent processes to model, for example, distributed systems. In PROMELA models, communication via message channels can be defined to be synchronous (i.e., rendezvous), or asynchronous (i.e., buffered). PROMELA models can be analyzed with the SPIN model checker, to verify that the modeled system produces the desired behavior. An implementation verified with Isabelle/HOL is also available, as part of the Computer Aided Verification of Automata project. Files written in Promela traditionally have a .pml file extension."
},
{"id": 508, 
"name": "Protel",
"summary": "Altium Limited (formerly known as Protel until 2001) is an American, Australian-domiciled owned public software company that provides PC-based electronics design software for engineers who design printed circuit boards. Founded as Protel Systems Pty Ltd in Tasmania, Australia in 1985, Altium now has regional headquarters in the United States, Australia, China, Europe, and Japan, with resellers in all other major markets.\n\n"
},
{"id": 509, 
"name": "ProvideX",
"summary": "ProvideX is a computer language and development environment derived from Business Basic (a business oriented derivative of BASIC) in the mid-1980s.\nProvideX is available on several operating systems (Unix/Linux/Windows/Mac OS X) and includes not only the programming language but also file system, presentation layer interface, and other components.  The language is primarily designed for use in the development of business applications.\nOver the years since its inception and as the computer industry has changed, ProvideX has added functionality such as a graphical interface, client-server capabilities, access to external databases, web services, and, more recently, object-oriented programming capabilities.\nOn October 8, 2010, PVX Plus Technologies announced that it has assumed all ongoing sales, development, and support of the ProvideX product line for Independent Software Vendors.  This brings the development of the language back under control of the original creator, Mike King and is the end result of almost 2 years of negotiations between Sage, EDIAS, and PVX Plus Technologies."
},
{"id": 510, 
"name": "Pure (programming language)",
"summary": "Pure, successor to the equational language Q, is a dynamically typed, functional programming language based on term rewriting. It has facilities for user-defined operator syntax, macros, arbitrary-precision arithmetic (multiple-precision numbers), and compiling to native code through the LLVM. Pure is free and open-source software distributed (mostly) under the GNU Lesser General Public License version 3 or later.\nPure comes with an interpreter and debugger, provides automatic memory management, has powerful functional and symbolic programming abilities, and interfaces to libraries in C (e.g., for numerics, low-level protocols, and other such tasks). At the same time, Pure is a small language designed from scratch; its interpreter is not large, and the library modules are written in Pure. The syntax of Pure resembles that of Miranda and Haskell, but it is a free-format language and thus uses explicit delimiters (rather than off-side rule indents) to denote program structure.\nThe Pure language is a successor of the equational programming language Q, previously created by the same author, Albert Gräf at the University of Mainz, Germany. Relative to Q, it offers some important new features (such as local functions with lexical scoping, efficient vector and matrix support, and the built-in C interface) and programs run much faster as they are compiled just-in-time to native code on the fly. Pure is mostly aimed at mathematical applications and scientific computing currently, but its interactive interpreter environment, the C interface and the growing set of addon modules make it suitable for a variety of other applications, such as artificial intelligence, symbolic computation, and real-time multimedia processing.\nPure plug-ins are available for the Gnumeric spreadsheet and Miller Puckette's Pure Data graphical multimedia software, which make it possible to extend these programs with functions written in the Pure language. Interfaces are also provided as library modules to GNU Octave, OpenCV, OpenGL, the GNU Scientific Library, FAUST, SuperCollider, and liblo (for Open Sound Control (OSC))."
},
{"id": 511, 
"name": "Pure Data",
"summary": "Pure Data (Pd) is a visual programming language developed by Miller Puckette in the 1990s for creating interactive computer music and multimedia works. While Puckette is the main author of the program, Pd is an open-source project with a large developer base working on new extensions. It is released under a license similar to the BSD license. It runs on GNU/Linux, Mac OS X, iOS, Android and Windows.  Ports exist for FreeBSD and IRIX.\nPd is very similar in scope and design to Puckette's original Max program, developed while he was at IRCAM, and is to some degree interoperable with Max/MSP, the commercial predecessor to the Max language. They may be collectively discussed as members of the Patcher family of languages.\nWith the addition of the Graphics Environment for Multimedia (GEM) external, and externals designed to work with it (like Pure Data Packet / PiDiP for Linux, Mac OS X), framestein for Windows, GridFlow (as n-dimensional matrix processing, for Linux, Mac OS X, Windows), it is possible to create and manipulate video, OpenGL graphics, images, etc., in realtime with extensive possibilities for interactivity with audio, external sensors, etc.\nPd is natively designed to enable live collaboration across networks or the Internet, allowing musicians connected via LAN or even in disparate parts of the globe to create music together in real time. Pd uses FUDI as a networking protocol."
},
{"id": 512, 
"name": "PureScript",
"summary": "PureScript is a strongly-typed, purely-functional programming language that compiles to JavaScript. It can be used to develop web applications, server side apps, and also desktop applications with use of Electron. Its syntax is mostly comparable to that of Haskell. In addition, it introduces row polymorphism and extensible records. Also, contrary to Haskell, PureScript adheres to a strict evaluation strategy."
},
{"id": 513, 
"name": "Python (programming language)",
"summary": "Python is an interpreted, high-level, general-purpose programming language. Created by Guido van Rossum and first released in 1991, Python's design philosophy emphasizes code readability with its notable use of significant whitespace. Its language constructs and object-oriented approach aim to help programmers write clear, logical code for small and large-scale projects.Python is dynamically typed and garbage-collected. It supports multiple programming paradigms, including procedural, object-oriented, and  functional programming. Python is often described as a \"batteries included\" language due to its comprehensive standard library.Python was conceived in the late 1980s as a successor to the ABC language. Python 2.0, released in 2000, introduced features like list comprehensions and a garbage collection system capable of collecting reference cycles. Python 3.0, released in 2008, was a major revision of the language that is not completely backward-compatible, and much Python 2 code does not run unmodified on Python 3.\nThe Python 2 language, i.e. Python 2.7.x, is officially being discontinued on January 1, 2020 (first planned for 2015) after which security patches and other improvements will not be released for it. With Python 2's end-of-life, only  Python 3.5.x and later will be supported.\nPython interpreters are available for many operating systems. A global community of programmers develops and maintains CPython, an open source reference implementation. A non-profit organization, the Python Software Foundation, manages and directs resources for Python and CPython development."
},
{"id": 514, 
"name": "P′′",
"summary": "P or p is the 16th letter of the modern English alphabet and  the ISO basic Latin alphabet. Its name in English is pee (pronounced ), plural pees.\n\n"
},
{"id": 515, 
"name": "Q (programming language from Kx Systems)",
"summary": "Q is a programming language for array processing, developed by Arthur Whitney. It is proprietary software, commercialized by Kx Systems. Q serves as the query language for kdb+, a disk based and in-memory, column-based database. kdb+ is based on the language K, a terse variant of the language APL. Q is a thin wrapper around K, providing a more readable, English-like interface."
},
{"id": 516, 
"name": "Q Sharp",
"summary": "Q# (pronounced as Q sharp) is a domain-specific programming language used for expressing quantum algorithms. It was initially released to the public by Microsoft as part of the Quantum Development Kit."
},
{"id": 517, 
"name": "Qalb (programming language)",
"summary": "قلب (Levantine Arabic: [ʔalb]), transliterated Qalb, Qlb and Alb, is a functional programming language allowing a programmer to write programs completely in Arabic. Its name means heart and is a recursive acronym in Arabic meaning Qlb: a programming language (قلب: لغة برمجة, Qlb: Lughat Barmajah). It was developed in 2012 by Ramsey Nasser, a computer scientist at the Eyebeam Art + Technology Center in New York City, as both an artistic endeavor and as a response to the Anglophone bias in the vast majority of programming languages, which express their fundamental concepts using English words.\nThe syntax is like that of Lisp or Scheme, consisting of parenthesized lists. All keywords are appropriate Arabic terms, and program text is laid out right-to-left, like all Arabic text. The language provides a minimal set of primitives for defining functions, conditionals, looping, list manipulation, and basic arithmetic expressions. It is Turing-complete, and the Fibonacci sequence and Conway's Game of Life have been implemented.\nBecause all program text is written in Arabic, and the connecting strokes between characters in the Arabic script can be extended to any length, it is possible to align the source code in artistic patterns, in the tradition of Arabic calligraphy.\nA JavaScript-based interpreter is currently hosted on herokuapp and the project can be forked on GitHub."
},
{"id": 518, 
"name": "Qbasic",
"summary": "QBasic, a short form of Quick Beginners All purpose Symbolic Instruction Code, is an integrated development environment (IDE) and interpreter for a variety of BASIC programming languages which are based on QuickBASIC. Code entered into the IDE is compiled to an intermediate representation (IR), and this IR is immediately interpreted on demand within the IDE. It can run under nearly all versions of DOS and 32-bit versions of Windows, or through emulation via DOSBox/DOSEMU on Linux, FreeBSD, and 64-bit versions of Windows. (QBasic is a DOS program and requires DOS or a DOS emulator.  Windows XP comes with an emulator called DOS Virtual Machine, subsequent versions of Windows require an emulator such as DosBox.) For its time, QBasic provided a state-of-the-art IDE, including a debugger with features such as on-the-fly expression evaluation and code modification. It supports various inbuilt functions.\nLike QuickBASIC, but unlike earlier versions of Microsoft BASIC, QBasic is a structured programming language, supporting constructs such as subroutines. Line numbers, a concept often associated with BASIC, are supported for compatibility, but are not considered good form, having been replaced by descriptive line labels. QBasic has limited support for user-defined data types (structures), and several primitive types used to contain strings of text or numeric data."
},
{"id": 519, 
"name": "QtScript",
"summary": "QtScript is a scripting engine that has been part of the Qt cross-platform application framework since version 4.3.0.\nThe scripting language is based on the ECMAScript standard with a few extensions, such as QObject-style signal and slot connections. The library contains the engine, and a C++ API for evaluating QtScript code and exposing custom QObject-derived C++ classes to QtScript.\nThe QtScript Binding Generator provides bindings for the Qt API to access directly from ECMAScript. QtScript and the binding generator are used for Amarok 2's scripting system.\nThe current (as of Qt 4.7) implementation uses JavaScriptCore and will not be further developed. The module is deprecated as of Qt 5.5."
},
{"id": 520, 
"name": "QuakeC",
"summary": "QuakeC is a compiled language developed in 1996 by John Carmack of id Software to program parts of the video game Quake. Using QuakeC, a programmer is able to customize Quake to great extents by adding weapons, changing game logic and physics, and programming complex scenarios. It can be used to control many aspects of the game itself, such as parts of the AI, triggers, or changes in the level. The Quake engine was the only game engine to use QuakeC. Following engines used DLL game modules for customization written in C and C++ from id Tech 4 on."
},
{"id": 521, 
"name": "Quantum programming",
"summary": "Quantum programming is the process of assembling sequences of instructions, called quantum programs, that are capable of running on a quantum computer. Quantum programming languages help express quantum algorithms using high-level constructs."
},
{"id": 522, 
"name": "R (programming language)",
"summary": "R is a programming language and free software environment for statistical computing and graphics supported by the R Foundation for Statistical Computing. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Polls, data mining surveys, and studies of scholarly literature databases show substantial increases in popularity; as of November 2019, R ranks 16th in the TIOBE index, a measure of popularity of programming languages.A GNU package, source code for the R software environment is written primarily in C, Fortran, and R itself and is freely available under the GNU General Public License. Pre-compiled binary versions are provided for various operating systems. Although R has a command line interface, there are several graphical user interfaces, such as RStudio, an integrated development environment."
},
{"id": 523, 
"name": "R++",
"summary": "R or r is the 18th letter of the modern English alphabet and  the ISO basic Latin alphabet. Its name in English is ar (pronounced ), plural ars, or in Ireland or ."
},
{"id": 524, 
"name": "RAPID",
"summary": "RAPID is a high-level programming language used to control ABB industrial robots. RAPID was introduced along with S4 Control System in 1994 by ABB, superseding the ARLA programming language.\nFeatures in the language include:\n\nRoutine parameters:\nProcedures - used as a subprogram.\nFunctions - return a value of a specific type and are used as an argument of an instruction.\nTrap routines - a means of responding to interrupts.\nArithmetic and logical expressions\nAutomatic error handling\nModular programs\nMulti tasking"
},
{"id": 525, 
"name": "REBOL",
"summary": "Rebol ( REB-əl; historically REBOL) is a cross-platform data exchange language and a multi-paradigm dynamic programming language designed by Carl Sassenrath for network communications and distributed computing.  It introduces the concept of dialecting: small, optimized, domain-specific languages for code and data, which is also the most notable property of the language according to its designer Carl Sassenrath:\n\nAlthough it can be used for programming, writing functions, and performing processes, its greatest strength is the ability to easily create domain-specific languages or dialects\n\nDouglas Crockford, known for his involvement in the development of JavaScript, has described Rebol as \"a more modern language, but with some very similar ideas to Lisp, in that it's all built upon a representation of data which is then executable as programs\" and as one of JSON's influences.Originally, the language and its official implementation were proprietary and closed source, developed by REBOL Technologies. Following discussion with Lawrence Rosen, the Rebol version 3 interpreter was released under the Apache 2.0 license on December 12, 2012. Older versions are only available in binary form, and no source release for them is planned.\nRebol has been used to program Internet applications (both client- and server-side), database applications, utilities, and multimedia applications."
},
{"id": 526, 
"name": "REFAL",
"summary": "Refal (\"[of] Recursive functions' algorithmic language\") \"is  functional programming language oriented toward symbolic computations\", including \"string processing, language translation, [and] artificial intelligence\". It is one of the oldest members of this family, first conceived of in 1966 as a theoretical tool, with the first implementation appearing in 1968. Refal was intended to combine mathematical simplicity with practicality for writing large and sophisticated programs.\nOne of the first functional programming languages to do so, and unlike Lisp of its time, Refal is based on pattern matching. Its pattern matching works in conjunction with term rewriting.\nThe basic data structure of Lisp and Prolog is a linear list built by cons operation in a sequential manner, thus with O(n) access to list's nth element. Refal's lists are built and scanned from both ends, with pattern matching working for nested lists as well as the top-level one. In effect, the basic data structure of Refal is a tree rather than a list. This gives freedom and convenience in creating data structures while using only mathematically simple control mechanisms of pattern matching and substitution.\nRefal also includes a feature called the freezer to support efficient partial evaluation.\nRefal can be applied to the processing and transformation of tree structures, similarly to XSLT."
},
{"id": 527, 
"name": "REXX",
"summary": "Rexx (Restructured Extended Executor) is an interpreted programming language developed at IBM by Mike Cowlishaw. It is a structured, high-level programming language designed for ease of learning and reading. Proprietary and open source Rexx interpreters exist for a wide range of computing platforms; compilers exist for IBM mainframe computers.Rexx is used as a scripting and macro language, and is often used for processing data and text and generating reports; these similarities with Perl mean that Rexx works well in Common Gateway Interface (CGI) programming and it is indeed used for this purpose. Rexx is the primary scripting language in some operating systems, e.g. OS/2, MVS, VM, AmigaOS, and is also used as an internal macro language in some other software, such as SPFPC, KEDIT, THE and the ZOC terminal emulator. Additionally, the Rexx language can be used for scripting and macros in any program that uses Windows Scripting Host ActiveX scripting engines languages (e.g. VBScript and JScript) if one of the Rexx engines is installed.\nRexx is supplied with VM/SP Release 3 on up, TSO/E Version 2 on up, OS/2 (1.3 and later, where it is officially named Procedures Language/2), AmigaOS Version 2 on up, PC DOS (7.0 or 2000), and Windows NT 4.0 (Resource Kit: Regina). REXX scripts for OS/2 share the filename extension .cmd with other scripting languages, and the first line of the script specifies the interpreter to be used. REXX macros for REXX-aware applications use extensions determined by the application. In the late 1980s, Rexx became the common scripting language for IBM Systems Application Architecture, where it was renamed \"SAA Procedure Language REXX\".\nA Rexx script or command is sometimes referred to as an EXEC in a nod to the CMS file type used for EXEC, EXEC 2 and REXX scripts on CP/CMS and VM/370 through z/VM."
},
{"id": 528, 
"name": "ROOP (programming language)",
"summary": "ROOP is a multiparadigm programming language targeted at AI applications created at the Chengdu University of China. It combines rule-based, procedural, logical and object-oriented programming techniques."
},
{"id": 529, 
"name": "RPL (programming language)",
"summary": "RPL (derived from Reverse Polish Lisp according to its original developers, whilst for a short while in 1987 HP marketing attempted to coin the backronym ROM-based Procedural Language for it) is a handheld calculator operating system and application programming language used on Hewlett-Packard's scientific graphing RPN (Reverse Polish Notation) calculators of the HP 28, 48, 49 and 50 series, but it is also usable on non-RPN calculators, such as the 38, 39 and 40 series.\nRPL is a structured programming language based on RPN, but equally capable of processing algebraic expressions and formulae, implemented as a threaded interpreter. RPL has many similarities to Forth, both languages being stack-based, as well as the list-based LISP. Contrary to previous HP RPN calculators, which had a fixed four-level stack, the stack used by RPL is only limited by available calculator RAM.\nRPL originated from HP's Corvallis, Oregon development facility in 1984 as a replacement for the previous practice of implementing the operating systems of calculators in assembly language. The last pocket calculator supporting RPL, the HP 50g, was discontinued in 2015.  However,  multiple emulators that can emulate HP's RPL calculators exist that run on a range of operating systems, and devices, including iOS and Android smartphones."
},
{"id": 530, 
"name": "RTL/2",
"summary": "No summary available"
},
{"id": 531, 
"name": "Racket (programming language)",
"summary": "Racket is a general-purpose, multi-paradigm programming language based on the Scheme dialect of Lisp. It is designed to be a platform for programming language design and implementation. In addition to the core Racket language, Racket is also used to refer to the family of Racket programming languages and the set of tools supporting development on and with Racket. Racket is also used for scripting, computer science education, and research. \nThe Racket platform provides an implementation of the Racket language (including a run-time system, libraries, and JIT compiler) along with the DrRacket integrated development environment (IDE) written in Racket. Racket is used by the ProgramByDesign outreach program, which aims to turn computer science into \"an indispensable part of the liberal arts curriculum\".The core Racket language is known for its extensive macro system which enables creating embedded and domain-specific languages, language constructs such as classes or modules, and separate dialects of Racket with different semantics.The platform distribution is free and open-source software distributed under the GNU Lesser General Public License (LGPL). Extensions and packages written by the community may be uploaded to Racket's package catalog."
},
{"id": 532, 
"name": "Raku (programming language)",
"summary": "No summary available"
},
{"id": 533, 
"name": "Rapira",
"summary": "Rapira is also a name for the T-12 antitank gun.Rapira (Russian: Рапира, rapier) is an educational procedural programming language developed in the Soviet Union and implemented on Agat computer, PDP-11 clones (Electronika, DVK, BK series) and Intel-8080/Z80 clones (Korvet).  It was an interpreted language with dynamic type system and high level constructions.  The language originally had a Russian-based set of keywords, but English and Moldovan were added later.  Also, it was more elegant and easier to use than existing Pascal implementations of the time.\nRapira was used in teaching computer programming in Soviet schools.  The programming environment included a text editor and an integrated debugger.\nSample program:\n\nПРОЦ СТАРТ()\n    ВЫВОД: 'Привет, мир!!!'\nКОН ПРОЦ\n\nThe same, but using the English lexics [sic, from the article referenced below]:\n\nproc start()\n     output: 'Hello, world!!!';\nend proc\n\nRapira's ideology was based on such languages as POP-2 and SETL, with strong influences from ALGOL.\nConsequently, for example, Rapira implements a very strong, flexible and interesting data structure, so-named 'tuples'. Actually, tuples in Rapira are heterogeneous lists with such allowed operations as indexing, joining, length count, getting of sublist, easy comparison, etc."
},
{"id": 534, 
"name": "Ratfiv",
"summary": "Ratfiv is an enhanced version of the Ratfor programming language, a preprocessor for Fortran designed to give it C-like capabilities. Fortran was widely used for scientific programming but had very basic control-flow primitives (\"do\" and \"goto\") and no \"macro\" facility which limited its expressiveness.\nThe name of the language is a pun (Ratfor (RATional FORtran) -> \"Rat Four\" -> \"Rat Five\" -> RatFiv).\nRatfiv was developed by Bill Wood at the Institute for Cancer Research, Philadelphia, PA in the early 1980s and released on several DECUS (Digital Equipment Users Group) SIG (Special Interest Group) tapes.  It is based on the original Ratfor by B. Kernighan and P. J. Plauger, with rewrites and enhancements by David Hanson and friends (U. of Arizona), Joe Sventek and Debbie Scherrer (Lawrence Berkeley National Laboratory).\nRatfiv V2.1 was distributed on the DECUS RSX82a SIG tape."
},
{"id": 535, 
"name": "Ratfor",
"summary": "Ratfor (short for Rational Fortran) is a programming language implemented as a preprocessor for Fortran 66. It provided modern control structures, unavailable in Fortran 66, to replace GOTOs and statement numbers."
},
{"id": 536, 
"name": "Rc",
"summary": "No summary available"
},
{"id": 537, 
"name": "Reason (programming language)",
"summary": "Reason, also known as ReasonML, is a syntax extension and toolchain for OCaml created by Jordan Walke at Facebook. Reason offers a syntax familiar to JavaScript programmers, and transpiles to OCaml. Statically typed Reason (or OCaml) code may be compiled to dynamically typed JavaScript using the BuckleScript compiler.The Reason community officially provides ReasonReact as a solution for React based web applications."
},
{"id": 538, 
"name": "Red (programming language)",
"summary": "Red is a programming language designed to overcome the limitations of the programming language Rebol. Introduced in 2011 by Nenad Rakocevic, Red is both an imperative and functional programming language. Its syntax and general usage overlaps that of the interpreted Rebol language.\nThe implementation choices of Red intend to create a full stack programming language: Red can be used for extremely high-level programming (DSLs and GUIs) as well as low-level programming (operating systems and device drivers). Key to the approach is that the language has two parts: Red/System and Red.\n\nRed/System is similar to C, but packaged into a Rebol lexical structure –  for example, one would write if x > y [print \"Hello\"] instead of if (x > y) {printf(\"Hello\n\");}.\nRed is a homoiconic language capable of meta-programming, with semantics similar to Rebol's. Red's runtime library is written in Red/System, and uses a hybrid approach: it compiles what it can deduce statically and uses an embedded interpreter otherwise. The project roadmap includes a just-in-time compiler for cases in between, but this has not yet been implemented.Red seeks to remain independent of any other toolchain; it does its own code generation. It is therefore possible to cross-compile Red programs from any platform it supports to any other, via a command-line switch. Both Red and Red/System are distributed as open-source software under the modified BSD license. The runtime library is distributed under the more permissive Boost Software License.\nBy version 0.6.4 Red includes a garbage collector \"the Simple GC\"."
},
{"id": 539, 
"name": "Rlab",
"summary": "Rlab is an interactive, interpreted numerical computation program and its core programming language, written by Ian Searle. Rlab (the language) is very high level and is intended to provide fast prototyping and program development, as well as easy data-visualization, and processing.\nRlab was not designed as a clone of MATLAB. However, as Rlab (the program) is intended to provide a good experimental environment (or laboratory) in which to do matrix math, the programming language possesses similar operators and concepts and could be called MATLAB-like.\nRlab borrows some of the best features of the MATLAB language but provides them through a different syntax that has been modified in order to be more expressive while reducing ambiguity. The variable scoping rules facilitate the creation of larger programs and re-usable program libraries. A heterogeneous associative array datatype has been added to allow users to create and operate on arbitrary data structures. The fundamental data type is the dense floating point matrix (either real or complex), though string and sparse numerical matrices (both real and complex) are also provided.\nRlab 2.1 is no longer under active development. Binary versions are available for Linux and for Windows, and source code is available under the GPL.\nRlab 2.2 has been released as a part of the project rlabplus by Marijan Koštrun."
},
{"id": 540, 
"name": "Robot Battle",
"summary": "Robot Battle is a programming game for Microsoft Windows where players design and code adaptable battling robots. Robot Battle takes strategy rather than reflexes, accuracy, or timing to succeed. What differentiates one robot from the next is its programming, for which the player is responsible. The game is inspired by the similar game RobotWar."
},
{"id": 541, 
"name": "Ruby (programming language)",
"summary": "Ruby is an interpreted, high-level, general-purpose programming language. It was designed and developed in the mid-1990s by Yukihiro \"Matz\" Matsumoto in Japan.\nRuby is dynamically typed and uses garbage collection. It supports multiple programming paradigms, including procedural, object-oriented, and  functional programming. According to the creator, Ruby was influenced by Perl, Smalltalk, Eiffel, Ada, Basic, and Lisp."
},
{"id": 542, 
"name": "Rust (programming language)",
"summary": "Rust is a multi-paradigm system programming language focused on safety, especially safe concurrency. Rust is syntactically similar to C++, but is designed to provide better memory safety while maintaining high performance.\nRust was originally designed by Graydon Hoare at Mozilla Research, with contributions from Dave Herman, Brendan Eich, and others. The designers refined the language while writing the Servo layout or browser engine, and the Rust compiler. The compiler is free and open-source software dual-licensed under the MIT License and Apache License 2.0.\nRust has been the \"most loved programming language\" in the Stack Overflow Developer Survey every year since 2016."
},
{"id": 543, 
"name": "S (programming language)",
"summary": "S is a statistical programming language developed primarily by John Chambers and (in earlier versions) Rick Becker and Allan Wilks of Bell Laboratories.  The aim of the language, as expressed by John Chambers, is \"to turn ideas into software, quickly and faithfully\".The modern implementation of S is R, a part of the GNU free software project. S-PLUS, a commercial product, was formerly sold by TIBCO Software."
},
{"id": 544, 
"name": "S-Lang (programming language)",
"summary": "The S-Lang programming library is a software library for Unix, Windows, VMS, OS/2, and Mac OS X.  It provides routines for embedding an interpreter for the S-Lang scripting language, and components to facilitate the creation of text-based applications.  The latter class of functions include routines for constructing and manipulating keymaps, an interactive line-editing facility, and both low and high-level screen/terminal management functions.  It is distributed under the terms of the GNU General Public License."
},
{"id": 545, 
"name": "S-PLUS",
"summary": "S-PLUS is a commercial implementation of the S programming language sold by TIBCO Software Inc.\nIt features object-oriented programming capabilities and advanced analytical algorithms.\nDue to the increasing popularity of the open source S successor R, TIBCO Software released the TIBCO Enterprise Runtime for R (TERR) as an alternative R interpreter."
},
{"id": 546, 
"name": "S/SL programming language",
"summary": "No summary available"
},
{"id": 547, 
"name": "S2 (programming language)",
"summary": "S2 (Style System 2) is an object-oriented programming language developed in the late 1990s by Brad Fitzpatrick, Martin \"Mart\" Atkins, and others for the online journaling service LiveJournal in order to allow users full control over the appearance of their pages. S2 source code is compiled into Perl, which the webserver can then execute directly for individual web page requests.\nThe S2 system is, at its heart, completely general and can be used for almost any web application; however there exists no documentation for the implementation of S2 within other applications, which ties it relatively closely to LiveJournal.\nThis article will make use of LiveJournal's implementation of S2 for examples. A link to detailed documentation about this implementation can be found at the bottom."
},
{"id": 548, 
"name": "S3 (programming language)",
"summary": "S3 is a structured, imperative high-level computer programming language.  It was developed by the UK company International Computers Limited (ICL) for its 2900 Series mainframes. It is a system programming language with syntax influenced by ALGOL 68 but with data types and operators aligned to those offered by the 2900 Series.  It was the implementation language of the operating system VME."
},
{"id": 549, 
"name": "SA-C (programming language)",
"summary": "Single Assignment C (SA-C) (pronounced \"sassy\") is a member of the C programming language family designed to be directly and intuitively translatable into circuits, including FPGAs. To ease translation, SA-C does not include pointers and arithmetics thereon. To retain most of the expressiveness of C, SA-C instead features true n-dimensional arrays as first-class objects of the language."
},
{"id": 550, 
"name": "SAIL (programming language)",
"summary": "SAIL, the Stanford Artificial Intelligence Language, was developed by Dan Swinehart and Bob Sproull of the Stanford AI Lab in 1970.  It was originally a large ALGOL 60-like language for the PDP-10 and DECSYSTEM-20.\nSAIL's main feature is a symbolic data system based upon an associative store (based on the LEAP system of Jerry Feldman and Paul Rovner). Items may be stored as unordered sets or as associations (triples).  Other features include processes, events and interrupts, contexts, backtracking and record garbage collection.  It also has block-structured macros, a coroutining facility and some new data types intended for building search trees and association lists.\nA number of interesting software systems were coded in SAIL, including some early versions of FTP and TeX, a document formatting system called PUB, and BRIGHT, a clinical database project sponsored by the National Institutes of Health.In 1978, there were half a dozen different operating systems for the PDP-10: ITS (MIT), WAITS (Stanford), TOPS-10 (DEC), CMU TOPS-10 (Carnegie Mellon), TENEX (BBN), Tymcom-X (Tymshare), and TOPS-20 (DEC, based on TENEX).\nSAIL was ported from WAITS to ITS so that MIT researchers could make use of software developed at Stanford University. Every port usually required the rewriting of I/O code in each application.\nA machine-independent version of SAIL called MAINSAIL was developed in the late 1970s and was used to develop many eCAD design tools during the 1980s.  MAINSAIL was easily portable to new processors and operating systems, and was still in limited use as of 2005."
},
{"id": 551, 
"name": "SAM76",
"summary": "SAM76 is a macro programming language used from the late 1970s to the present 2007 initially ran on CP/M.\nThe SAM76 language is a list and string processor designed for interactive and user-directed applications, including artificial intelligence programming, and permits high portability from machine to machine. The language shares certain features in common with LISP, Forth, and shell programming languages of the UNIX operating system.\nClaude A. R. Kagan, the language's developer, sought to combine within a single interpretive processor, the characteristics of two different string and general-purpose macro generators and the provisions to embed multiple infix operator mathematical systems.\nSAM76 was designed to:\n\nbe very pure syntactically and semantically;\nrequire a minimum of user keyboarding to achieve powerful results;\nfit in a very small computer system;\npermit editing, testing, and executing modules interactively;\nnot prevent the user from doing strange things with the syntax of the language yielding, however, predictable results.The language was based around the idea of programming with macros. A user will define a macro (a code word that can be defined by the user to invoke a specific set of instructions to perform a routine within the program) to execute a set of instructions, usually in either machine or assembly language, and use the macro in the program. In this way, a user need only define a routine once and then when that particular operation, or string is required, the user can substitute is with the macro name.\nSince then the language has been rewritten in C and compiles on Windows, Unix, Linux, and similar operating systems. The source code is available online and still compiles and runs as of 2006."
},
{"id": 552, 
"name": "SAS System",
"summary": "SAS (previously \"Statistical Analysis System\") is a statistical software suite developed by SAS Institute for advanced analytics, multivariate analysis, business intelligence, criminal investigation, data management, and predictive analytics.\nSAS was developed at North Carolina State University from 1966 until 1976, when SAS Institute was incorporated. SAS was further developed in the 1980s and 1990s with the addition of new statistical procedures, additional components and the introduction of JMP. A point-and-click interface was added in version 9 in 2004. A social media analytics product was added in 2010."
},
{"id": 553, 
"name": "SASL (programming language)",
"summary": "SASL (from St Andrews Static Language, alternatively  St Andrews Standard Language) is a purely functional programming language developed by David Turner at the University of St Andrews in 1972, based on the applicative subset of ISWIM.  In 1976 Turner redesigned and reimplemented it as a non-strict (lazy) language.  In this form it was the foundation of Turner's later languages KRC and Miranda, but SASL appears to be untyped whereas Miranda has polymorphic types.\nBurroughs Corporation used SASL to write a compiler and operating system."
},
{"id": 554, 
"name": "SETL",
"summary": "SETL (SET Language) is a very high-level programming language based on the mathematical theory of sets.  It was originally developed by (Jack) Jacob T. Schwartz at the New York University (NYU) Courant Institute of Mathematical Sciences in the late 1960s."
},
{"id": 555, 
"name": "SIGNAL (programming language)",
"summary": "SIGNAL is a programming language based on synchronized data-flow (flows + synchronization): a process is a set of equations on elementary flows describing both data and control.The SIGNAL formal model provides the capability to describe systems with several clocks  (polychronous systems) as relational specifications. Relations are useful as partial specifications and as specifications of non-deterministic devices (for instance a non-deterministic bus) or external processes (for instance an unsafe car driver).\nUsing SIGNAL allows one to specify an application, to design an architecture, to refine detailed components down to RTOS or hardware description. The SIGNAL model supports a design methodology which goes from specification to implementation, from abstraction to concretization, from synchrony to asynchrony.\nSIGNAL has been mainly developed in INRIAEspresso team since the 1980s, at the same time as similar programming languages, Esterel and Lustre."
},
{"id": 556, 
"name": "SIMSCRIPT",
"summary": "SIMSCRIPT is a free-form, English-like general-purpose simulation language conceived by Harry Markowitz and Bernard Hausner at the RAND Corporation in 1962. It was implemented as a Fortran preprocessor on the IBM 7090 and was designed for large discrete event simulations. It influenced Simula.Though earlier versions were released into the public domain, SIMSCRIPT was commercialized by Markowitz's company, California Analysis Center, Inc. (CACI), which produced proprietary versions SIMSCRIPT I.5 and SIMSCRIPT II.5."
},
{"id": 557, 
"name": "SISAL",
"summary": "Sisal (, Spanish: [siˈsal]), with the botanical name Agave sisalana, is a species of Agave native to southern Mexico but widely cultivated and naturalized in many other countries. It yields a stiff fibre used in making various products. The term sisal may refer either to the plant's common name or the fibre, depending on the context. It is sometimes referred to as \"sisal hemp\", because for centuries hemp was a major source for fibre, and other fibre sources were named after it.\nThe sisal fibre is traditionally used for rope and twine, and has many other uses, including paper, cloth, footwear, hats, bags, carpets, and dartboards."
},
{"id": 558, 
"name": "SLIP (programming language)",
"summary": "SLIP is a list processing computer programming language, invented by Joseph Weizenbaum in the 1960s.  The name SLIP stands for Symmetric LIst Processor.  It was first implemented as an extension to the Fortran programming language, and later embedded into MAD and ALGOL. The best known program written in the language is ELIZA, an early natural language processing computer program created by Weizenbaum  at the MIT Artificial Intelligence Laboratory."
},
{"id": 559, 
"name": "SMALL",
"summary": "No summary available"
},
{"id": 560, 
"name": "SNOBOL",
"summary": "SNOBOL (\"StriNg Oriented and symBOlic Language\") is a series of computer programming languages developed between 1962 and 1967 at AT&T Bell Laboratories by David J. Farber, Ralph E. Griswold and Ivan P. Polonsky, culminating in SNOBOL4.  It was one of a number of text-string-oriented languages developed during the 1950s and 1960s; others included COMIT and TRAC.\nSNOBOL4 stands apart from most programming languages of its era by having patterns as a first-class data type (i.e. a data type whose values can be manipulated in all ways permitted to any other data type in the programming language) and by providing operators for pattern concatenation and alternation. SNOBOL4 patterns are a type of object and admit various manipulations, much like later object-oriented languages such as JavaScript whose patterns are known as regular expressions. In addition SNOBOL4 strings generated during execution can be treated as programs and either interpreted or compiled and executed (as in the eval function of other languages).\nSNOBOL4 was quite widely taught in larger US universities in the late 1960s and early 1970s and was widely used in the 1970s and 1980s as a text manipulation language in the humanities.\nIn the 1980s and 1990s its use faded as newer languages such as AWK and Perl made string manipulation by means of regular expressions fashionable. SNOBOL4 patterns subsume BNF grammars, which are equivalent to context-free grammars and more powerful than regular expressions. \nThe \"regular expressions\" in current versions of AWK and Perl are in fact extensions of regular expressions in the traditional sense, but regular expressions, unlike SNOBOL4 patterns, are not recursive, which gives a distinct computational advantage to SNOBOL4 patterns. (Recursive expressions did appear in Perl 5.10, though, released in December 2007.)\nOne of the designers of SNOBOL, Ralph Griswold, designed successors to SNOBOL4 called SL5 and Icon, which combined the backtracking of SNOBOL4 pattern matching with more standard ALGOL-like structuring, as well as adding some features of their own."
},
{"id": 561, 
"name": "SOPHAEROS",
"summary": "SOPHAEROS is a computer code, used by the AECL and French Nuclear program to simulate the transfer of fission products in the reactor chamber.  It models fission product behaviour using a set of aerosol dynamic rules, and is used by AECL in fuel channel safety analyses.\n\n"
},
{"id": 562, 
"name": "SP/k",
"summary": "SP/k is a programming language developed circa 1974 by R.C. Holt, D.B. Wortman, D.T. Barnard and J.R. Cordy as a subset of the PL/I programming language designed for teaching programming. It was used for about a decade at over 40 universities, schools, and research laboratories in Canada and the United States.\nSP/k was one of the first languages specifically designed to encourage structured programming. The features of SP/k were chosen to encourage structured problem solving by computers, to make the language easy to learn and use, to eliminate confusing and redundant constructs, and to make the language easy to compile. The resulting language was suitable for introducing programming concepts used in various applications, including business data processing, scientific calculations and non-numeric computation.\nSP/k is actually a sequence of language subsets called SP/1, SP/2, ... SP/8. Each subset introduces new programming language constructs while retaining all the constructs of preceding subsets, forming a stepwise system for teaching computer programming. Each subset is precisely defined and self-contained, and can be learned or implemented without the following subsets. This allows for various levels of programming education. The design and philosophy of SP/k was a strong influence on the Turing programming language."
},
{"id": 563, 
"name": "SPARK (programming language)",
"summary": "SPARK is a formally defined computer programming language based on the Ada programming language, intended for the development of high integrity software used in systems where predictable and highly reliable operation is essential. It facilitates the development of applications that demand safety, security, or business integrity.\nOriginally, there were three versions of the SPARK language (SPARK83, SPARK95, SPARK2005) based on Ada 83, Ada 95 and Ada 2005 respectively.\nA fourth version of the SPARK language, SPARK 2014, based on Ada 2012, was released on April 30, 2014. SPARK 2014 is a complete re-design of the language and supporting verification tools.\nThe SPARK language consists of a well-defined subset of the Ada language that uses contracts to describe the specification of components in a form that is suitable for both static and dynamic verification.\nIn SPARK83/95/2005, the contracts are encoded in Ada comments (and so are ignored by any standard Ada compiler), but are processed by the SPARK \"Examiner\" and its associated tools.\nSPARK 2014, in contrast, uses Ada 2012's built-in \"aspect\" syntax to express contracts, bringing them into the core of the language. The main tool for SPARK 2014 (GNATprove) is based on the GNAT/GCC infrastructure, and re-uses almost the entirety of the GNAT Ada 2012 front-end."
},
{"id": 564, 
"name": "SPITBOL compiler",
"summary": "SPITBOL (Speedy Implementation of SNOBOL) is a compiled implementation of the SNOBOL4 programming language. Originally targeted for the IBM System/360 and System/370 family of computers, it has now been ported to most major microprocessors including the SPARC. It was created by Robert Dewar and Ken Belcher, who were then at the Illinois Institute of Technology.\nPrior to the development of SPITBOL, SNOBOL4 was thought to be slow, memory-intensive, and impossible to compile due to its dynamic nature. While delayed binding prevents everything from being determined at compile time, SPITBOL adopts various strategies for making decisions as early as possible. Recent versions of the SPITBOL compiler are available. Since 2001 the source code for the original SPITBOL 360 compiler has been made available under the GNU General Public License.MACRO SPITBOL is an implementation of SPITBOL written in the 1970s by Robert Dewar and Anthony P. McCann. MACRO SPITBOL is coded in MINIMAL, an assembly language for an abstract machine. The instruction set is carefully defined to allow some latitude in its implementation, so that hardware operations favorable to string processing can be exploited.An implementation of MINIMAL that was designed for interpretation on microcomputers was done by translating MINIMAL into MICRAL using a translator that was itself implemented in SPITBOL. The MICRAL version of MACRO SPITBOL, together with the MICRAL interpreter ran in under 40K bytes. This extreme object code compression of MICRAL is achieved using a set of machine code macro substitutions that minimizes the space required for the object code and macro table. The complexity of known algorithms for an optimal solution to this problem are high, but efficient heuristics attain near-optimal results.The source code for MACRO SPITBOL was released under the GNU General Public License on April 17, 2009."
},
{"id": 565, 
"name": "SQL",
"summary": "SQL ( (listen) S-Q-L,  \"sequel\"; Structured Query Language) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e. data incorporating relations among entities and variables.\nSQL offers two main advantages over older read–write APIs such as ISAM or VSAM. Firstly, it introduced the concept of accessing many records with one single command. Secondly, it eliminates the need to specify how to reach a record, e.g. with or without an index.\nOriginally based upon relational algebra and tuple relational calculus, SQL consists of many types of statements, which may be informally classed as sublanguages, commonly: a data query language (DQL), a data definition language (DDL), a data control language (DCL), and a data manipulation language (DML). The scope of SQL includes data query, data manipulation (insert, update and delete), data definition (schema creation and modification), and data access control. Although SQL is essentially a declarative language (4GL), it includes also procedural elements.\nSQL was one of the first commercial languages to utilize Edgar F. Codd’s relational model. The model was described in his influential 1970 paper, \"A Relational Model of Data for Large Shared Data Banks\".  Despite not entirely adhering to the relational model as described by Codd, it became the most widely used database language.SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987. Since then, the standard has been revised to include a larger set of features. Despite the existence of such standards, most SQL code is not completely portable among different database systems without adjustments."
},
{"id": 566, 
"name": "SQR",
"summary": "SQR (Hyperion SQR Production Reporting, Part of OBIEE) is a programming language designed for generating reports from database management system management systems. The name is an abbreviation of Structured Query Reporter, which suggests its relationship to SQL (Structured Query Language). Any SQL statement can be embedded in an SQR program."
},
{"id": 567, 
"name": "SR (programming language)",
"summary": "SR (short for Synchronizing Resources) is a programming language designed for concurrent programming.\nResources encapsulate processes and the variables they share, and can be separately compiled. Operations provide the primary mechanism for process interaction.\nSR provides a novel integration of the mechanisms for invoking and servicing operations. Consequently, it supports local and remote procedure call, rendezvous, message passing, dynamic process creation, multicast, semaphores and shared memory.\nVersion 2.2 has been ported to the Apollo, DECstation, Data General AViiON, HP 9000 Series 300, Multimax, NeXT, PA-RISC, RS/6000, Sequent Symmetry, SGI IRIS, Sun-3, Sun-4 and others."
},
{"id": 568, 
"name": "SYMPL",
"summary": "SYMPL is an obsolete programming language developed by the Control Data Corporation (CDC) for use on the CDC 6000 series computer systems in the 1970s and 1980s.  It was based on a subset of CDCs version of JOVIAL, as an alternative to assembly language.  A number of important CDC software products were implemented in SYMPL, including compilers, libraries, a full-screen editor, and major subsystems.\nSYMPL is a compiled, imperative, and procedural language.  Compared to the Fortran of the day, SYMPL supports:\n\nStronger data typing - All variables must be declared prior to use,\nData structures - Including \"based\" dynamically allocated structures,\nStructured programming constructs,\nNested procedures,\nIn-fix \"bead\" (bit) and character manipulation\nA simple macro facilitySimplifications compared to JOVIAL include: fewer built-in data types, no recursive calls to procedures, and no COMPOOL concept."
},
{"id": 569, 
"name": "SabreTalk",
"summary": "SabreTalk is a discontinued dialect of PL/I for the S/360 IBM mainframes running the TPF platform. SabreTalk was developed jointly by American Airlines, Eastern Air Lines and IBM. SabreTalk is known as PL/TPF (Programming Language for TPF).SabreTalk programs are still running in the British Airways Flight Operations system (FICO), although a commercially available automatic converter is being used to translate SabreTalk programs to C programs.  Both the Reservations and Operations Support System (OSS) of Delta Air Lines were developed using both SabreTalk and IBM 360 Assembler.  Although development is currently restricted to C++, the majority of Delta's programming platform remained in Sabretalk until recently in the 2010s.\nBecause of the translator\nfrom SabreTalk to C and because it is no longer supported by the original developers, several companies are beginning the move away from SabreTalk to purely C-based programs.\nCode Sample:"
},
{"id": 570, 
"name": "Sather",
"summary": "For people with the surname, see Sather (surname).\n\nSather is an object-oriented programming language. It originated circa 1990 at the International Computer Science Institute (ICSI) at the University of California, Berkeley, developed by an international team led by Steve Omohundro. It supports garbage collection and generics by subtypes.\nOriginally, it was based on Eiffel, but it has diverged, and now includes several functional programming features.\nThe name is inspired by Eiffel; the Sather Tower is a recognizable landmark at Berkeley, named after Jane Krom Sather, the widow of Peder Sather, who donated large sums to the foundation of the university.\nSather also takes inspiration from other programming languages and paradigms: iterators, design by contract, abstract classes, multiple inheritance, anonymous functions, operator overloading, contravariant type system.\nThe original Berkeley implementation (last stable version 1.1 was released in 1995, no longer maintained) has been adopted by the Free Software Foundation therefore becoming GNU Sather. Last stable GNU version (1.2.3) was released in July 2007 and the software is currently not maintained. There were several other variants: Sather-K from the University of Karlsruhe; Sather-W from the University of Waikato (implementation of Sather version 1.3); Peter Naulls' port of ICSI Sather 1.1 to RISC OS; and pSather, a parallel version of ICSI Sather addressing non-uniform memory access multiprocessor architectures but presenting a shared memory model to the programmer.\nThe former ICSI Sather compiler (now GNU Sather) is implemented as a compiler to C, i.e., the compiler does not output object or machine code, but takes Sather source code and generates C source code as an intermediate language. Optimizing is left to the C compiler.\nThe GNU Sather compiler, written in Sather itself, is dual licensed under the GNU GPL & LGPL."
},
{"id": 571, 
"name": "Sawzall (programming language)",
"summary": "Sawzall is a procedural domain-specific programming language, used by Google to process large numbers of individual log records. Sawzall was first described in 2003, and the szl runtime was open-sourced in August 2010. However, since the MapReduce table aggregators have not been released, the open-sourced runtime is not useful for large-scale data analysis of multiple log files off the shelf. Sawzall has been replaced by Lingo (logs in Go) for most purposes within Google."
},
{"id": 572, 
"name": "Scala (programming language)",
"summary": "Scala ( SKAH-lah) is a general-purpose programming language providing support for functional programming and a strong static type system. Designed to be concise, many of Scala's design decisions aimed to address criticisms of Java.Scala source code is intended to be compiled to Java bytecode, so that the resulting executable code runs on a Java virtual machine. Scala provides language interoperability with Java, so that libraries written in either language may be referenced directly in Scala or Java code. Like Java, Scala is object-oriented, and uses a curly-brace syntax reminiscent of the C programming language. Unlike Java, Scala has many features of functional programming languages like Scheme, Standard ML and Haskell, including currying, type inference, immutability, lazy evaluation, and pattern matching. It also has an advanced type system supporting algebraic data types, covariance and contravariance, higher-order types (but not higher-rank types), and anonymous types. Other features of Scala not present in Java include operator overloading, optional parameters, named parameters, and raw strings. Conversely, a feature of Java not in Scala is checked exceptions, which has proved controversial.The name Scala is a portmanteau of scalable and language, signifying that it is designed to grow with the demands of its users."
},
{"id": 573, 
"name": "Scheme (programming language)",
"summary": "Scheme is a programming language that supports multiple paradigms, including functional and imperative programming. It is one of the three main dialects of Lisp, alongside Common Lisp and Clojure. Unlike Common Lisp, Scheme follows a minimalist design philosophy, specifying a small standard core with powerful tools for language extension.\nScheme was created during the 1970s at the MIT AI Lab and released by its developers, Guy L. Steele and Gerald Jay Sussman, via a series of memos now known as the Lambda Papers. It was the first dialect of Lisp to choose lexical scope and the first to require implementations to perform tail-call optimization, giving stronger support for functional programming and associated techniques such as recursive algorithms. It was also one of the first programming languages to support first-class continuations.  It had a significant influence on the effort that led to the development of Common Lisp.The Scheme language is standardized in the official IEEE standard and a de facto standard called the Revisedn Report on the Algorithmic Language Scheme (RnRS). The most widely implemented standard is R5RS (1998); a new standard, R6RS, was ratified in 2007. Scheme has a diverse user base due to its compactness and elegance, but its minimalist philosophy has also caused wide divergence between practical implementations, so much that the Scheme Steering Committee calls it \"the world's most unportable programming language\" and \"a family of dialects\" rather than a single language."
},
{"id": 574, 
"name": "Scilab",
"summary": "Scilab is a free and open-source, cross-platform numerical computational package and a high-level, numerically oriented programming language.  It\ncan be used for signal processing, statistical analysis, image enhancement, fluid dynamics simulations, numerical optimization, and modeling, simulation of explicit and implicit dynamical systems and (if the corresponding toolbox is installed) symbolic manipulations.\nScilab is one of the two major open-source alternatives to MATLAB, the other one being GNU Octave. Scilab puts less emphasis on syntactic compatibility with MATLAB than Octave does, but it is similar enough that some authors suggest that it is easy to transfer skills between the two systems."
},
{"id": 575, 
"name": "Scratch (programming language)",
"summary": "Scratch is a block-based visual programming language and online community targeted primarily at children. Users of the site can create online projects using a block-like interface. The service is developed by the MIT Media Lab, has been translated into 70+ languages, and is used in most parts of the world. Scratch is taught and used in after-school centers, schools, and colleges, as well as other public knowledge institutions. As of May 2019, community statistics on the language's official website show more than 40 million projects shared by over 40 million users, and almost 40 million monthly website visits.\nScratch takes its name from a technique used by disk jockeys called \"scratching\", where vinyl records are clipped together and manipulated on a turntable to produce different sound effects and music. Like scratching, the website lets users mix together different media (including graphics, sound, and other programs) in creative ways by \"remixing\" projects.\n\n"
},
{"id": 576, 
"name": "Script.NET",
"summary": "Script.NET or S# is a metaprogramming language that provides scripting functionality in Microsoft .NET applications, allowing runtime execution of custom functionality, similar to VBA in Microsoft Office applications. The syntax of Script.NET is similar to JavaScript. It is designed to be simple and efficient scripting language allowing to customize .NET applications. The language has a true runtime interpreter, and it is executed without generating additional in-memory assemblies.\nScript.NET is an open-source project."
},
{"id": 577, 
"name": "Secure Operations Language",
"summary": "The Secure Operations Language (SOL) was developed jointly by the United States Naval Research Laboratory and Utah State University in the United States. SOL is a  domain-specific synchronous programming language for developing distributed applications and is based on software engineering principles developed in the Software Cost Reduction project at the Naval Research Laboratory in the late 1970s and early 1980s. SOL is intended to be a domain-specific language for developing service-based systems. Concurrently, a domain-specific extension of Java (SOLj) is being developed (FTDCS 2007)\nApplication domains include sensor networks, defense and space systems, healthcare delivery, power control, etc.\nThe investigators of the project are Dr. Ramesh Bharadwaj from the Naval Research Laboratory and Dr. Supratik Mukhopadhyay from Utah State University."
},
{"id": 578, 
"name": "Sed",
"summary": "sed (stream editor) is a Unix utility that parses and transforms text, using a simple, compact programming language. sed was developed from 1973 to 1974 by Lee E. McMahon of Bell Labs,\nand is available today for most operating systems. sed was based on the scripting features of the interactive editor ed (\"editor\", 1971) and the earlier qed (\"quick editor\", 1965–66). sed was one of the earliest tools to support regular expressions, and remains in use for text processing, most notably with the substitution command. Popular alternative tools for plaintext string manipulation and \"stream editing\" include AWK and Perl."
},
{"id": 579, 
"name": "Seed7",
"summary": "Seed7 is an extensible general-purpose programming language designed by Thomas Mertes. It is syntactically similar to Pascal and Ada. Along with many other features, it provides an extension mechanism. Seed7 supports introducing new syntax elements and their semantics into the language, and allows new language constructs to be defined and written in Seed7. For example, programmers can introduce syntax and semantics of new statements and user defined operator symbols. The implementation of Seed7 differs significantly from that of languages with hard-coded syntax and semantics."
},
{"id": 580, 
"name": "Self (programming language)",
"summary": "Self is an object-oriented programming language based on the concept of prototypes. Self began as a dialect of Smalltalk, being dynamically typed and using just-in-time compilation (JIT) as well as the prototype-based approach to objects: it was first used as an experimental test system for language design in the 1980s and 1990s. In 2006, Self was still being developed as part of the Klein project, which was a Self virtual machine written fully in Self. The latest version is 2017.1 released in May 2017.Several just-in-time compilation techniques were pioneered and improved in Self research as they were required to allow a very high level object oriented language to perform at up to half the speed of optimized C. Much of the development of Self took place at Sun Microsystems, and the techniques they developed were later deployed for Java's HotSpot virtual machine.\nAt one point a version of Smalltalk was implemented in Self. Because it was able to use the JIT, this also gave extremely good performance."
},
{"id": 581, 
"name": "SenseTalk",
"summary": "SenseTalk is an English-like scripting language derived from the HyperTalk language used in HyperCard. SenseTalk was originally developed as the scripting language within the HyperSense multimedia authoring application on the NeXTStep and OpenStep platforms.  SenseTalk resurfaced in 2002 as the scripting language in eggPlant, the first commercial Mac OS X and cross-platform GUI testing application."
},
{"id": 582, 
"name": "SequenceL",
"summary": "SequenceL is a general purpose functional programming language and auto-parallelizing (Parallel computing) compiler and tool set, whose primary design objectives are performance on multi-core processor hardware, ease of programming, platform portability/optimization, and code clarity and readability.  Its main advantage is that it can be used to write straightforward code that automatically takes full advantage of all the processing power available, without programmers needing to be concerned with identifying parallelisms, specifying vectorization, avoiding race conditions, and other challenges of manual directive-based programming approaches such as OpenMP.\nPrograms written in SequenceL can be compiled to multithreaded code that runs in parallel, with no explicit indications from a programmer of how or what to parallelize. As of 2015, versions of the SequenceL compiler generate parallel code in C++ and OpenCL, which allows it to work with most popular programming languages, including C, C++, C#, Fortran, Java, and Python.  A platform-specific runtime manages the threads safely, automatically providing parallel performance according to the number of cores available, currently supporting x86, POWER8, and ARM platforms."
},
{"id": 583, 
"name": "Shell script",
"summary": "A shell script is a computer program designed to be run by the Unix shell, a command-line interpreter. The various dialects of shell scripts are considered to be scripting languages. Typical operations performed by shell scripts include file manipulation, program execution, and printing text. A script which sets up the environment, runs the program, and does any necessary cleanup, logging, etc. is called a wrapper.\nThe term is also used more generally to mean the automated mode of running an operating system shell; in specific operating systems they are called other things such as batch files (MSDos-Win95 stream, OS/2), command procedures (VMS), and shell scripts (Windows NT stream and third-party derivatives like 4NT—article is at cmd.exe), and mainframe operating systems are associated with a number of terms.\nThe typical Unix/Linux/POSIX-compliant installation includes the KornShell (ksh) in several possible versions such as ksh88, Korn Shell '93 and others. The oldest shell still in common use is the Bourne shell (sh); Unix systems invariably also include the C shell (csh), Bash (bash), a Remote Shell (rsh), a Secure Shell (ssh) for SSL telnet connections, and a shell which is a main component of the Tcl/Tk installation usually called tclsh; wish is a GUI-based Tcl/Tk shell. The C and Tcl shells have syntax quite similar to that of said programming languages, and the Korn shells and Bash are developments of the Bourne shell, which is based on the ALGOL language with elements of a number of others added as well. On the other hand, the various shells plus tools like awk, sed, grep, and BASIC, Lisp, C and so forth contributed to the Perl programming language.Other shells available on a machine or available for download and/or purchase include Almquist shell (ash), PowerShell (msh), Z shell (zsh, a particularly common enhanced KornShell), the Tenex C Shell (tcsh), a Perl-like shell (psh). Related programs such as shells based on Python, Ruby, C, Java, Perl, Pascal, Rexx &c in various forms are also widely available. Another somewhat common shell is osh, whose manual page states it \"is an enhanced, backward-compatible port of the standard command interpreter from Sixth Edition UNIX.\"Windows-Unix interoperability software such as the MKS Toolkit, Cygwin, UWIN, Interix and others make the above shells and Unix programming available on Windows systems, providing functionality all the way down to signals and other inter-process communication, system calls and APIs. The Hamilton C shell is a Windows shell that is very similar to the Unix C Shell. Microsoft distributes Windows Services for UNIX for use with its NT-based operating systems in particular, which have a POSIX environmental subsystem."
},
{"id": 584, 
"name": "SiMPLE",
"summary": "SiMPLE (a recursive acronym for SiMPLE Modular Programming Language & Environment) is a programming development system that was created to provide easy programming capabilities for everybody, especially non-professionals.\nThe website of SimpleCodeWorks is now unaccessable (dead) and the only way to download the program is off archive.org. The Forums are still alive."
},
{"id": 585, 
"name": "Simula",
"summary": "Simula is the name of two simulation programming languages, Simula I and Simula 67, developed in the 1960s at the Norwegian Computing Center in Oslo, by Ole-Johan Dahl and Kristen Nygaard. Syntactically, it is a fairly faithful superset of ALGOL 60, also influenced by the design of Simscript.Simula 67 introduced objects, classes, inheritance and subclasses, virtual procedures, coroutines, and discrete event simulation, and features garbage collection. Also other forms of subtyping (besides inheriting subclasses) were introduced in Simula derivatives.Simula is considered the first object-oriented programming language. As its name suggests, Simula was designed for doing simulations, and the needs of that domain provided the framework for many of the features of object-oriented languages today.\nSimula has been used in a wide range of applications such as simulating VLSI designs, process modeling, protocols, algorithms, and other applications such as typesetting, computer graphics, and education. The influence of Simula is often understated, and Simula-type objects are reimplemented in C++, Object Pascal, Java, C# and several other languages. Computer scientists such as Bjarne Stroustrup, creator of C++, and James Gosling, creator of Java, have acknowledged Simula as a major influence."
},
{"id": 586, 
"name": "Simulink",
"summary": "Simulink is a MATLAB-based graphical programming environment for modeling, simulating and analyzing multidomain dynamical systems. Its primary interface is a graphical block diagramming tool and a customizable set of block libraries. It offers tight integration with the rest of the MATLAB environment and can either drive MATLAB or be scripted from it. Simulink is widely used in automatic control and digital signal processing for multidomain simulation and model-based design."
},
{"id": 587, 
"name": "Singularity (operating system)",
"summary": "Singularity is an experimental operating system (OS) which was built by Microsoft Research between 2003 and 2010.  It was designed as a high dependability OS in which the kernel, device drivers, and application software were all written in managed code. Internal security uses type safety instead of hardware memory protection."
},
{"id": 588, 
"name": "Smalltalk",
"summary": "Smalltalk is an object-oriented, dynamically typed reflective programming language. Smalltalk was created as the language underpinning the \"new world\" of computing exemplified by \"human–computer symbiosis\". It was designed and created in part for educational use, specifically for constructionist learning, at the Learning Research Group (LRG)  of  Xerox PARC by Alan Kay, Dan Ingalls, Adele Goldberg, Ted Kaehler, Diana Merry, Scott Wallace, and others during the 1970s.\nThe language was first generally released as Smalltalk-80. Smalltalk-like languages are in active development and have gathered loyal communities of users around them. ANSI Smalltalk was ratified in 1998 and represents the standard version of Smalltalk.Smalltalk took second place for \"most loved programming language\" in the Stack Overflow Developer Survey in 2017, but it was not among the 26 most loved programming languages of the 2018 survey."
},
{"id": 589, 
"name": "Snap! (programming language)",
"summary": "Snap! is a free, blocks-based educational graphical programming language and online community aimed at students to explore, create and re-mix interactive animations, games, stories, and more, while learning about mathematical and computational ideas. While inspired by Scratch, Snap! has many advanced features. The Snap! editor, and programs created in it, are web applications that run in the browser (like Scratch 2) without requiring installation."
},
{"id": 590, 
"name": "Snowball programming language",
"summary": "Snowball is a small string processing programming language designed for creating stemming algorithms for use in information retrieval.The Snowball compiler translates a Snowball script (a  .sbl file) into either a thread-safe ANSI C program or a Java program. For ANSI C, each Snowball script produces a program file and corresponding header file (with  .c  and  .h  extensions). The Snowball compiler checks the consistency of its script, and this check was used to discover a typo in a seminal academic paper by Lovins which had remained undetected for 30 years.The basic datatypes handled by Snowball are strings of characters, signed integers, and boolean truth values, or more simply strings, integers and booleans. Snowball's characters are either 8-bit wide, or 16-bit, depending on the mode of use. In particular, both ASCII and 16-bit Unicode are supported. Like the SNOBOL programming language, the flow of control in Snowball is arranged by the implicit use of signals (each statement returns a true or false value), rather than the explicit use of constructs such as if, then, and break found in C and many other programming languages.The name Snowball was chosen as a tribute to the SNOBOL programming language, with which it shares the concept of string patterns delivering signals that are used to control the flow of the program. The creator of Snowball, Dr. Martin Porter, \"toyed with the idea of calling it 'strippergram' \", because it \"effectively provides a 'suffix STRIPPER GRAMmar' \"."
},
{"id": 591, 
"name": "Solidity",
"summary": "Solidity is an object-oriented programming language for writing smart contracts. It is used for implementing smart contracts on various blockchain platforms, most notably, Ethereum. It was developed by Christian Reitwiessner, Alex Beregszaszi, Yoichi Hirai and several former Ethereum core contributors to enable writing smart contracts on blockchain platforms such as Ethereum."
},
{"id": 592, 
"name": "Speakeasy (computational environment)",
"summary": "Speakeasy is a numerical computing interactive environment also featuring an interpreted programming language. It was initially developed for internal use at the Physics Division of Argonne National Laboratory by the theoretical physicist Stanley Cohen. He eventually founded Speakeasy Computing Corporation to make the program available commercially.\nSpeakeasy is a very long-lasting numerical package. In fact, the original version of the environment was built around a core dynamic data repository called \"Named storage\" developed in the early 1960s, while the most recent version has been released in 2006.\nSpeakeasy was aimed to make the computational work of the physicists at the Argonne National Laboratory easier. It was initially conceived to work on mainframes (the only kind of computers at that time), and was subsequently ported to new platforms (minicomputers, personal computers) as they became available. The porting of the same code on different platforms was made easier by using Mortran metalanguage macros to face systems dependencies and compilers deficiencies and differences. Speakeasy is currently available on several platforms: PCs running Windows, macOS, Linux, departmental computers and workstations running several flavors of Linux, AIX or Solaris.\nSpeakeasy was also among the first interactive numerical computing environments, having been implemented in such a way on a CDC 3600 system, and later on IBM TSO machines as one was in beta-testing at the Argonne National Laboratory at the time.\nAlmost since the beginning (as the dynamic linking functionality was made available in the operating systems) Speakeasy features the capability of expanding its operational vocabulary using separated modules, dynamically linked to the core processor as they are needed. For that reason such modules  were called \"linkules\" (LINKable-modULES). They are functions with a generalized interface, which can be written in  FORTRAN or in C.\nThe independence of each of the new modules from the others and from the main processor is of great help in improving the system, especially it was in the old days.\nThis easy way of expanding the functionalities of the main processor was often exploited by the users to develop their own specialized packages. Besides the programs, functions and subroutines the user can write in the Speakeasy's own interpreted language, linkules add functionalities carried out with the typical performances of compiled programs.\nAmong the packages developed by the users, one of the most important is \"Modeleasy\", originally developed as \"FEDeasy\" in the early 1970s at the research department of the Federal Reserve Board of Governors in Washington D.C..\nModeleasy implements special objects and functions for large econometric models estimation and simulation.\nIts evolution led eventually to its distribution as an independent product."
},
{"id": 593, 
"name": "Speedcoding",
"summary": "Speedcoding or Speedcode was the first high-level programming language created for an IBM computer. The language was developed by John Backus in 1953 for the IBM 701 to support computation with  floating point numbers. Here high level means symbolic and aiming for natural language expressivity as a goal as opposed to machine or hardware instruction oriented coding.\nThe idea arose from the difficulty of programming the IBM SSEC machine when Backus was hired to calculate astronomical positions in early 1950.\nThe speedcoding system was an interpreter and focused on ease of use at the expense of system resources. It provided pseudo-instructions for common mathematical functions: logarithms, exponentiation, and trigonometric operations. The resident software analyzed pseudo-instructions one by one and called the appropriate subroutine. Speedcoding was also the first implementation of decimal input/output operations. Although it substantially reduced the effort of writing many jobs, the running time of a program that was written with the help of Speedcoding was usually ten to twenty times that of machine code. The interpreter took 310 memory words, about 30% of the memory available on a 701."
},
{"id": 594, 
"name": "Squeak",
"summary": "The Squeak programming language is a dialect of Smalltalk. It is object-oriented, class-based, and reflective.\nIt was derived directly from Smalltalk-80 by a group at Apple Computer that included some of the original Smalltalk-80 developers. Its development was continued by the same group at Walt Disney Imagineering, where it was intended for use in internal Disney projects. Later on the group moved on to be supported by HP labs, SAP Labs and most recently  Y Combinator.\nSqueak is cross-platform. Programs produced on one platform run bit-identical on all other platforms, and versions are available for many platforms including the obvious Windows/macOS/linux versions. The Squeak system includes code for generating a new version of the virtual machine (VM) on which it runs. It also includes a VM simulator written in Squeak. For these reasons, it is easily ported."
},
{"id": 595, 
"name": "Squirrel (programming language)",
"summary": "Squirrel is a high level imperative, object-oriented programming language, designed to be a lightweight scripting language that fits in the size, memory bandwidth, and real-time requirements of applications like video games and hardware such as Electric Imp.\nMirthKit, a simple toolkit for making and distributing open source, cross-platform 2D games, uses Squirrel for its platform. It is used extensively by Code::Blocks for scripting and was also used in Final Fantasy Crystal Chronicles: My Life as a King. It is also used in Left 4 Dead 2, Portal 2 and Thimbleweed Park for scripted events."
},
{"id": 596, 
"name": "Standard ML",
"summary": "Standard ML (SML; \"Standard Meta Language\") is a general-purpose, modular, functional programming language with compile-time type checking and type inference. It is popular among compiler writers and programming language researchers, as well as in the development of theorem provers.\nSML is a modern dialect of ML, the programming language used in the Logic for Computable Functions (LCF) theorem-proving project. It is distinctive among widely used languages in that it has a formal specification, given as typing rules and operational semantics in The Definition of Standard ML (1990, revised and simplified as The Definition of Standard ML (Revised) in 1997)."
},
{"id": 597, 
"name": "Starlogo",
"summary": "StarLogo is an agent-based simulation language developed by Mitchel Resnick, Eric Klopfer, and others at the Massachusetts Institute of Technology (MIT) Media Lab and Scheller Teacher Education Program in Massachusetts. It is an extension of the Logo programming language, a dialect of Lisp. Designed for education, StarLogo can be used by students to model or simulate the behavior of decentralized systems.\nThe first StarLogo ran on a Connection Machine 2 parallel computer. A subsequent version ran on Macintosh computers. It was later renamed MacStarLogo, and now is named MacStarLogo Classic. The current StarLogo is written in the language Java and works on most computers.\nStarLogo is also available in a version named OpenStarLogo. Its source code is available online, but the license under which it is released is not an open-source license according to The Open Source Definition, because of restrictions on the commercial use of the code."
},
{"id": 598, 
"name": "Stata",
"summary": "Stata is a general-purpose statistical software package created in 1985 by StataCorp. Most of its users work in research, especially in the fields of economics, sociology, political science, biomedicine and epidemiology.Stata's capabilities include data management, statistical analysis, graphics, simulations, regression, and custom programming. It also has a system to disseminate user-written programs that lets it grow continuously.\nThe name Stata is a syllabic abbreviation of the words statistics and data. The FAQ for the official forum of Stata insists that the correct English pronunciation of Stata \"must remain a mystery\"; any of \"Stay-ta\", \"Sta-ta\" or \"Stah-ta\" are considered acceptable.There are four major builds of each version of Stata:\nStata/MP for multiprocessor computers (including dual-core and multicore processors)\nStata/SE for large databases\nStata/IC, which is the standard version\nNumerics by Stata, supports any of the data sizes listed above in an embedded environmentSmall Stata, which was the smaller, student version for educational purchase only, is no longer available."
},
{"id": 599, 
"name": "Stateflow",
"summary": "Stateflow (developed by MathWorks) is a control logic tool used to model reactive systems via state machines and flow charts within a Simulink model.  Stateflow uses a variant of the finite-state machine notation established by David Harel, enabling the representation of hierarchy, parallelism and history within a state chart. Stateflow also provides state transition tables and truth tables."
},
{"id": 600, 
"name": "Strand (programming language)",
"summary": "Strand is a high-level symbolic language for parallel computing, similar in syntax to Prolog.\nArtificial Intelligence Ltd were awarded the British Computer Society Award for Technical Innovation 1989 for Strand88.\nThe language was created by computer scientists Ian Foster and Stephen Taylor."
},
{"id": 601, 
"name": "Strongtalk",
"summary": "Strongtalk is a Smalltalk environment with optional static typing support. Strongtalk can make some compile time checks, and offer stronger type safety guarantees; this is the source of its name. It is non-commercial, though it was originally a commercial project developed by a small startup company named LongView Technologies (trading as Animorphic Systems)."
},
{"id": 602, 
"name": "Subtext (programming language)",
"summary": "No summary available"
},
{"id": 603, 
"name": "SuperCollider",
"summary": "SuperCollider is an environment and programming language originally released in 1996 by James McCartney for real-time audio synthesis and algorithmic composition.Since then it has been evolving into a system used and further developed by both scientists and artists working with sound. It is an efficient and expressive dynamic programming language providing a framework for acoustic research, algorithmic music, interactive programming and live coding.\nReleased under the terms of the GPLv2 in 2002, SuperCollider is free and open-source software."
},
{"id": 604, 
"name": "SuperTalk",
"summary": "SuperTalk is the scripting language used in SuperCard. SuperTalk is a descendant of HyperTalk."
},
{"id": 605, 
"name": "Superbase database",
"summary": "Superbase is an end-user desktop database program that started on the Commodore 64 and was ported from that to various operating systems over the course of more than 20 years. It also has generally included a programming language to automate database-oriented tasks, and with later versions included WYSIWYG form and report designers as well as more sophisticated programming capabilities."
},
{"id": 606, 
"name": "Swift (parallel scripting language)",
"summary": "Swift is an implicitly parallel programming language that allows writing scripts that distribute program execution across distributed computing resources, including clusters, clouds, grids, and supercomputers. Swift implementations are open-source software under the Apache License, version 2.0."
},
{"id": 607, 
"name": "Swift (programming language)",
"summary": "Swift is a general-purpose, multi-paradigm, compiled programming language developed by Apple Inc. for iOS, iPadOS, macOS, watchOS, tvOS, Linux, and z/OS. Swift is designed to work with Apple's Cocoa and Cocoa Touch frameworks and the large body of existing Objective-C code written for Apple products. It is built with the open source LLVM compiler framework and has been included in Xcode since version 6, released in 2014. On Apple platforms, it uses the Objective-C runtime library which allows C, Objective-C, C++ and Swift code to run within one program.Apple intended Swift to support many core concepts associated with Objective-C, notably dynamic dispatch, widespread late binding, extensible programming and similar features, but in a \"safer\" way, making it easier to catch software bugs; Swift has features addressing some common programming errors like null pointer dereferencing and provides syntactic sugar to help avoid the pyramid of doom. Swift supports the concept of protocol extensibility, an extensibility system that can be applied to types, structs and classes, which Apple promotes as a real change in programming paradigms they term \"protocol-oriented programming\" (similar to traits).Swift was introduced at Apple's 2014 Worldwide Developers Conference (WWDC). It underwent an upgrade to version 1.2 during 2014 and a more major upgrade to Swift 2 at WWDC 2015. Initially a proprietary language, version 2.2 was made open-source software under the Apache License 2.0 on December 3, 2015, for Apple's platforms and Linux.Through version 3.0 the syntax of Swift went through significant evolution, with the core team making source stability a focus in later versions. In the first quarter of 2018 Swift surpassed Objective-C in measured popularity.Swift 4.0, released in 2017, introduced several changes to some built-in classes and structures. Code written with previous versions of Swift can be updated using the migration functionality built into Xcode. Swift 5, released in March 2019, introduced a stable binary interface on Apple platforms, allowing the Swift runtime to be incorporated into Apple operating systems. It is source compatible with Swift 4.Swift 5.1 was officially released in September 2019. Swift 5.1 builds on the previous version of Swift 5 by extending the stable features of the language to compile-time with the introduction of module stability. The introduction of module stability makes it possible to create and share binary frameworks that will work with future releases of Swift."
},
{"id": 608, 
"name": "SystemVerilog",
"summary": "SystemVerilog, standardized as IEEE 1800, is a hardware description and hardware verification language used to model, design, simulate, test and implement electronic systems. SystemVerilog is based on Verilog and some extensions, and since 2008 Verilog is now part of the same IEEE standard. It is commonly used in the semiconductor and electronic design industry as an evolution of Verilog."
},
{"id": 609, 
"name": "T (programming language)",
"summary": "The programming language T is a dialect of the language Scheme developed in the early 1980s by Jonathan A. Rees, Kent M. Pitman, and Norman I. Adams of Yale University as an experiment in language design and implementation."
},
{"id": 610, 
"name": "TACL",
"summary": "TACL (the Tandem Advanced Command Language) is the scripting programming language used in Tandem Computers. TACL is the shell."
},
{"id": 611, 
"name": "TACPOL (programming language)",
"summary": "TACPOL (Tactical Procedure Oriented Language) is a block structured programming language developed by the United States Army for the TACFIRE Tactical Fire Direction command and control application.  TACPOL is similar to PL/I."
},
{"id": 612, 
"name": "TADS",
"summary": "Text Adventure Development System (TADS) is a prototype-based domain-specific programming language and set of standard libraries for creating interactive fiction (IF) games."
},
{"id": 613, 
"name": "TELCOMP",
"summary": "TELCOMP was a programming language developed at Bolt, Beranek and Newman (BBN) in about 1964 and in use until at least 1974. BBN offered TELCOMP as a paid service, with first revenue in October 1965.  The service was sold to a company called On-Line Systems in 1972.  In the United Kingdom, TELCOMP was offered by Time Sharing, Ltd, a partnership between BBN and an entrepreneur named Richard Evans.\nIt was an interactive, conversational language based on JOSS, developed by BBN after Cliff Shaw from RAND visited the labs in 1964 as part of the NIH survey.  It was first implemented on the PDP-1 and was used to provide a commercial time sharing service by BBN in the Boston area and later by Time Sharing Ltd. in the United Kingdom.\nIn 1996, Leo Beranek said \"We even developed a programming language called TELCOMP that to this day, some say was better than the programming language that the industry adopted, namely BASIC.\"There were at least three versions: TELCOMP I, TELCOMP II, and TELCOMP III.\nTELCOMP I was implemented on the PDP-1, TELCOMP II on the PDP-7 and TELCOMP III on the PDP-10, running on DEC\n's TOPS-10 operating system or on BBN's own TENEX operating system.\nTELCOMP programs were normally input via a paper tape reader on a Teletype Model 33, which would be connected to a PDP via a modem and acoustic telephone line.  Data could be read from the paper tape reader or from the Teletype keyboard.  Output was either printed to the Teletype or sent to the paper tape punch.  Early versions had no facility for on-line storage of programs or data.\nDuring data input using a Teletype, the user would type a response to a printed prompt. If, instead of hitting Return, the user hit Tab ↹, another, possibly computed, prompt would be printed on the same line.  This process could be repeated for the full width of the line. This unusual feature allowed very compact data entry, comparable to full-screen CRT data entry.  It saved paper, and the input section of the form became part of the program's printed output.\nA later derivative of TELCOMP called STRINGCOMP was oriented towards string handling.  Another BBN JOSS-derivative called FILECOMP was developed for the GE MEDINET system, which was cancelled. The implicit file handling system it contained was influential on the MUMPS global database system.\nThe initial research for LOGO was carried out in TELCOMP, but only the JOSS-style errors and interaction made it through to the actual language."
},
{"id": 614, 
"name": "TMG (language)",
"summary": "TMG (TransMoGrifier) is a compiler-compiler created by Robert M. McClure and presented in 1968, and implemented by Douglas McIlroy. TMG ran on systems like OS360 and early Unix. It was used to build EPL, an early version of PL/I.McIlroy wrote TMG on a piece of paper and \"decided to give his piece of paper his piece of paper,\" compiling assembly language that he entered and assembled on Ken Thompson's Unix system running on Ken's PDP-7. Ken used TMG in 1970 on his PDP-7 as a tool to offer Fortran, but ended up creating the B programming language which was much influenced by BCPL."
},
{"id": 615, 
"name": "TOM (object-oriented programming language)",
"summary": "TOM was an object-oriented programming language developed in the 1990s that built on the lessons learned from Objective-C.  The main purpose of TOM was to allow for \"unplanned reuse\" of code via a well-developed extension mechanism.  This concept was introduced seemingly by accident in Objective-C and later proved to be of wide use, and was applied aggressively in TOM.\nThe primary changes in TOM are the addition of multiple inheritance, tuples as a first-class part of the language, cleaner syntax, free of the C requirements for header files and pre-compiler commands, and the ability to use categories (the re-use mechanism) to include anything.\nIt is this latter ability that represents \"the whole idea\".  Unlike Objective-C's categories that allowed only new methods to be built onto existing classes, TOM allowed the addition of class and instance variables, new methods, even new superclasses.  This results in the redefinition of \"class\" as \"a class is defined by its main definition and any extensions\", these extensions have become a first-class citizen of the language (similarly to Ruby).\nThe book The Pragmatic Programmer lists TOM as an example for a new language to learn.Development of the TOM language has ceased."
},
{"id": 616, 
"name": "TRAC (programming language)",
"summary": "TRAC (for Text Reckoning And Compiling) Language is a programming language developed between 1959-1964 by Calvin Mooers and implemented on a PDP-10 in 1964 by L. Peter Deutsch. It was one of three \"first languages\" recommended by Ted Nelson in Computer Lib. TRAC T64 was used until at least 1984, when Mooers updated it to TRAC T84.TRAC is a purely text-based language—a kind of macro language.  Unlike traditional ad hoc macro languages of the time, such as those found in assemblers, TRAC is well planned, consistent, and in many senses complete. It has explicit input and output operators, unlike the typical implicit I/O at the outermost macro level, which makes it simultaneously simpler and more versatile than older macro languages.\nIt also differs from traditional macro languages in that TRAC numbers are strings of digits, with integer arithmetic (without specific limits on maximum values) being provided through built-in (\"primitive\") functions.  Arguably, one aspect of its completeness is that the concept of error is limited to events like lack of file space and requesting expansion of a string longer than the interpreter's working storage; what would in many languages be described as illegal operations are dealt with in TRAC by defining a result (often a null string) for every possible combination of a function's argument strings.\nTRAC is a text-processing language,\nalso called a string processing language.The emphasis on strings as strings is so strong that TRAC provides mechanisms for handling the language's own syntactic characters either in their syntactic roles or like any other character, and self-modifying code has more the feel of a natural consequence of typical TRAC programming techniques than of being a special feature.\nTRAC is, like APL or LISP, an expression oriented language (in contrast to more typical procedure-oriented languages), but unlike APL, it completely lacks operators.  In most respects, it is a case of pure functional programming.\nTRAC is homoiconic.TRAC has in common with LISP a syntax that generally involves the presence of many levels of nested parentheses.\nMooers trademarked the name TRAC in an effort to maintain his control over the definition of the language, an unusual and pioneering action at the time.  At one point, he brought an intellectual property infringement suit against DEC, alleging that a contract to deliver a mini-computer with a TRAC interpreter violated his rights.  \"The first issue of Dr. Dobb's Journal, one of the early publications in the personal computer field, has a vitriolic editorial against Mooers and his rapacity in trying to charge people for his computing language.\" However, the trademark (#72301892) expired in 1992. The name has since been used several times for unrelated information technology projects, including a current open source project management system called Trac.\nThere have been various languages inspired by TRAC.  To avoid any trouble with Mooers, they renamed primitives and/or used different metacharacters.  In SAM76's case, primitives were added, according to Claude Kagan, \"because TRAC is baby talk\".  In MINT's case, primitives were added to give access to a sophisticated text editor machinery.\n\none perceived shortcoming of TRAC was lack of full extensibility: some TRAC primitive functions are sensitive to the distinction between a null (zero-character) argument and a nonexistent (non-delimited) one, but beyond its last non-null argument, a user-defined function cannot make the distinction.  SAM76 was a TRAC-like language which eliminated that limitation.\nRuss Nelson implemented an emacs extension language named MINT (MINT Is Not TRAC).  This language is used by the FreeDOS editor FreeMACS.TRAC was used by FTP Software in its PC/TCP product as the modem dialler scripting language.\nTRAC was also used as a front end on Digital Productions Cray renderer for films, including The Last Starfighter."
},
{"id": 617, 
"name": "TTCN",
"summary": "TTCN is a programming language used for testing of communication protocols and web services. A TTCN test suite consists of many test cases written in the TTCN programming language.\nUntil version 2 the language was written in tables and called Tree and Tabular Combined Notation. Reading and editing this language required special TTCN editors. Beginning with version 3 TTCN was renamed to Testing and Test Control Notation. It is now closer to current programming languages and can be edited with traditional editors. TTCN-3 is more flexible than TTCN-2 in that it can be used for protocol testing as well as testing traditional software. \nAll versions of TTCN need dedicated compilers or interpreters for execution.\nTTCN is widely used, for example; ETSI, ITU for the testing of telecommunication protocols. Conformance test cases of  ETSI standards like ISDN, DECT, GSM, EDGE, 3G, DSRC have also been written in TTCN. Recently it has also been used for testing various protocol standards e.g. Bluetooth, IP. \nExecution of those test cases against products (e.g. phones, mobile phones, service enablers or network elements) is used to verify that the protocol implementation in those products meet the requirements defined by telecommunication standards.\nTTCN is often combined with ASN.1."
},
{"id": 618, 
"name": "TTM (programming language)",
"summary": "TTM is a string oriented, general purpose macro processing programming language developed in 1968 by Steven Caine and E. Kent Gordon at the California Institute of Technology."
},
{"id": 619, 
"name": "TUTOR (programming language)",
"summary": "TUTOR (also known as PLATO Author Language) is a programming language developed for use on the PLATO system at the University of Illinois at Urbana-Champaign around 1965.  TUTOR was initially designed by Paul Tenczar for use in computer assisted instruction (CAI) and computer managed instruction (CMI) (in computer programs called \"lessons\") and has many features for that purpose.  For example, TUTOR has powerful answer-parsing and answer-judging commands, graphics, and features to simplify handling student records and statistics by instructors.  TUTOR's flexibility, in combination with PLATO's computational power (running on what was considered a supercomputer in 1972), also made it suitable for the creation of many non-educational lessons—that is, games—including flight simulators, war games, dungeon style multiplayer role-playing games, card games, word games, and medical lesson games such as Bugs and Drugs (BND)."
},
{"id": 620, 
"name": "TXL (programming language)",
"summary": "TXL is a special-purpose programming language originally designed by Charles Halpern-Hamu and James Cordy at the University of Toronto in 1985.  The acronym \"TXL\" originally stood for \"Turing eXtender Language\" after the language's original purpose, the specification and rapid prototyping of variants and extensions of the Turing programming language, but no longer has any meaningful interpretation.\nModern TXL is specifically designed for creating, manipulating and rapidly prototyping language-based descriptions, tools and applications using source transformation.   It is a hybrid functional / rule-based language using first order functional programming at the higher level and term rewriting at the lower level.  The formal semantics and implementation of TXL are based on formal term rewriting, but the term structures are largely hidden from the user due to the example-like style of pattern specification.\nEach TXL program has two components: a description of the source structures to be transformed, specified as a (possibly ambiguous) context-free grammar using an extended Backus–Naur Form; and a set of tree transformation rules, specified using pattern / replacement pairs combined using first order functional programming.  TXL is designed to allow explicit programmer control over the interpretation, application, order and backtracking of both parsing and rewriting rules, allowing for expression of a wide range of grammar-based techniques such as agile parsing.\nThe first component parses the input expression into a tree using pattern-matching. The second component uses Term-rewriting in a manner similar to Yacc to produce the transformed output.\nTXL is most commonly used in software analysis and reengineering tasks such as design recovery, and in rapid prototyping of new programming languages and dialects."
},
{"id": 621, 
"name": "Tcl",
"summary": "Tcl (pronounced \"tickle\" or tee cee ell ) is a high-level, general-purpose, interpreted, dynamic programming language. It was designed with the goal of being very simple but powerful. Tcl casts everything into the mold of a command, even programming constructs like variable assignment and procedure definition. Tcl supports multiple programming paradigms, including object-oriented, imperative and functional programming or procedural styles.\nIt is commonly used embedded into C applications, for rapid prototyping, scripted applications, GUIs, and testing. Tcl interpreters are available for many operating systems, allowing Tcl code to run on a wide variety of systems. Because Tcl is a very compact language, it is used on embedded systems platforms, both in its full form and in several other small-footprint versions.The popular combination of Tcl with the Tk extension is referred to as Tcl/Tk, and enables building a graphical user interface (GUI) natively in Tcl. Tcl/Tk is included in the standard Python installation in the form of Tkinter."
},
{"id": 622, 
"name": "TeX",
"summary": "TeX (, see below), stylized within the system as TeX, is a typesetting system (or a \"formatting system\") which was designed and mostly written by Donald Knuth and released in 1978. TeX is a popular means of typesetting complex mathematical formulae; it has been noted as one of the most sophisticated digital typographical systems.TeX is popular in academia, especially in mathematics, computer science, economics, engineering, linguistics, physics, statistics, and quantitative psychology. It has largely displaced Unix troff, the other favored formatting system, in many Unix installations which use both for different purposes. It is also used for many other typesetting tasks, especially in the form of LaTeX, ConTeXt, and other macro packages.\nTeX was designed with two main goals in mind: to allow anybody to produce high-quality books with minimal effort, and to provide a system that would give exactly the same results on all computers, at any point in time (together with the Metafont language for font description and the Computer Modern family of typefaces). TeX is free software, which made it accessible to a wide range of users."
},
{"id": 623, 
"name": "Tea (programming language)",
"summary": "Tea is a high-level scripting language for the Java environment. It combines features of Scheme, Tcl, and Java."
},
{"id": 624, 
"name": "TempleOS",
"summary": "TempleOS (formerly J Operating System, SparrowOS and LoseThos) is a biblical-themed lightweight operating system designed to be the Third Temple prophesied in the Bible. It was created by American programmer Terry A. Davis, who developed it alone over the course of a decade after a series of episodes that he later described as a revelation from God.\nThe system was characterized as a modern x86-64 Commodore 64, using an interface similar to a mixture of DOS and Turbo C. Davis proclaimed that the system's features, such as its 640x480 resolution, 16-color display and single audio voice, were explicitly instructed to him by God. It was programmed with an original variation of C (named HolyC) in place of BASIC, and included an original flight simulator, compiler and kernel.\nTempleOS was released in 2013 and last updated in 2017. It was received with largely favorable reviews in tech communities and Davis amassed a small online following. He died on August 11, 2018."
},
{"id": 625, 
"name": "Tensilica Instruction Extension",
"summary": "Tensilica Instruction Extension refers to the proprietary language that is used to customize Tensilica's Xtensa processor core architecture.\nBy using TIE, the user can customize the Xtensa architecture by adding custom instructions and register files, instantiating TIE Ports and Queues for multiprocessor communication, and adding pre-configured extensions (such as Tensilica's DSP).  Software applications can greatly benefit from properly targeted user-defined instructions, while TIE ports and TIE queues facilitate multiprocessor communication by adding separate input and output interfaces to the processor core.  Using the TIE language and Xtensa Xplorer toolkit, the generation and verification of the instructions used to extend the processor ISA are automated. Such automation helps to reduce the hardware verification time that typically consumes a large percentage of the project duration of a typical hardware developed for the same functionality."
},
{"id": 626, 
"name": "Text Editor and Corrector",
"summary": "TECO (Tee'koh / ), Text Editor & Corrector is both a character-oriented text editor and a programming language, that was developed in 1962 for use on Digital Equipment Corporation computers, and has since become available on PCs and Unix. Dan Murphy developed TECO while a student at the Massachusetts Institute of Technology (MIT).According to Murphy, the initial acronym was \"Tape Editor and Corrector\" because \"punched paper tape was the only medium for the storage of program source on our PDP-1. There was no hard disk, floppy disk, magnetic tape (magtape), or network.\" By the time TECO was made available for general use, the name had become \"Text Editor and Corrector,\" since even the PDP-1 version\nby then supported other media. It was subsequently modified by many other people and is a direct ancestor of Emacs, which was originally implemented in TECO macros."
},
{"id": 627, 
"name": "Text Executive Programming Language",
"summary": "In 1979, Honeywell Information Systems announced a new programming language for their time-sharing service named TEX, an acronym for the Text Executive text processing system. TEX was a first generation scripting language, developed around the time of AWK and used by Honeywell initially as an in-house system test automation tool.\nTEX extended the Honeywell Time-Sharing service (TSS) line editor with programmable capabilities which allowed the user greater latitude in developing ease-of-use editing extensions as well as write scripts to automate many other time-sharing tasks formerly done by more complex TSS FORTRAN programs."
},
{"id": 628, 
"name": "Text Processing Utility",
"summary": "DEC Text Processing Utility (or DECTPU) was a language developed by Digital Equipment Corporation (DEC) for developing text editors. \nIn 1986, DEC developed a new version of EDT written in TPU, \nhaving released EVE, also a TPU-based editor, by mid-1985.TPU is distributed with OpenVMS. It is designed to be used on a terminal or console, so that it is not necessary to have DECwindows installed to use it.\nAmong other things the Language-Sensitive Editor and EVE (Extensible Versatile Editor) are implemented using DECTPU."
},
{"id": 629, 
"name": "Timeline of programming languages",
"summary": "This is a record of historically important programming languages, by decade."
},
{"id": 630, 
"name": "Toi (programming language)",
"summary": "Toi is an imperative, type-sensitive language that provides the basic functionality of a programming language. The language was designed and developed from the ground-up by Paul Longtine. Written in C, Toi was created with the intent to be an educational experience and serves as a learning tool (or toy, hence the name) for those looking to familiarize themselves with the inner-workings of a programming language."
},
{"id": 631, 
"name": "Tom (pattern matching language)",
"summary": "In computer science, pattern matching is the act of checking a given sequence of tokens for the presence of the constituents of some pattern. In contrast to pattern recognition, the match usually has to be exact: \"either it will or will not be a  match.\"  The patterns generally have the form of either sequences or tree structures. Uses of pattern matching include outputting the locations (if any) of a pattern within a token sequence, to output some component of the matched pattern, and to substitute the matching pattern with some other token sequence (i.e., search and replace).\nSequence patterns (e.g., a text string) are often described using regular expressions and matched using techniques such as backtracking.\nTree patterns are used in some programming languages as a general tool to process data based on its structure, e.g., C#, Rust, Swift, Haskell, ML, Scala and the symbolic mathematics language Mathematica have special syntax for expressing tree patterns and a language construct for conditional execution and value retrieval based on it. For simplicity and efficiency reasons, these tree patterns lack some features that are available in regular expressions.Often it is possible to give alternative patterns that are tried one by one, which yields a powerful conditional programming construct.  Pattern matching sometimes includes support for guards.Parsing algorithms often rely on pattern matching to transform strings into syntax trees."
},
{"id": 632, 
"name": "Transact-SQL",
"summary": "Transact-SQL (T-SQL) is Microsoft's and Sybase's proprietary extension to the SQL (Structured Query Language) used to interact with relational databases. T-SQL expands on the SQL standard to include procedural programming, local variables, various support functions for string processing, date processing, mathematics, etc. and changes to the DELETE and UPDATE statements.\nTransact-SQL is central to using Microsoft SQL Server. All applications that communicate with an instance of SQL Server do so by sending Transact-SQL statements to the server, regardless of the user interface of the application.\nStored procedures in SQL Server are executable server-side routines. The advantage of stored procedures is the ability to pass parameters."
},
{"id": 633, 
"name": "Transaction Application Language",
"summary": "Transaction Application Language or TAL (originally \"Tandem Application Language\") is a block-structured, procedural language optimized for use on Tandem hardware. TAL resembles a cross between C and Pascal. It was the original system programming language for the Tandem CISC machines, which had no assembler.\nThe design concept of TAL, an evolution of Hewlett Packard's SPL, was intimately associated and optimized with a microprogrammed CISC instruction set. Each TAL statement could easily compile into a sequence of instructions that manipulated data on a transient floating register stack. The register stack itself floated at the crest of the program's memory allocation and call stack.\nThe language itself has the appearance of ALGOL or Pascal, with BEGIN and END statements. However, its semantics are far more like C. It does not permit indefinite levels of procedure nesting, it does not pass complex structured arguments by value, and it does not strictly type most variable references. Programming techniques are much like C using pointers to structures, occasional overlays, deliberate string handling and casts when appropriate.\nAvailable datatypes include 8 bit, 16 bit, 32 bit and (introduced later) 64 bit integers. Microcode level support was available for null terminated character strings. However, this is not commonly used.\nOriginally the Tandem NonStop operating system was written in TAL. Recently much of it has been rewritten in C and TAL has been deprecated for new development.\nIn the migration from CISC to RISC TAL was updated/replaced with pTAL - compilers allowed TAL to be accelerated/re-compiled into Native RISC Applications.\nIn the current migration from RISC to Intel Itanium 2 TAL and pTAL has been replaced with epTAL, again - compilers allow TAL and pTAL code to be accelerated/re-compiled into native Itanium Applications. \nThis article is based on material taken from  the Free On-line Dictionary of Computing  prior to 1 November 2008 and incorporated under the \"relicensing\" terms of the GFDL, version 1.3 or later."
},
{"id": 634, 
"name": "Transcript (programming language)",
"summary": "LiveCode (formerly Revolution and MetaCard) is a cross-platform rapid application development runtime environment inspired by HyperCard. It features the LiveCode Script (formerly MetaTalk) programming language which belongs to the family of xTalk scripting languages like HyperCard's HyperTalk.The environment was introduced in 2001.  The \"Revolution\" development system was based on the MetaCard engine technology which Runtime Revolution later acquired from MetaCard Corporation in 2003. The platform won the Macworld Annual Editor's Choice Award for \"Best Development Software\" in 2004.  \"Revolution\" was renamed \"LiveCode\" in the fall of 2010.  \"LiveCode\" is developed and sold by Runtime Revolution Ltd., based in Edinburgh, Scotland. In March, 2015, the company was renamed \"LiveCode Ltd.\", to unify the company name with the product. In April 2013 a free/open source version 'LiveCode Community Edition 6.0' was published after a successful crowdfunding campaign at Kickstarter. The code base was re-licensed and made available as free and open source software with a version in April 2013.\nLiveCode runs on iOS, Android, OS X, Windows 95 through Windows 10, Raspberry Pi and several variations of Unix, including Linux, Solaris, and BSD. It can be used for mobile, desktop and server/CGI applications. The iOS (iPhone and iPad) version was released in December 2010. The first version to deploy to the Web was released in 2009. It is the most widely used HyperCard/HyperTalk clone, and the only one that runs on all major operating systems.\nA developer release of v.8 was announced in New York on March 12, 2015. This major enhancement to the product includes a new, separate development language, known as \"LiveCode Builder\",  which is capable of creating new object classes called \"widgets\". In earlier versions, the set of object classes was fixed, and could be enhanced only via the use of ordinary procedural languages such as C. The new language, which runs in its own IDE, is a departure from the transitional x-talk paradigm in that it permits typing of variables. But the two environments are fully integrated, and apart from the ability to create new objects, development in LiveCode proceeds in the normal way, within the established IDE.\nA second crowdfunding campaign to Bring HTML5 to LiveCode reached funding goals of nearly $400,000 USD on July 31, 2014. LiveCode developer release 8.0 DP4 (August 31, 2015) was the first to include a standalone deployment option to HTML5."
},
{"id": 635, 
"name": "Turing (programming language)",
"summary": "Turing is a Pascal-like programming language developed in 1982 by Ric Holt and James Cordy, then of University of Toronto, in Toronto, Ontario, Canada. Turing is a descendant of Euclid, Pascal and SP/k that features a clean syntax and precise machine-independent semantics.\nTuring 4.1.0 is the latest stable version of Turing. Turing 4.1.1 and Turing 4.1.2 do not allow for stand alone .EXE files to be created and versions before Turing 4.1.0 have outdated syntax and outdated functions."
},
{"id": 636, 
"name": "Tynker",
"summary": "Tynker is an educational programming platform aimed at teaching children how to make games and programs.  Instead of typing the source code, you visually drag blocks of code and snap them together. The visual design and principles are based on the free Scratch, just like Hopscotch and Snap!. Tynker is based on HTML5 and JavaScript, and can be used in the browser without plugins, as well as on tablets and smartphones. Another difference is that Scratch is a free open source project, while Tynker is a commercial product, aimed at selling courses. Tynker offers self-paced online courses for children to learn coding at home, as well as an engaging programming curriculum for schools and camps. It makes it easier for kids to learn coding as it teaches kids coding through creating games like Minecraft, Hour of Code etc."
},
{"id": 637, 
"name": "TypeScript",
"summary": "TypeScript is an open-source programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript, and adds optional static typing to the language. \nTypeScript is designed for development of large applications and transcompiles to JavaScript. As TypeScript is a superset of JavaScript, existing JavaScript programs are also valid TypeScript programs. TypeScript may be used to develop JavaScript applications for both client-side and server-side (Node.js, Deno) execution.\nThere are multiple options available for transcompilation. Either the default TypeScript Checker can be used, or the Babel compiler can be invoked to convert TypeScript to JavaScript.\nTypeScript supports definition files that can contain type information of existing JavaScript libraries, much like C++ header files can describe the structure of existing object files. This enables other programs to use the values defined in the files as if they were statically typed TypeScript entities. There are third-party header files for popular libraries such as jQuery, MongoDB, and D3.js. TypeScript headers for the Node.js basic modules are also available, allowing development of Node.js programs within TypeScript.The TypeScript compiler is itself written in TypeScript and compiled to JavaScript. It is licensed under the Apache License 2.0.\nTypeScript is included as a first-class programming language in Microsoft Visual Studio 2013 Update 2 and later, beside C# and other Microsoft languages. An official extension allows Visual Studio 2012 to support TypeScript as well.Anders Hejlsberg, lead architect of C# and creator of Delphi and Turbo Pascal, has worked on the development of TypeScript."
},
{"id": 638, 
"name": "UCSD Pascal",
"summary": "UCSD Pascal is a Pascal programming language system that runs on the UCSD p-System, a portable, highly machine-independent operating system. UCSD Pascal was first released in 1977. It was developed at the University of California, San Diego (UCSD)."
},
{"id": 639, 
"name": "UNITY (programming language)",
"summary": "UNITY is a programming language constructed by K. Mani Chandy and Jayadev Misra for their book Parallel Program Design: A Foundation. It is a theoretical language which focuses on what, instead of where, when or how. The language contains no method of flow control, and program statements run in a nondeterministic way until statements cease to cause changes during execution. This allows for programs to run indefinitely, such as auto-pilot or power plant safety systems, as well as programs that would normally terminate (which here converge to a fixed point)."
},
{"id": 640, 
"name": "Ubercode",
"summary": "Ubercode is a high level programming language designed by Ubercode Software and released in 2005 for Microsoft Windows. Ubercode is influenced by Eiffel and BASIC. It is proprietary software and can be tried out for free for 30 days. Ubercode has the following design goals:\n\nCompilable language—compiled into Windows EXE files.\nAutomatic memory management—memory is allocated / freed automatically, and the language has no memory management primitives.\nPre and post conditions—these are run-time assertions which are attached to function declarations, as in Eiffel.\nHigh-level data types—resizable arrays, lists and tables may contain arbitrary components.\nIntegrated file handling—primitives for transparent handling of text, binary, CSV, XML and dBase files.\nEase of use—language structure is relatively simple, making the language accessible to beginners."
},
{"id": 641, 
"name": "Umple",
"summary": "Umple is a language for both object-oriented programming and modelling with class diagrams and state diagrams.\nThe name Umple is a portmanteau of \"UML\", \"ample\" and \"Simple\", indicating that it is designed to provide ample features to extend programming languages with UML capabilities."
},
{"id": 642, 
"name": "Unicon (programming language)",
"summary": "Unicon is a programming language designed by American computer scientist Clint Jeffery with collaborators including Shamim Mohamed, Jafar Al Gharaibeh, Robert Parlett and others. Unicon descended from Icon and a preprocessor for Icon called IDOL. Compared with Icon, Unicon offers better access to the operating system as well as support for object-oriented programming. Unicon began life as a merger of three popular Icon extensions: an OO preprocessor named Idol, a POSIX filesystem and networking interface, and an ODBC facility. The name is shorthand for \"Unified Extended Dialect of Icon.\""
},
{"id": 643, 
"name": "Uniface (programming language)",
"summary": "No summary available"
},
{"id": 644, 
"name": "Unix shell",
"summary": "A Unix shell is a command-line interpreter or shell that provides a command line user interface for Unix-like operating systems.  The shell is both an interactive command language and a scripting language, and is used by the operating system to control the execution of the system using shell scripts.Users typically interact with a Unix shell using a terminal emulator; however, direct operation via serial hardware connections or Secure Shell are common for server systems.  All Unix shells provide filename wildcarding, piping, here documents, command substitution, variables and control structures for condition-testing and iteration."
},
{"id": 645, 
"name": "UnrealScript",
"summary": "The Unreal Engine is a game engine developed by Epic Games, first showcased in the 1998 first-person shooter game Unreal. Although initially developed for first-person shooters, it has been successfully used in a variety of other genres, including platformers, fighting games, MMORPGs, and other RPGs. With its code written in C++, the Unreal Engine features a high degree of portability and is a tool used by many game developers today, with it being source-available. The most recent version is Unreal Engine 4, which was released in 2014."
},
{"id": 646, 
"name": "VHDL",
"summary": "VHDL (VHSIC-HDL) (Very High Speed Integrated Circuit Hardware Description Language) is a hardware description language used in electronic design automation to describe digital and mixed-signal systems such as field-programmable gate arrays and integrated circuits. VHDL can also be used as a general purpose parallel programming language."
},
{"id": 647, 
"name": "VSXu",
"summary": "VSXu (VSX Ultra) is an OpenGL-based (hardware-accelerated), modular programming environment with its main purpose to visualize music/audio data and create 3D effects in real-time. Available for Windows and GNU/Linux. It is currently released as free software under terms of the  GNU General Public License v3, with some parts of the source code being released under GNU Lesser General Public License  and maintained by Vovoid Media Technologies AB. VSXu is built on a modular plug-in-based architecture so anyone can extend it and or make visualization presets (\"visuals\" or \"states\")."
},
{"id": 648, 
"name": "Vala (programming language)",
"summary": "Vala is an object-oriented programming language with a self-hosting compiler that generates C code and uses the GObject system.\nVala is syntactically similar to C# and includes notable features such as anonymous functions, signals, properties, generics, assisted memory management, exception handling, type inference, and foreach statements. Its developers, Jürg Billeter and Raffaele Sandrini, wanted to bring these features to the plain C runtime with little overhead and no special runtime support by targeting the GObject object system. Rather than compiling directly to machine code or assembly language, it compiles to a lower-level intermediate language. It source-to-source compiles to C, which is then compiled with a C compiler for a given platform, such as GCC.For memory management, the GObject system provides reference counting. In C, a programmer must manually manage adding and removing references, but in Vala, managing such reference counts is automated if a programmer uses the language's built-in reference types rather than plain pointers.\nUsing functionality from native code libraries requires writing vapi files, defining the library interfacing. Writing these interface definitions is well-documented for C libraries, especially when based on GObject. However, C++ libraries are not supported. Vapi files are provided for a large portion of the GNOME platform, including GTK.\nVala was conceived by Jürg Billeter and was implemented by him and Raffaele Sandrini, finishing a self-hosting compiler in May 2006."
},
{"id": 649, 
"name": "Verilog",
"summary": "Verilog, standardized as IEEE 1364, is a hardware description language (HDL) used to model electronic systems. It is most commonly used in the design and verification of digital circuits at the register-transfer level of abstraction. It is also used in the verification of analog circuits and mixed-signal circuits, as well as in the design of genetic circuits. In 2009, the Verilog standard (IEEE 1364-2005) was merged into the SystemVerilog standard, creating IEEE Standard 1800-2009. Since then, Verilog is officially part of the SystemVerilog language. The current version is IEEE standard 1800-2017."
},
{"id": 650, 
"name": "Vim (text editor)",
"summary": "Vim (; a contraction of Vi IMproved) is a clone, with additions, of Bill Joy's vi text editor program for Unix. Vim's author, Bram Moolenaar, based it upon the source code for a port of the Stevie editor to the Amiga and released a version to the public in 1991. Vim is designed for use both from a command-line interface and as a standalone application in a graphical user interface. Vim is free and open-source software and is released under a license that includes some charityware clauses, encouraging users who enjoy the software to consider donating to children in Uganda. The license is compatible with the GNU General Public License through a special clause allowing distribution of modified copies \"under the GNU GPL version 2 or any later version\".Since its release for the Amiga, cross-platform development has made it available on many other systems. In 2006, it was voted the most popular editor amongst Linux Journal readers; in 2015 the Stack Overflow developer survey found it to be the third most popular text editor, and the fifth most popular development environment in 2019."
},
{"id": 651, 
"name": "Visual Basic",
"summary": "Visual Basic is a third-generation event-driven programming language from Microsoft for its Component Object Model (COM) programming model first released in 1991 and declared legacy during 2008. Microsoft intended Visual Basic to be relatively easy to learn and use. Visual Basic was derived from BASIC and enables the rapid application development (RAD) of graphical user interface (GUI) applications, access to databases using Data Access Objects, Remote Data Objects, or ActiveX Data Objects, and creation of ActiveX controls and objects.\nA programmer can create an application using the components provided by the Visual Basic program itself. Over time the community of programmers developed third-party components. Programs written in Visual Basic can also use the Windows API, which requires external function declarations.\nThe final release was version 6 in 1998 (now known simply as Visual Basic). On  April 8, 2008, Microsoft stopped supporting Visual Basic 6.0 IDE. The Microsoft Visual Basic team still maintains compatibility for Visual Basic 6.0 applications on Windows Vista, Windows Server 2008 including R2, Windows 7, Windows 8, Windows 8.1, Windows Server 2012, Windows 10, Windows Server 2016, and Windows Server 2019 through its \"It Just Works\" program. In 2014, some software developers still preferred Visual Basic 6.0 over its successor, Visual Basic .NET.  In 2014 some developers lobbied for a new version of the VB6 programming environment. In 2016, Visual Basic 6.0 won the technical impact award at The 19th Annual D.I.C.E. Awards. A dialect of Visual Basic, Visual Basic for Applications (VBA), is used as a macro or scripting language within several Microsoft applications, including Microsoft Office."
},
{"id": 652, 
"name": "Visual Basic .NET",
"summary": "Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework. Microsoft launched VB.NET in 2002 as the successor to its original Visual Basic language. Although the \".NET\" portion of the name was dropped in 2005, this article uses \"Visual Basic [.NET]\" to refer to all Visual Basic languages released since 2002, in order to distinguish between them and the classic Visual Basic. Along with Visual C#, it is one of the two main languages targeting the .NET framework.\nMicrosoft's integrated development environment (IDE) for developing in Visual Basic .NET language is Visual Studio. Most Visual Studio editions are commercial; the only exceptions are Visual Studio Express and Visual Studio Community, which are freeware. In addition, the .NET Framework SDK includes a freeware command-line compiler called vbc.exe. Mono also includes a command-line VB.NET compiler."
},
{"id": 653, 
"name": "Visual DataFlex",
"summary": "DataFlex (formerly known as Visual DataFlex) is a visual tool for developing Windows, web and mobile software applications on one framework-based platform."
},
{"id": 654, 
"name": "Visual DialogScript",
"summary": "Visual DialogScript (VDS) is an interpreted programming language for Microsoft Windows. It can be used to create small, fast programs. VDS has a large number of dialog and graphical elements available to create professional looking programs. VDS programs have access to the Windows API; therefore, it is possible to write applications that can perform the same advanced tasks as other programming languages such as Visual Basic, C++, or Delphi."
},
{"id": 655, 
"name": "Visual Fortran",
"summary": "Fortran (; formerly FORTRAN, derived from Formula Translation) is a general-purpose, compiled  imperative programming language that is especially suited to numeric computation and scientific computing.\nOriginally developed by IBM in the 1950s for scientific and engineering applications, FORTRAN came to dominate this area of programming early on and has been in continuous use for over six decades in computationally intensive areas such as numerical weather prediction, finite element analysis, computational fluid dynamics, computational physics, crystallography and computational chemistry. It is a popular language for high-performance computing and is used for programs that benchmark and rank the world's fastest supercomputers.Fortran encompasses a lineage of versions, each of which evolved to add extensions to the language while usually retaining compatibility with prior versions.  Successive versions have added support for structured programming\nand processing of character-based data (FORTRAN 77), array programming, modular programming and generic programming (Fortran 90), high performance Fortran (Fortran 95), object-oriented programming (Fortran 2003), concurrent programming (Fortran 2008), and native parallel computing capabilities (Coarray Fortran 2008/2018).\nFortran's design was the basis for many other programming languages. Among the better known is BASIC, which is based on FORTRAN II with a number of syntax cleanups, notably better logical structures, and other changes to work more easily in an interactive environment."
},
{"id": 656, 
"name": "Visual FoxPro",
"summary": "Visual FoxPro is a discontinued Microsoft data-centric procedural programming language that subsequently became object-oriented.\nIt was derived from FoxPro (originally known as FoxBASE) which was developed by Fox Software beginning in 1984. Fox Technologies merged with Microsoft in 1992, after which the software acquired further features and the prefix \"Visual\". FoxPro 2.6 worked on Mac OS, DOS, Windows, and Unix.\nVisual FoxPro 3.0, the first \"Visual\" version, reduced platform support to only Mac and Windows, and later versions 5, 6, 7, 8 and 9 were Windows-only. The current version of Visual FoxPro is COM-based and Microsoft has stated that they do not intend to create a Microsoft .NET version.\nVersion 9.0, released in December 2004 and updated in October 2007 with the SP2 patch, was the final version of the product."
},
{"id": 657, 
"name": "Visual J++",
"summary": "Visual J++ (pronounced \"Jay Plus Plus\") is Microsoft's discontinued implementation of Java. Syntax, keywords, and grammatical conventions were the same as Java's. Microsoft discontinued support of J++ in January 2004, replacing it to a certain extent with J# and C#."
},
{"id": 658, 
"name": "Visual Objects",
"summary": "Visual Objects is an object-oriented computer programming language that is used to create computer programs that operate primarily under Windows. Although it can be used as a general-purpose programming tool, it is almost exclusively used to create database programs.\nThe original Visual Objects project (code-named Aspen) was started as part of Nantucket's attempts to bring the Clipper language to Windows, and move from the procedural to the object-oriented style. It also converted Clipper from a p-code system to being a true native compiler and introduced more elements of the C language (such as typed variables), while including Windows extensions (such as COM, ODBC, and later ADO). With its symbol datatype, it offers the ability to form name-based linkages, which may be used to connect menu events to object methods or form direct linkages between server columns and controls.\nThe Windows version was finally brought to market by Computer Associates.  Unfortunately it was released before it was market-ready and in almost head-to-head competition with the first release of Borland's Delphi product. The language is still in use however the last release by GrafX Software was in 2012 of version 2.8 sp4 (version number 2838). GrafX announced that after this no new versions would be released. The next incarnation of the Visual Objects language is Vulcan.NET, written by GrafX from scratch to be both Visual Objects compatible and be a true CLS compliant .NET language, taking full advantage of the .NET framework."
},
{"id": 659, 
"name": "Visual Prolog",
"summary": "Visual Prolog, formerly known as PDC Prolog and Turbo Prolog, is a strongly typed object-oriented extension of Prolog.  As Turbo Prolog, it was marketed by Borland but it is now developed and marketed by the Danish firm Prolog Development Center (PDC) that originally developed it. Visual Prolog can build Microsoft Windows GUI-applications, console applications, DLLs (dynamic link libraries), and CGI-programs. It can also link to COM components and to databases by means of ODBC.\nLogic languages are traditionally interpreted, but Visual Prolog is compiled. This provides the important improvement of converting traditional Prolog-typical run-time errors to compiler warnings, which ensures a better robustness of the finished applications.\nThe core of Visual Prolog are Horn clauses, algebraic datatypes, pattern matching and controlled non-determinism like in traditional Prolog, but unlike traditional Prolog, Visual Prolog has always been strongly and statically typed."
},
{"id": 660, 
"name": "WATFIV (programming language)",
"summary": "WATFIV, or WATerloo FORTRAN IV,  developed at the University of Waterloo, Canada is an implementation of the Fortran computer programming language. It is the successor of WATFOR.\nWATFIV was used from the late 1960s into the mid-1980s. WATFIV was in turn succeeded by later versions of WATFOR.\nBecause it could complete the three usual steps (\"compile-link-go\") in just one pass, the system became popular for teaching students computer programming."
},
{"id": 661, 
"name": "WebAssembly",
"summary": "WebAssembly (often shortened to Wasm) is an open standard that defines a portable binary code format for executable programs, and a corresponding textual assembly language, as well as interfaces for facilitating interactions between such programs and their host environment. The main goal of WebAssembly is to enable high performance applications on web pages, but the format is designed to be executed and integrated in other environments as well.WebAssembly became a World Wide Web Consortium recommendation on December 05, 2019 and, alongside HTML, CSS, and JavaScript, it is the fourth language to run natively in browsers. In order to use Wasm in browsers, users may use Emscripten SDK to compile C++ (or any other LLVM-supported language such as D or Rust) source code into a binary file which runs in the same sandbox as regular JavaScript code; Emscripten provides bindings for several commonly used environment interfaces like WebGL; it has access only to an expandable memory and a small number of scalar values. There is no direct Document Object Model (DOM) access; however, it is possible to create proxy functions for this, for example through stdweb, web_sys, and js_sys when using Rust language.\nThe World Wide Web Consortium (W3C) maintains the standard with contributions from Mozilla, Microsoft, Google, and Apple.A June 2019 study from the Technische Universität Braunschweig, analyzed the usage of WebAssembly in the Alexa top 1 million websites and found the most prevalent use was for malicious crypto mining."
},
{"id": 662, 
"name": "WebDNA",
"summary": "WebDNA is a server-side scripting, interpreted language with an embedded database system, specifically designed for the World Wide Web.  Its primary use is in creating database-driven dynamic web page applications. Released in 1995, the name was registered as a trademark in 1998. WebDNA is currently maintained by WebDNA Software Corporation."
},
{"id": 663, 
"name": "Whiley (programming language)",
"summary": "No summary available"
},
{"id": 664, 
"name": "Winbatch",
"summary": "Winbatch is a Microsoft Windows scripting language originally developed by Wilson WindowWare and currently supported, maintained and enhanced by Island Lake Consulting LLC. Its environment includes an interpreter and a code editor along with a dialog designer and optional compiler to create self-contained executables.\nIts language structure and syntax is a cross between DOS batch command, Basic, Fortran, and C.   It has been developed over the years with functions added and support for things like .Net, ActiveX controls, COM (OLE), Unicode, UAC and code signing."
},
{"id": 665, 
"name": "Wolfram Language",
"summary": "The Wolfram Language is a general multi-paradigm computational language developed by Wolfram Research. It emphasizes symbolic computation, functional programming, and rule-based programming and can employ arbitrary structures and data."
},
{"id": 666, 
"name": "Wyvern (programming language)",
"summary": "Wyvern is a computer programming language created by Jonathan Aldrich and Alex Potanin for the development of web and mobile applications with security and assurance being number one priority. Wyvern supports object capabilities, it is structurally typed, and aims to make secure way of programming easier than insecure - as described in the Wyvern Manifesto. One of the early available features that make Wyvern special is a way to safely use multiple programming languages within the same program so programmers can use the language most appropriate for each function while at the same time increasing the program's security.\nIt is currently in a prototype stage and distributed under a GPLv2 license."
},
{"id": 667, 
"name": "X++",
"summary": "X or x is the 24th and 2nd from last letter in the modern English alphabet and the ISO basic Latin alphabet. Its name in English is ex (pronounced ), plural exes."
},
{"id": 668, 
"name": "X10 (programming language)",
"summary": "X10 is a programming language being developed by IBM at the Thomas J. Watson Research Center as part of the Productive, Easy-to-use, Reliable Computing System (PERCS) project funded by DARPA's High Productivity Computing Systems (HPCS) program. Its primary authors are Kemal Ebcioğlu, Vijay Saraswat, and Vivek Sarkar.X10 is designed specifically for parallel computing using the partitioned global address space (PGAS) model.\nA computation is divided among a set of places, each of which holds some data and hosts one or more activities that operate on those data.  It has a constrained type system for object-oriented programming, a form of dependent types. Other features include user-defined primitive struct types; globally distributed arrays, and structured and unstructured parallelism.X10 uses the concept of parent and child relationships for activities to prevent the lock stalemate that can occur when two or more processes wait for each other to finish before they can complete.  An activity may spawn one or more child activities, which may themselves have children.  Children cannot wait for a parent to finish, but a parent can wait for a child using the finish command."
},
{"id": 669, 
"name": "XBL",
"summary": "XBL (XML Binding Language) is an XML-based markup language for altering the behavior of XUL widgets. It has only ever been implemented in the Mozilla codebase.\nMozilla deprecated XBL in 2017 and completed the process of removing it from the Firefox web browser codebase in 2019. However, the UXP fork of the codebase intends to continue supporting XBL indefinitely."
},
{"id": 670, 
"name": "XBase",
"summary": "xBase is the generic term for all programming languages that derive from the original dBASE (Ashton-Tate) programming language and database formats. These are sometimes informally known as dBASE \"clones\". While there was a non-commercial predecessor to the Ashton-Tate product (Vulcan written by Wayne Ratliff), most clones are based on Ashton-Tate's 1986 dBASE III+ release — scripts written in the dBASE III+ dialect are most likely to run on all the clones."
},
{"id": 671, 
"name": "XBase++",
"summary": "xBase is the generic term for all programming languages that derive from the original dBASE (Ashton-Tate) programming language and database formats. These are sometimes informally known as dBASE \"clones\". While there was a non-commercial predecessor to the Ashton-Tate product (Vulcan written by Wayne Ratliff), most clones are based on Ashton-Tate's 1986 dBASE III+ release — scripts written in the dBASE III+ dialect are most likely to run on all the clones."
},
{"id": 672, 
"name": "XC Programming Language",
"summary": "In computers, XC is a programming language for real-time embedded parallel processors, targeted at the XMOS XCore processor architecture.XC is an imperative language, based on the features for parallelism and communication in occam, and the syntax and sequential features of C. It provides primitive features that correspond to the various architectural resources provided, namely: channel ends, locks, ports and timers.\nIn combination with XCore processors, XC is used to build embedded systems with levels of I/O, real-time performance and computational ability usually attributed to field-programmable gate arrays (FPGAs) or application-specific integrated circuit (ASIC) devices."
},
{"id": 673, 
"name": "XCore XS1",
"summary": "The XCore Architecture is a 32-bit RISC microprocessor architecture designed by XMOS. The architecture is designed to be used in multi-core processors for embedded systems. Each XCore executes up to eight concurrent threads, each thread having its own register set, and the architecture directly supports inter-thread and inter-core communication and various forms of thread scheduling.\nTwo versions of the XCore architecture exist: the XS1 architecture  and the XS2 architecture.\nProcessors with the XS1 architecture include the XCore XS1-G4 and XCore XS1-L1. Processors with the XS2 architecture include xCORE-200.\nThe architecture encodes instructions compactly, using 16 bits for frequently used instructions (with up to three operands) and 32 bits for less frequently used instructions (with up to 6 operands). Almost all instructions execute in a single cycle, and the architecture is event-driven in order to decouple the timings that a program needs to make from the execution speed of the program. A program will normally perform its computations and then wait for an event (e.g. a message, time, or external I/O event) before continuing."
},
{"id": 674, 
"name": "XHarbour",
"summary": "xHarbour is a free multi-platform extended Clipper compiler, offering multiple graphic terminals (GTs), including console drivers, GUIs, and hybrid console/GUIs. xHarbour is backward-compatible with Clipper and supports many language syntax extensions, greatly extended run-time libraries, and extensive third party support.\nLike most dynamic languages, xHarbour is also available as a scripting language (standalone application, linkable library, MS ActiveScript engine [Windows Script Host, HTML, ASP]) utilizing an interpreter written in the xHarbour language.\nThe xHarbour Usenet newsgroup comp.lang.xharbour  is an active community for discussing xHarbour related questions."
},
{"id": 675, 
"name": "XL (programming language)",
"summary": "XL (\"eXtensible Language\") is the first and so far the only computer programming language designed to support concept programming.XL features programmer-reconfigurable syntax and semantics. Compiler plug-ins can be used to add new features to the language. A base set of plug-ins implements a relatively standard imperative language. Programmers can write their own plug-ins to implement application-specific notations, such as symbolic differentiation, which can then be used as readily as built-in language features."
},
{"id": 676, 
"name": "XOD (programming language)",
"summary": "XOD – is an open-source visual programming language for microcontrollers started in 2016. As a supported platform XOD started with Arduino boards compatibility and Raspberry PI."
},
{"id": 677, 
"name": "XOTcl",
"summary": "XOTcl is an object-oriented extension for the Tool Command Language created by Gustaf Neumann and Uwe Zdun. It is a derivative of MIT OTcl. XOTcl is based on a dynamic object system with metaclasses which as influenced by CLOS. Class and method definitions are completely dynamic. XOTcl provides language support for design patterns via filters and decorator mixins."
},
{"id": 678, 
"name": "XPL",
"summary": "XPL is a programming language based on PL/I, a portable one-pass compiler written in its own language, and a parser generator tool for easily implementing similar compilers for other languages.  XPL was designed in 1967 as a way to teach compiler design principles and as starting point for students to build compilers for their own languages.\nXPL was designed and implemented by William M. McKeeman and David B. Wortman at University of California, Santa Cruz and James J. Horning and others at Stanford University. XPL was first announced at the 1968 Fall Joint Computer Conference.  The methods and compiler are described in detail in the 1971 textbook A Compiler Generator.\nThey called the combined work a 'compiler generator'.  But that implies little or no language- or target-specific programming is required to build a compiler for a new language or new target.  A better label for XPL is a translator writing system.  It helps to write a compiler with less new or changed programming code."
},
{"id": 679, 
"name": "XPL0",
"summary": "XPL0 is a computer programming language that is essentially a cross\nbetween Pascal and C. It was created in 1976 by Peter J. R. Boyle who wanted a high-level language for his microcomputer and wanted something more sophisticated than BASIC, which was the dominant language for personal computers at the time.\nXPL0 is based on PL/0, an example compiler in the book Algorithms + Data Structures = Programs by Niklaus Wirth. The first XPL0 compiler was written in ALGOL. It generated instructions for a pseudo-machine that was implemented as an interpreter on a Digital Group computer based on the 6502 microprocessor. The compiler was converted from ALGOL to XPL0 and was then able to compile itself and run on a microcomputer.\nXPL0 soon proved its worth in a variety of products based on the 6502. These embedded systems would otherwise have had their code written in assembly language, which is much more tedious to do.\nBoyle used XPL0 to write a disk operating system called Apex. Beginning in 1980 this was sold, along with XPL0, as an alternative to Apple DOS for the Apple II computer, which was based on the 6502.\nSince those early years XPL0 has migrated to other processors and many features have been added. Open source versions of the compilers for IBM-style PCs are available from the link below."
},
{"id": 680, 
"name": "XPath",
"summary": "XPath (XML Path Language) is a query language for selecting nodes from an XML document. In addition, XPath may be used to compute values (e.g., strings, numbers, or Boolean values) from the content of an XML document. XPath was defined by the World Wide Web Consortium (W3C)."
},
{"id": 681, 
"name": "XQuery",
"summary": "XQuery (XML Query) is a query and functional programming language that queries and transforms collections of structured and unstructured data, usually in the form of XML, text and with vendor-specific extensions for other data formats (JSON, binary, etc.). The language is developed by the XML Query working group of the W3C. The work is closely coordinated with the development of XSLT  by the XSL Working Group; the two groups share responsibility for XPath, which is a subset of XQuery.\nXQuery 1.0 became a W3C Recommendation on January 23, 2007.XQuery 3.0 became a W3C Recommendation on April 8, 2014.XQuery 3.1 became a W3C Recommendation on March 21, 2017.\n\"The mission of the XML Query project is to provide flexible query facilities to extract data from real and virtual documents on the World Wide Web, therefore finally providing the needed interaction between the Web world and the database world. Ultimately, collections of XML files will be accessed like databases\"."
},
{"id": 682, 
"name": "XSB",
"summary": "XSB is the name of a dialect of the Prolog programming language and its implementation developed at Stony Brook University in collaboration with the Katholieke Universiteit Leuven, the New University of Lisbon, Uppsala University and software vendor XSB, Inc.\nXSB extends Prolog with tabled resolution and HiLog (a standard extension of Prolog permitting limited higher-order logic programming).\nThe open source XSB implementation includes an interface to the Java programming language."
},
{"id": 683, 
"name": "XSL Transformations",
"summary": "XSLT (eXtensible Stylesheet Language Transformations) is a language for transforming XML documents into other XML documents, or other formats such as HTML for web pages, plain text or XSL Formatting Objects, which may subsequently be converted to other formats, such as PDF, PostScript and PNG. XSLT 1.0 is widely supported in modern web browsers.The original document is not changed; rather, a new document is created based on the content of an existing one. Typically, input documents are XML files, but anything from which the processor can build an XQuery and XPath Data Model can be used, such as relational database tables or geographical information systems.Although XSLT is designed as a special-purpose language for XML transformation, the language is Turing-complete, making it theoretically capable of arbitrary computations."
},
{"id": 684, 
"name": "XSharp",
"summary": "X#, pronounced X sharp and often written XSharp, is an xBase-compatible programming language for the Microsoft .NET platform. X# has been built on top of Roslyn, the open source architecture behind the current Microsoft C# and Microsoft Visual Basic compilers.\nThe X# compiler is intended to support multiple dialects in the xBase programming language family. It supports Core, Visual Objects, Vulcan.NET, xBase++, Harbour, Foxpro and more. The project is intended as an opensource community effort, but is at the moment still partly closed source."
},
{"id": 685, 
"name": "Xojo",
"summary": "The Xojo programming environment and programming language is developed and commercially marketed by Xojo, Inc. of Austin, Texas for software development targeting macOS, Microsoft Windows, Linux, iOS, the Web and Raspberry Pi. Xojo uses a proprietary object-oriented language."
},
{"id": 686, 
"name": "Xtend",
"summary": "Xtend is a general-purpose high-level programming language for the Java Virtual Machine. Syntactically and semantically Xtend has its roots in the Java programming language but focuses on a more concise syntax and some additional functionality such as type inference, extension methods, and operator overloading. Being primarily an object-oriented language, it also integrates features known from functional programming, e.g. lambda expressions. Xtend is statically typed and uses Java's type system without modifications. It is compiled to Java code and thereby seamlessly integrates with all existing Java libraries.\nThe language Xtend and its IDE is developed as a project at Eclipse.org and participates in the annual Eclipse release train. The code is open source under the Eclipse Public License. Yet, the language can be compiled and run independently of the Eclipse platform."
},
{"id": 687, 
"name": "YQL (programming language)",
"summary": "No summary available"
},
{"id": 688, 
"name": "YUI Library",
"summary": "The Yahoo! User Interface Library (YUI) is a discontinued open-source JavaScript library for building richly interactive web applications using techniques such as Ajax, DHTML, and DOM scripting. YUI includes several core CSS resources. It is available under a BSD License.\nDevelopment on YUI began in 2005 and Yahoo! properties such as My Yahoo! and the Yahoo! front page began using YUI in the summer of that year. YUI was released for public use in February 2006. It was actively developed by a core team of Yahoo! engineers.\nIn September 2009, Yahoo! released YUI 3, a new version of YUI rebuilt from the ground up to modernize the library and incorporate lessons learned from YUI 2. Among the enhancements are a CSS selector driven engine, like jQuery, for retrieving DOM elements, a greater emphasis on granularity of modules, a smaller seed file that loads other modules when necessary, and a variety of syntactic changes intended to make writing code faster and easier.The YUI Library project at Yahoo! was founded by Thomas Sha and sponsored internally by Yahoo! co-founder Jerry Yang; its principal architects have been Sha, Adam Moore, and Matt Sweeney. The library's developers maintain the YUIBlog; the YUI community discusses the library and implementations in its community forum.\nOn August 29, 2014, it was announced that active development of YUI by Yahoo! would end, citing the evolution of the JavaScript standards, steadily decreasing interest in large JavaScript libraries by developers, and the proliferation of server-side solutions. Future development will be limited to maintenance releases addressing issues which are \"absolutely critical to Yahoo properties.\""
},
{"id": 689, 
"name": "Yoix",
"summary": "In computer programming, Yoix is a high-level, general-purpose, interpreted, dynamic programming language. The Yoix interpreter is implemented using standard Java technology without any add-on packages and requires only a Sun-compliant JVM to operate. Initially developed by AT&T Labs researchers for internal use, it has been available as free and open source software since late 2000."
},
{"id": 690, 
"name": "Yorick (programming language)",
"summary": "Yorick is an interpreted programming language designed for numerics, graph plotting, and steering large scientific simulation codes. It is quite fast due to array syntax, and extensible via C or Fortran routines. It was created in 1996 by David H. Munro of Lawrence Livermore National Laboratory."
},
{"id": 691, 
"name": "Z notation",
"summary": "The Z notation  is a formal specification language used for describing and modelling computing systems. It is targeted at the clear specification of computer programs and computer-based systems in general."
},
{"id": 692, 
"name": "Z shell",
"summary": "The Z shell (Zsh) is a Unix shell that can be used as an interactive login shell and as a command interpreter for shell scripting. Zsh is an extended Bourne shell with many improvements, including some features of Bash, ksh, and tcsh.\nAnnounced in June and released in October 2019, macOS Catalina has adopted Zsh as the default shell, replacing Bash."
},
{"id": 693, 
"name": "Z++",
"summary": "Z or z is the 26th and final letter of the modern English alphabet and the ISO basic Latin alphabet. Its usual names in English are zed (pronounced ) and zee , with an occasional archaic variant izzard ."
},
{"id": 694, 
"name": "ZOPL",
"summary": "ZOPL is a programming language created by Geac Computer Corporation in the early 1970s for use on their mainframe computer systems used in libraries and banking institutions.  It had similarities to C and Pascal.\nZOPL stood for \"Version Z, Our Programming Language\".\nZOPL is still in use at CGI Group (formerly known as RealTime Datapro), who ported it to VAX/VMS and Unix in the 1980s, and to Windows in 1998.  It currently (2010) runs on Windows XP/2000/2003 and Red Hat Linux.  The RTM (formerly ZUG) language compiler and runtime framework are written in ZOPL.\nOutside of CGI, ZOPL has not been in general use since the late 1980s, although there is still one known working system where it is found embedded in programs written in the KARL programming language."
},
{"id": 695, 
"name": "ZPL (programming language)",
"summary": "ZPL (short for Z-level Programming Language) is an array programming language designed to replace C and C++ programming languages in engineering and scientific applications. Because its design goal was to obtain cross-platform high performance, ZPL programs run fast on both sequential and parallel computers. Highly-parallel ZPL programs are simple and easy to write because it exclusively uses implicit parallelism.\nOriginally called Orca C, ZPL was designed and implemented during 1993-1995 by the Orca Project of the Computer Science and Engineering Department at the University of Washington."
},
{"id": 696, 
"name": "Zebra (programming language)",
"summary": "Zebra Programming Language (ZPL and ZPL II) is a page description language from Zebra Technologies. It is used primarily for labeling applications. The original ZPL was advanced to ZPL II, but a full compatibility with the older version is not given. Meanwhile, ZPL II is emulated by many label printers of various producers.\nLater, the Zebra Basic Interpreter (ZBI) was integrated into printer software, which is seen as an advancement to ZPL II by the producer and is ANSI BASIC oriented. Primarily, it is intended to avoid a refactoring of code when changing the printer, if the old printer software was written by a label printer of a competitor.  A possible use of ZBI could be for when the Zebra printer receives a foreign label format, which it would then convert to ZPL II on the fly so it can be printed. Some printers also support the older Eltron Programming Language (EPL) for printers."
},
{"id": 697, 
"name": "Zeno (programming language)",
"summary": "Zeno (after pre-Socratic Greek philosopher Zeno of Elea) is an imperative procedural programming language designed to be easy to learn and user friendly. Zeno is generic in the sense that it contains most of the essential elements used in other languages to develop real applications.\nThe Zeno Interpreter was designed for use in Windows 95 and later Microsoft operating systems. The interpreter comes with built-in debugging tools, a source code text editor, and an on-line language reference. \nZeno was created by Stephen R. Schmitt and is maintained by Abecedarical Systems."
},
{"id": 698, 
"name": "ZetaLisp",
"summary": "Lisp Machine Lisp is a programming language, a dialect of the language Lisp. A direct descendant of Maclisp, it was initially developed in the mid to late 1970s as the system programming language for the Massachusetts Institute of Technology (MIT) Lisp machines. Lisp Machine Lisp was also the Lisp dialect with the most influence on the design of Common Lisp.\nLisp Machine Lisp branched into three dialects. Symbolics named their variant ZetaLisp. Lisp Machines, Inc. and later Texas Instruments (with the TI Explorer) would share a common code base, but their dialect of Lisp Machine Lisp would differ from the version maintained at the MIT AI Lab by Richard Stallman and others."
}
]